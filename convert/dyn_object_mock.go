// Code generated by MockGen. DO NOT EDIT.
// Source: ./dynamic_object.go

// Package convert is a generated GoMock package.
package convert

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDynObject is a mock of DynObject interface.
type MockDynObject struct {
	ctrl     *gomock.Controller
	recorder *MockDynObjectMockRecorder
}

// MockDynObjectMockRecorder is the mock recorder for MockDynObject.
type MockDynObjectMockRecorder struct {
	mock *MockDynObject
}

// NewMockDynObject creates a new mock instance.
func NewMockDynObject(ctrl *gomock.Controller) *MockDynObject {
	mock := &MockDynObject{ctrl: ctrl}
	mock.recorder = &MockDynObjectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDynObject) EXPECT() *MockDynObjectMockRecorder {
	return m.recorder
}

// FromMap mocks base method.
func (m_2 *MockDynObject) FromMap(m map[string]interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "FromMap", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// FromMap indicates an expected call of FromMap.
func (mr *MockDynObjectMockRecorder) FromMap(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromMap", reflect.TypeOf((*MockDynObject)(nil).FromMap), m)
}

// Init mocks base method.
func (m *MockDynObject) Init(cfg Config) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init", cfg)
}

// Init indicates an expected call of Init.
func (mr *MockDynObjectMockRecorder) Init(cfg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockDynObject)(nil).Init), cfg)
}

// Reset mocks base method.
func (m *MockDynObject) Reset() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset")
}

// Reset indicates an expected call of Reset.
func (mr *MockDynObjectMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockDynObject)(nil).Reset))
}

// ToMap mocks base method.
func (m *MockDynObject) ToMap() map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMap")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// ToMap indicates an expected call of ToMap.
func (mr *MockDynObjectMockRecorder) ToMap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMap", reflect.TypeOf((*MockDynObject)(nil).ToMap))
}
