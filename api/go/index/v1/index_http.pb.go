// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.4

package index

import (
	v1 "common/v1"
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type IndexHTTPServer interface {
	Create(context.Context, *IndexCreateReq) (*v1.StringId, error)
	Get(context.Context, *v1.StringId) (*IndexData, error)
	List(context.Context, *IndexListReq) (*IndexListResp, error)
	Remove(context.Context, *v1.StringId) (*IndexData, error)
	Update(context.Context, *IndexUpdateReq) (*v1.StringId, error)
}

func RegisterIndexHTTPServer(s *http.Server, srv IndexHTTPServer) {
	r := s.Route("/")
	r.GET("/api/index/_/{id}", _Index_Get0_HTTP_Handler(srv))
	r.GET("/api/index/_", _Index_List0_HTTP_Handler(srv))
	r.POST("/api/index/_", _Index_Create0_HTTP_Handler(srv))
	r.PATCH("/api/index/_/{id}", _Index_Update0_HTTP_Handler(srv))
	r.GET("/api/index/_/{id}", _Index_Remove0_HTTP_Handler(srv))
}

func _Index_Get0_HTTP_Handler(srv IndexHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.StringId
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/index.v1.Index/Get")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Get(ctx, req.(*v1.StringId))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*IndexData)
		return ctx.Result(200, reply)
	}
}

func _Index_List0_HTTP_Handler(srv IndexHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IndexListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/index.v1.Index/List")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.List(ctx, req.(*IndexListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*IndexListResp)
		return ctx.Result(200, reply)
	}
}

func _Index_Create0_HTTP_Handler(srv IndexHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IndexCreateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/index.v1.Index/Create")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Create(ctx, req.(*IndexCreateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.StringId)
		return ctx.Result(200, reply)
	}
}

func _Index_Update0_HTTP_Handler(srv IndexHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IndexUpdateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/index.v1.Index/Update")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Update(ctx, req.(*IndexUpdateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.StringId)
		return ctx.Result(200, reply)
	}
}

func _Index_Remove0_HTTP_Handler(srv IndexHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.StringId
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/index.v1.Index/Remove")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Remove(ctx, req.(*v1.StringId))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*IndexData)
		return ctx.Result(200, reply)
	}
}

type IndexHTTPClient interface {
	Create(ctx context.Context, req *IndexCreateReq, opts ...http.CallOption) (rsp *v1.StringId, err error)
	Get(ctx context.Context, req *v1.StringId, opts ...http.CallOption) (rsp *IndexData, err error)
	List(ctx context.Context, req *IndexListReq, opts ...http.CallOption) (rsp *IndexListResp, err error)
	Remove(ctx context.Context, req *v1.StringId, opts ...http.CallOption) (rsp *IndexData, err error)
	Update(ctx context.Context, req *IndexUpdateReq, opts ...http.CallOption) (rsp *v1.StringId, err error)
}

type IndexHTTPClientImpl struct {
	cc *http.Client
}

func NewIndexHTTPClient(client *http.Client) IndexHTTPClient {
	return &IndexHTTPClientImpl{client}
}

func (c *IndexHTTPClientImpl) Create(ctx context.Context, in *IndexCreateReq, opts ...http.CallOption) (*v1.StringId, error) {
	var out v1.StringId
	pattern := "/api/index/_"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/index.v1.Index/Create"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *IndexHTTPClientImpl) Get(ctx context.Context, in *v1.StringId, opts ...http.CallOption) (*IndexData, error) {
	var out IndexData
	pattern := "/api/index/_/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/index.v1.Index/Get"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *IndexHTTPClientImpl) List(ctx context.Context, in *IndexListReq, opts ...http.CallOption) (*IndexListResp, error) {
	var out IndexListResp
	pattern := "/api/index/_"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/index.v1.Index/List"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *IndexHTTPClientImpl) Remove(ctx context.Context, in *v1.StringId, opts ...http.CallOption) (*IndexData, error) {
	var out IndexData
	pattern := "/api/index/_/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/index.v1.Index/Remove"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *IndexHTTPClientImpl) Update(ctx context.Context, in *IndexUpdateReq, opts ...http.CallOption) (*v1.StringId, error) {
	var out v1.StringId
	pattern := "/api/index/_/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/index.v1.Index/Update"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
