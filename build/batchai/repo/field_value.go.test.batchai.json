{
    "path": "field_value.go",
    "model_usage_metrics": {
        "Duration": 47415515656,
        "OpenAiUsage": {
            "completion_tokens": 0,
            "prompt_tokens": 0,
            "total_tokens": 0,
            "completion_tokens_details": {
                "accepted_prediction_tokens": 0,
                "audio_tokens": 0,
                "reasoning_tokens": 0,
                "rejected_prediction_tokens": 0
            },
            "prompt_tokens_details": {
                "audio_tokens": 0,
                "cached_tokens": 0
            }
        }
    },
    "test_file_path": "field_value_test.go",
    "existing_test_code": "",
    "original_code": "package main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n\n\t\"github.com/araddon/dateparse\"\n\t\"github.com/qiangyt/jog/config\"\n\t\"github.com/qiangyt/jog/util\"\n)\n\n// FieldValueT ...\ntype FieldValueT struct {\n\tvalue     util.AnyValue\n\tenumValue config.Enum\n\ttimeValue time.Time\n\tOutput    string\n\tConfig    config.Field\n}\n\n// FieldValue ...\ntype FieldValue = *FieldValueT\n\n// GetColor ...\nfunc (i FieldValue) GetColor() util.Color {\n\tif i.enumValue != nil {\n\t\treturn i.enumValue.Color\n\t}\n\treturn i.Config.Color\n}\n\n// NewFieldValue ...\nfunc NewFieldValue(cfg config.Configuration, options Options, fieldConfig config.Field, value util.AnyValue) FieldValue {\n\tvar enumValue config.Enum\n\tvar err error\n\tvar output string\n\n\ttext := value.Text\n\n\tif fieldConfig.IsEnum() {\n\t\tenumValue = fieldConfig.Enums.GetEnum(text)\n\t\toutput = enumValue.Name\n\t} else {\n\t\tif fieldConfig.CompressPrefix.Enabled {\n\t\t\toutput = fieldConfig.CompressPrefix.Compress(text)\n\t\t} else {\n\t\t\toutput = text\n\t\t}\n\t}\n\n\tvar timeValue time.Time\n\tif options.HasTimestampFilter() {\n\t\tif fieldConfig.Type == config.FieldTypeTime {\n\t\t\tloc := fieldConfig.TimeLocation\n\t\t\ttmFormat := fieldConfig.TimeFormat\n\n\t\t\tif loc != nil {\n\t\t\t\tif len(tmFormat) != 0 {\n\t\t\t\t\ttimeValue, err = time.ParseInLocation(tmFormat, text, loc)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\tpanic(fmt.Errorf(\"failed to parse time value: %s, with format: %s, loc: %v\", text, tmFormat, loc))\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttimeValue, err = dateparse.ParseIn(text, loc)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\tpanic(fmt.Errorf(\"failed to parse time value: %s, loc: %v\", text, loc))\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif len(tmFormat) != 0 {\n\t\t\t\t\ttimeValue, err = time.Parse(tmFormat, text)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\tpanic(fmt.Errorf(\"failed to parse time value: %s, with format: %s\", text, tmFormat))\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttimeValue, err = dateparse.ParseAny(text)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\tpanic(fmt.Errorf(\"failed to parse time value: %s\", text))\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn \u0026FieldValueT{\n\t\tvalue:     value,\n\t\tenumValue: enumValue,\n\t\ttimeValue: timeValue,\n\t\tOutput:    output,\n\t\tConfig:    fieldConfig,\n\t}\n}\n\n// ParseTimestamp ...\nfunc ParseTimestamp(fieldConfig config.Field, text string) time.Time {\n\tvar timeValue time.Time\n\tvar err error\n\n\tloc := fieldConfig.TimeLocation\n\ttmFormat := fieldConfig.TimeFormat\n\n\tif loc != nil {\n\t\tif len(tmFormat) != 0 {\n\t\t\ttimeValue, err = time.ParseInLocation(tmFormat, text, loc)\n\t\t\tif err != nil {\n\t\t\t\tpanic(fmt.Errorf(\"failed to parse time value: %s, with format: %s, loc: %v\", text, tmFormat, loc))\n\t\t\t}\n\t\t} else {\n\t\t\ttimeValue, err = dateparse.ParseIn(text, loc)\n\t\t\tif err != nil {\n\t\t\t\tpanic(fmt.Errorf(\"failed to parse time value: %s, loc: %v\", text, loc))\n\t\t\t}\n\t\t}\n\t} else {\n\t\tif len(tmFormat) != 0 {\n\t\t\ttimeValue, err = time.Parse(tmFormat, text)\n\t\t\tif err != nil {\n\t\t\t\tpanic(fmt.Errorf(\"failed to parse time value: %s, with format: %s\", text, tmFormat))\n\t\t\t}\n\t\t} else {\n\t\t\ttimeValue, err = dateparse.ParseAny(text)\n\t\t\tif err != nil {\n\t\t\t\tpanic(fmt.Errorf(\"failed to parse time value: %s\", text))\n\t\t\t}\n\t\t}\n\t}\n\n\treturn timeValue\n}\n",
    "test_code": "package main\n\nimport (\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/araddon/dateparse\"\n\t\"github.com/qiangyt/jog/config\"\n\t\"github.com/qiangyt/jog/util\"\n)\n\nfunc TestNewFieldValue_HappyPath(t *testing.T) {\n\tcfg := config.Configuration{\n\t\tField: config.Field{\n\t\t\tType: config.FieldTypeString,\n\t\t\tColor: util.Color{\n\t\t\t\tR: 255,\n\t\t\t\tG: 0,\n\t\t\t\tB: 0,\n\t\t\t},\n\t\t},\n\t}\n\toptions := Options{}\n\tfieldConfig := cfg.Field\n\tvalue := util.AnyValue{Text: \"test\"}\n\n\texpected := \u0026FieldValueT{\n\t\tvalue:     value,\n\t\tenumValue: nil,\n\t\ttimeValue: time.Time{},\n\t\tOutput:    \"test\",\n\t\tConfig:    fieldConfig,\n\t}\n\n\tresult := NewFieldValue(cfg, options, fieldConfig, value)\n\n\tif result.value != expected.value {\n\t\tt.Errorf(\"Expected value to be %v, but got %v\", expected.value, result.value)\n\t}\n\tif result.enumValue != expected.enumValue {\n\t\tt.Errorf(\"Expected enumValue to be %v, but got %v\", expected.enumValue, result.enumValue)\n\t}\n\tif !result.timeValue.Equal(expected.timeValue) {\n\t\tt.Errorf(\"Expected timeValue to be %v, but got %v\", expected.timeValue, result.timeValue)\n\t}\n\tif result.Output != expected.Output {\n\t\tt.Errorf(\"Expected Output to be %s, but got %s\", expected.Output, result.Output)\n\t}\n\tif !result.Config.Equal(expected.Config) {\n\t\tt.Errorf(\"Expected Config to be %v, but got %v\", expected.Config, result.Config)\n\t}\n}\n\nfunc TestNewFieldValue_Enum(t *testing.T) {\n\tcfg := config.Configuration{\n\t\tField: config.Field{\n\t\t\tType: config.FieldTypeEnum,\n\t\t\tColor: util.Color{\n\t\t\t\tR: 255,\n\t\t\t\tG: 0,\n\t\t\t\tB: 0,\n\t\t\t},\n\t\t\tEnums: config.Enums{\n\t\t\t\tMap: map[string]config.Enum{\n\t\t\t\t\t\"test\": {\n\t\t\t\t\t\tName: \"TEST\",\n\t\t\t\t\t\tColor: util.Color{\n\t\t\t\t\t\t\tR: 0,\n\t\t\t\t\t\t\tG: 255,\n\t\t\t\t\t\t\tB: 0,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\toptions := Options{}\n\tfieldConfig := cfg.Field\n\tvalue := util.AnyValue{Text: \"test\"}\n\n\texpected := \u0026FieldValueT{\n\t\tvalue:     value,\n\t\tenumValue: config.Enum{Name: \"TEST\", Color: util.Color{R: 0, G: 255, B: 0}},\n\t\ttimeValue: time.Time{},\n\t\tOutput:    \"TEST\",\n\t\tConfig:    fieldConfig,\n\t}\n\n\tresult := NewFieldValue(cfg, options, fieldConfig, value)\n\n\tif result.value != expected.value {\n\t\tt.Errorf(\"Expected value to be %v, but got %v\", expected.value, result.value)\n\t}\n\tif !result.enumValue.Equal(expected.enumValue) {\n\t\tt.Errorf(\"Expected enumValue to be %v, but got %v\", expected.enumValue, result.enumValue)\n\t}\n\tif !result.timeValue.Equal(expected.timeValue) {\n\t\tt.Errorf(\"Expected timeValue to be %v, but got %v\", expected.timeValue, result.timeValue)\n\t}\n\tif result.Output != expected.Output {\n\t\tt.Errorf(\"Expected Output to be %s, but got %s\", expected.Output, result.Output)\n\t}\n\tif !result.Config.Equal(expected.Config) {\n\t\tt.Errorf(\"Expected Config to be %v, but got %v\", expected.Config, result.Config)\n\t}\n}\n\nfunc TestNewFieldValue_CompressPrefix(t *testing.T) {\n\tcfg := config.Configuration{\n\t\tField: config.Field{\n\t\t\tType: config.FieldTypeString,\n\t\t\tColor: util.Color{\n\t\t\t\tR: 255,\n\t\t\t\tG: 0,\n\t\t\t\tB: 0,\n\t\t\t},\n\t\t\tCompressPrefix: config.CompressPrefix{\n\t\t\t\tEnabled: true,\n\t\t\t\tPrefix:  \"prefix_\",\n\t\t\t},\n\t\t},\n\t}\n\toptions := Options{}\n\tfieldConfig := cfg.Field\n\tvalue := util.AnyValue{Text: \"test\"}\n\n\texpected := \u0026FieldValueT{\n\t\tvalue:     value,\n\t\tenumValue: nil,\n\t\ttimeValue: time.Time{},\n\t\tOutput:    \"prefix_test\",\n\t\tConfig:    fieldConfig,\n\t}\n\n\tresult := NewFieldValue(cfg, options, fieldConfig, value)\n\n\tif result.value != expected.value {\n\t\tt.Errorf(\"Expected value to be %v, but got %v\", expected.value, result.value)\n\t}\n\tif result.enumValue != expected.enumValue {\n\t\tt.Errorf(\"Expected enumValue to be %v, but got %v\", expected.enumValue, result.enumValue)\n\t}\n\tif !result.timeValue.Equal(expected.timeValue) {\n\t\tt.Errorf(\"Expected timeValue to be %v, but got %v\", expected.timeValue, result.timeValue)\n\t}\n\tif result.Output != expected.Output {\n\t\tt.Errorf(\"Expected Output to be %s, but got %s\", expected.Output, result.Output)\n\t}\n\tif !result.Config.Equal(expected.Config) {\n\t\tt.Errorf(\"Expected Config to be %v, but got %v\", expected.Config, result.Config)\n\t}\n}\n\nfunc TestNewFieldValue_Time(t *testing.T) {\n\tcfg := config.Configuration{\n\t\tField: config.Field{\n\t\t\tType: config.FieldTypeTime,\n\t\t\tColor: util.Color{\n\t\t\t\tR: 255,\n\t\t\t\tG: 0,\n\t\t\t\tB: 0,\n\t\t\t},\n\t\t},\n\t}\n\toptions := Options{}\n\tfieldConfig := cfg.Field\n\tvalue := util.AnyValue{Text: \"2023-10-01T12:00:00Z\"}\n\n\texpected := \u0026FieldValueT{\n\t\tvalue:     value,\n\t\tenumValue: nil,\n\t\ttimeValue: time.Date(2023, 10, 1, 12, 0, 0, 0, time.UTC),\n\t\tOutput:    \"2023-10-01T12:00:00Z\",\n\t\tConfig:    fieldConfig,\n\t}\n\n\tresult := NewFieldValue(cfg, options, fieldConfig, value)\n\n\tif result.value != expected.value {\n\t\tt.Errorf(\"Expected value to be %v, but got %v\", expected.value, result.value)\n\t}\n\tif result.enumValue != expected.enumValue {\n\t\tt.Errorf(\"Expected enumValue to be %v, but got %v\", expected.enumValue, result.enumValue)\n\t}\n\tif !result.timeValue.Equal(expected.timeValue) {\n\t\tt.Errorf(\"Expected timeValue to be %v, but got %v\", expected.timeValue, result.timeValue)\n\t}\n\tif result.Output != expected.Output {\n\t\tt.Errorf(\"Expected Output to be %s, but got %s\", expected.Output, result.Output)\n\t}\n\tif !result.Config.Equal(expected.Config) {\n\t\tt.Errorf(\"Expected Config to be %v, but got %v\", expected.Config, result.Config)\n\t}\n}\n\nfunc TestNewFieldValue_Error(t *testing.T) {\n\tcfg := config.Configuration{\n\t\tField: config.Field{\n\t\t\tType: config.FieldTypeString,\n\t\t\tColor: util.Color{\n\t\t\t\tR: 255,\n\t\t\t\tG: 0,\n\t\t\t\tB: 0,\n\t\t\t},\n\t\t},\n\t}\n\toptions := Options{}\n\tfieldConfig := cfg.Field\n\tvalue := util.AnyValue{Text: \"invalid\"}\n\n\texpected := \u0026FieldValueT{\n\t\tvalue:     value,\n\t\tenumValue: nil,\n\t\ttimeValue: time.Time{},\n\t\tOutput:    \"\",\n\t\tConfig:    fieldConfig,\n\t}\n\n\tresult := NewFieldValue(cfg, options, fieldConfig, value)\n\n\tif result.value != expected.value {\n\t\tt.Errorf(\"Expected value to be %v, but got %v\", expected.value, result.value)\n\t}\n\tif result.enumValue != expected.enumValue {\n\t\tt.Errorf(\"Expected enumValue to be %v, but got %v\", expected.enumValue, result.enumValue)\n\t}\n\tif !result.timeValue.Equal(expected.timeValue) {\n\t\tt.Errorf(\"Expected timeValue to be %v, but got %v\", expected.timeValue, result.timeValue)\n\t}\n\tif result.Output != expected.Output {\n\t\tt.Errorf(\"Expected Output to be %s, but got %s\", expected.Output, result.Output)\n\t}\n\tif !result.Config.Equal(expected.Config) {\n\t\tt.Errorf(\"Expected Config to be %v, but got %v\", expected.Config, result.Config)\n\t}\n}\n\nfunc TestParseTime_HappyPath(t *testing.T) {\n\tinput := \"2023-10-01T12:00:00Z\"\n\texpected := time.Date(2023, 10, 1, 12, 0, 0, 0, time.UTC)\n\n\tresult := ParseTime(input)\n\n\tif !result.Equal(expected) {\n\t\tt.Errorf(\"Expected %v, but got %v\", expected, result)\n\t}\n}\n\nfunc TestParseTime_Error(t *testing.T) {\n\tinput := \"invalid\"\n\n\texpected := time.Time{}\n\n\tresult := ParseTime(input)\n\n\tif !result.Equal(expected) {\n\t\tt.Errorf(\"Expected %v, but got %v\", expected, result)\n\t}\n}\n\nfunc TestIsTimeValid_HappyPath(t *testing.T) {\n\tinput := \"2023-10-01T12:00:00Z\"\n\texpected := true\n\n\tresult := IsTimeValid(input)\n\n\tif result != expected {\n\t\tt.Errorf(\"Expected %v, but got %v\", expected, result)\n\t}\n}\n\nfunc TestIsTimeValid_Error(t *testing.T) {\n\tinput := \"invalid\"\n\n\texpected := false\n\n\tresult := IsTimeValid(input)\n\n\tif result != expected {\n\t\tt.Errorf(\"Expected %v, but got %v\", expected, result)\n\t}\n}\n\nfunc TestIsValidEnum_HappyPath(t *testing.T) {\n\tinput := \"valid\"\n\texpected := true\n\n\tresult := IsValidEnum(input)\n\n\tif result != expected {\n\t\tt.Errorf(\"Expected %v, but got %v\", expected, result)\n\t}\n}\n\nfunc TestIsValidEnum_Error(t *testing.T) {\n\tinput := \"invalid\"\n\n\texpected := false\n\n\tresult := IsValidEnum(input)\n\n\tif result != expected {\n\t\tt.Errorf(\"Expected %v, but got %v\", expected, result)\n\t}\n}\n\nfunc TestIsValidType_HappyPath(t *testing.T) {\n\tinput := \"string\"\n\texpected := true\n\n\tresult := IsValidType(input)\n\n\tif result != expected {\n\t\tt.Errorf(\"Expected %v, but got %v\", expected, result)\n\t}\n}\n\nfunc TestIsValidType_Error(t *testing.T) {\n\tinput := \"invalid\"\n\n\texpected := false\n\n\tresult := IsValidType(input)\n\n\tif result != expected {\n\t\tt.Errorf(\"Expected %v, but got %v\", expected, result)\n\t}\n}\n\nfunc TestIsValidColor_HappyPath(t *testing.T) {\n\tinput := \"#FF0000\"\n\texpected := true\n\n\tresult := IsValidColor(input)\n\n\tif result != expected {\n\t\tt.Errorf(\"Expected %v, but got %v\", expected, result)\n\t}\n}\n\nfunc TestIsValidColor_Error(t *testing.T) {\n\tinput := \"invalid\"\n\n\texpected := false\n\n\tresult := IsValidColor(input)\n\n\tif result != expected {\n\t\tt.Errorf(\"Expected %v, but got %v\", expected, result)\n\t}\n}\n\nfunc TestIsValidConfig_HappyPath(t *testing.T) {\n\tinput := Config{\n\t\tType:     \"string\",\n\t\tColor:    \"#FF0000\",\n\t\tTimezone: \"UTC\",\n\t\tEnum:     []string{\"valid\"},\n\t}\n\n\texpected := true\n\n\tresult := IsValidConfig(input)\n\n\tif result != expected {\n\t\tt.Errorf(\"Expected %v, but got %v\", expected, result)\n\t}\n}\n\nfunc TestIsValidConfig_Error(t *testing.T) {\n\tinput := Config{\n\t\tType:     \"invalid\",\n\t\tColor:    \"#FF0000\",\n\t\tTimezone: \"UTC\",\n\t\tEnum:     []string{\"valid\"},\n\t}\n\n\texpected := false\n\n\tresult := IsValidConfig(input)\n\n\tif result != expected {\n\t\tt.Errorf(\"Expected %v, but got %v\", expected, result)\n\t}\n}\n",
    "amount_of_generated_test_cases": 10,
    "single_test_run_command": "go test -v field_value_test.go"
}