{
    "path": "cmdline.go",
    "model_usage_metrics": {
        "Duration": 120000934090,
        "OpenAiUsage": {
            "completion_tokens": 0,
            "prompt_tokens": 0,
            "total_tokens": 0,
            "completion_tokens_details": {
                "accepted_prediction_tokens": 0,
                "audio_tokens": 0,
                "reasoning_tokens": 0,
                "rejected_prediction_tokens": 0
            },
            "prompt_tokens_details": {
                "audio_tokens": 0,
                "cached_tokens": 0
            }
        }
    },
    "test_file_path": "cmdline_test.go",
    "existing_test_code": "",
    "original_code": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\n\t\"github.com/gookit/color\"\n\t\"github.com/qiangyt/jog/config\"\n\t\"github.com/qiangyt/jog/static\"\n)\n\n// PrintVersion ...\nfunc PrintVersion() {\n\tfmt.Println(static.AppVersion)\n}\n\n// PrintConfigTemplate ...\nfunc PrintConfigTemplate() {\n\tfmt.Println(config.BuildDefaultConfigurationYAML())\n}\n\n// PrintHelp ...\nfunc PrintHelp() {\n\tdefaultGrokLibraryDirs := strings.Join(config.DefaultGrokLibraryDirs(false), \", \")\n\n\tcolor.New(color.Blue, color.OpBold).Println(\"\\nConvert and view structured (JSON) log\")\n\tPrintVersion()\n\tfmt.Println()\n\n\tcolor.New(color.FgBlue, color.OpBold).Println(\"Usage:\")\n\tcolor.FgBlue.Println(\"  jog  [option...]  \u003cyour JSON log file path\u003e\")\n\tcolor.FgBlue.Println(\"    or\")\n\tcolor.FgBlue.Println(\"  cat  \u003cyour JSON file path\u003e  |  jog  [option...]\")\n\tfmt.Println()\n\n\tcolor.New(color.FgBlue, color.OpBold).Println(\"Examples:\")\n\tfmt.Println(\"   1) follow with last 10 lines:         jog -f app-20200701-1.log\")\n\tfmt.Println(\"   2) follow with specified lines:       jog -n 100 -f app-20200701-1.log\")\n\tfmt.Println(\"   3) with specified config file:        jog -c another.jog.yml app-20200701-1.log\")\n\tfmt.Println(\"   4) view docker-compose log:           docker-compose logs | jog\")\n\tfmt.Println(\"   5) print the default template:        jog -t\")\n\tfmt.Println(\"   6) only shows WARN \u0026 ERROR level:     jog -l warn -l error app-20200701-1.log\")\n\tfmt.Println(\"   7) shows with timestamp range:        jog --after 2020-7-1 --before 2020-7-3 app-20200701-1.log\")\n\tfmt.Println(\"   8) natural timestamp range:           jog --after \\\"1 week\\\" --before \\\"2 days\\\" app-20200701-1.log\")\n\tfmt.Println(\"   9) output raw JSON and apply time range filter:      jog --after \\\"1 week\\\" --before \\\"2 days\\\" app-20200701-1.log --json\")\n\tfmt.Println(\"   10) disable colorization:             jog -cs colorization=false app-20200701-1.log\")\n\tfmt.Println(\"   11) view apache log, non-JSON log     jog -g COMMONAPACHELOG example_logs/grok_apache.log\")\n\tfmt.Println()\n\n\tcolor.New(color.FgBlue, color.OpBold).Println(\"Options:\")\n\tfmt.Printf(\"  -a,  --after \u003ctimestamp\u003e                                    'after' time filter. Auto-detect the timestamp format; can be natural datetime \\n\")\n\tfmt.Printf(\"  -b,  --before \u003ctimestamp\u003e                                   'before' time filter. Auto-detect the timestamp format; can be natural datetime \\n\")\n\tfmt.Printf(\"  -c,  --config \u003cconfig file path\u003e                            Specify config YAML file path. The default is .jog.yaml or $HOME/.jog.yaml \\n\")\n\tfmt.Printf(\"  -cs, --config-set \u003cconfig item path\u003e=\u003cconfig item value\u003e    Set value to specified config item \\n\")\n\tfmt.Printf(\"  -cg, --config-get \u003cconfig item path\u003e                        Get value to specified config item \\n\")\n\tfmt.Printf(\"  -d,  --debug                                                Print more error detail\\n\")\n\tfmt.Printf(\"  -f,  --follow                                               Follow mode - follow log output\\n\")\n\tfmt.Printf(\"  -g,  --grok \u003cgrok pattern name\u003e                             For non-json log line. The default patterns are saved in [%s]\\n\", defaultGrokLibraryDirs)\n\tfmt.Printf(\"  -h,  --help                                                 Display this information\\n\")\n\tfmt.Printf(\"  -j,  --json                                                 Output the raw JSON but then able to apply filters\\n\")\n\tfmt.Printf(\"  -l,  --level \u003clevel value\u003e                                  Filter by log level. For ex. --level warn \\n\")\n\tfmt.Printf(\"  -n,  --lines \u003cnumber of tail lines\u003e                         Number of tail lines. 10 by default, for follow mode\\n\")\n\tfmt.Printf(\"       --reset-grok-library-dir                               Save default GROK patterns to [%s]\\n\", defaultGrokLibraryDirs)\n\tfmt.Printf(\"  -t,  --template                                             Print a config YAML file template\\n\")\n\tfmt.Printf(\"  -V,  --version                                              Display app version information\\n\")\n\tfmt.Println()\n}\n",
    "test_code": "package main\n\nimport (\n\t\"strings\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestPrintVersion(t *testing.T) {\n\t// Arrange\n\texpectedOutput := static.AppVersion + \"\\n\"\n\n\t// Act\n\tactualOutput := captureStdout(func() {\n\t\tPrintVersion()\n\t})\n\n\t// Assert\n\tassert.Equal(t, expectedOutput, actualOutput)\n}\n\nfunc TestPrintConfigTemplate(t *testing.T) {\n\t// Arrange\n\texpectedOutput := config.BuildDefaultConfigurationYAML() + \"\\n\"\n\n\t// Act\n\tactualOutput := captureStdout(func() {\n\t\tPrintConfigTemplate()\n\t})\n\n\t// Assert\n\tassert.Equal(t, expectedOutput, actualOutput)\n}\n\nfunc TestPrintHelp(t *testing.T) {\n\t// Arrange\n\texpectedOutput := strings.TrimSpace(`\nConvert and view structured (JSON) log\n` + static.AppVersion + `\nUsage:\n  jog  [option...]  \u003cyour JSON log file path\u003e\n    or\n  cat  \u003cyour JSON file path\u003e  |  jog  [option...]\nExamples:\n   1) follow with last 10 lines:         jog -f app-20200701-1.log\n   2) follow with specified lines:       jog -n 100 -f app-20200701-1.log\n   3) with specified config file:        jog -c another.jog.yml app-20200701-1.log\n   4) view docker-compose log:           docker-compose logs | jog\n   5) print the default template:        jog -t\n   6) only shows WARN \u0026 ERROR level:     jog -l warn -l error app-20200701-1.log\n   7) shows with timestamp range:        jog --after 2020-7-1 --before 2020-7-3 app-20200701-1.log\n   8) natural timestamp range:           jog --after \"1 week\" --before \"2 days\" app-20200701-1.log\n   9) output raw JSON and apply time range filter:      jog --after \"1 week\" --before \"2 days\" app-20200701-1.log --json\n   10) disable colorization:             jog -cs colorization=false app-20200701-1.log\n   11) view apache log, non-JSON log     jog -g COMMONAPACHELOG example_logs/grok_apache.log\nOptions:\n  -a,  --after \u003ctimestamp\u003e                                    'after' time filter. Auto-detect the timestamp format; can be natural datetime \n  -b,  --before \u003ctimestamp\u003e                                   'before' time filter. Auto-detect the timestamp format; can be natural datetime \n  -c,  --config \u003cconfig file path\u003e                            Specify config YAML file path. The default is .jog.yaml or $HOME/.jog.yaml \n  -cs, --config-set \u003cconfig item path\u003e=\u003cconfig item value\u003e    Set value to specified config item \n  -cg, --config-get \u003cconfig item path\u003e                        Get value to specified config item \n  -d,  --debug                                                Print more error detail\n  -f,  --follow                                               Follow mode - follow log output\n  -g,  --grok \u003cgrok pattern name\u003e                             For non-json log line. The default patterns are saved in [defaultGrokLibraryDirs]\n  -h,  --help                                                 Display this information\n  -j,  --json                                                 Output the raw JSON but then able to apply filters\n  -l,  --level \u003clevel value\u003e                                  Filter by log level. For ex. --level warn \n  -n,  --lines \u003cnumber of tail lines\u003e                         Number of tail lines. 10 by default, for follow mode\n       --reset-grok-library-dir                               Save default GROK patterns to [defaultGrokLibraryDirs]\n  -t,  --template                                             Print a config YAML file template\n  -V,  --version                                              Display app version information\n\n`) + \"\\n\"\n\n\t// Act\n\tactualOutput := captureStdout(func() {\n\t\tPrintHelp()\n\t})\n\n\t// Assert\n\tassert.Equal(t, expectedOutput, actualOutput)\n}\n\nfunc TestPrintHelpWithCustomGrokLibraryDirs(t *testing.T) {\n\t// Arrange\n\tdefaultGrokLibraryDirs := \"/custom/grok/library/dirs\"\n\texpectedOutput := strings.TrimSpace(`\nConvert and view structured (JSON) log\n` + static.AppVersion + `\nUsage:\n  jog  [option...]  \u003cyour JSON log file path\u003e\n    or\n  cat  \u003cyour JSON file path\u003e  |  jog  [option...]\nExamples:\n   1) follow with last 10 lines:         jog -f app-20200701-1.log\n   2) follow with specified lines:       jog -n 100 -f app-20200701-1.log\n   3) with specified config file:        jog -c another.jog.yml app-20200701-1.log\n   4) view docker-compose log:           docker-compose logs | jog\n   5) print the default template:        jog -t\n   6) only shows WARN \u0026 ERROR level:     jog -l warn -l error app-20200701-1.log\n   7) shows with timestamp range:        jog --after 2020-7-1 --before 2020-7-3 app-20200701-1.log\n   8) natural timestamp range:           jog --after \"1 week\" --before \"2 days\" app-20200701-1.log\n   9) output raw JSON and apply time range filter:      jog --after \"1 week\" --before \"2 days\" app-20200701-1.log --json\n   10) disable colorization:             jog -cs colorization=false app-20200701-1.log\n   11) view apache log, non-JSON log     jog -g COMMONAPACHELOG example_logs/grok_apache.log\nOptions:\n  -a,  --after \u003ctimestamp\u003e                                    'after' time filter. Auto-detect the timestamp format; can be natural datetime \n  -b,  --before \u003ctimestamp\u003e                                   'before' time filter. Auto-detect the timestamp format; can be natural datetime \n  -c,  --config \u003cconfig file path\u003e                            Specify config YAML file path. The default is .jog.yaml or $HOME/.jog.yaml \n  -cs, --config-set \u003cconfig item path\u003e=\u003cconfig item value\u003e    Set value to specified config item \n  -cg, --config-get \u003cconfig item path\u003e                        Get value to specified config item \n  -d,  --debug                                                Print more error detail\n  -f,  --follow                                               Follow mode - follow log output\n  -g,  --grok \u003cgrok pattern name\u003e                             For non-json log line. The default patterns are saved in [/custom/grok/library/dirs]\n  -h,  --help                                                 Display this information\n  -j,  --json                                                 Output the raw JSON but then able to apply filters\n  -l,  --level \u003clevel value\u003e                                  Filter by log level. For ex. --level warn \n  -n,  --lines \u003cnumber of tail lines\u003e                         Number of tail lines. 10 by default, for follow mode\n       --reset-grok-library-dir                               Save default GROK patterns to [/custom/grok/library/dirs]\n  -t,  --template                                             Print a config YAML file template\n  -V,  --version                                              Display app version information\n\n`) + \"\\n\"\n\n\t// Act\n\tactualOutput := captureStdout(func() {\n\t\tdefaultGrokLibraryDirs = \"/custom/grok/library/dirs\"\n\t\tPrintHelp()\n\t})\n\n\t// Assert\n\tassert.Equal(t, expectedOutput, actualOutput)\n}\n\nfunc TestPrintHelpWithEmptyGrokLibraryDirs(t *testing.T) {\n\t// Arrange\n\tdefaultGrokLibraryDirs := \"\"\n\texpectedOutput := strings.TrimSpace(`\nConvert and view structured (JSON) log\n` + static.AppVersion + `\nUsage:\n  jog  [option...]  \u003cyour JSON log file path\u003e\n    or\n  cat  \u003cyour JSON file path\u003e  |  jog  [option...]\nExamples:\n   1) follow with last 10 lines:         jog -f app-20200701-1.log\n   2) follow with specified lines:       jog -n 100 -f app-20200701-1.log\n   3) with specified config file:        jog -c another.jog.yml app-20200701-1.log\n   4) view docker-compose log:           docker-compose logs | jog\n   5) print the default template:        jog -t\n   6) only shows WARN \u0026 ERROR level:     jog -l warn -l error app-20200701-1.log\n   7) shows with timestamp range:        jog --after 2020-7-1 --before 2020-7-3 app-20200701-1.log\n   8) natural timestamp range:           jog --after \"1 week\" --before \"2 days\" app-20200701-1.log\n   9) output raw JSON and apply time range filter:      jog --after \"1 week\" --before \"2 days\" app-20200701-1.log --json\n   10) disable colorization:             jog -cs colorization=false app-20200701-1.log\n   11) view apache log, non-JSON log     jog -g COMMONAPACHELOG example_logs/grok_apache.log\nOptions:\n  -a,  --after \u003ctimestamp\u003e                                    'after' time filter. Auto-detect the timestamp format; can be natural datetime \n  -b,  --before \u003ctimestamp\u003e                                   'before' time filter. Auto-detect the timestamp format; can be natural datetime \n  -c,  --config \u003cconfig file path\u003e                            Specify config YAML file path. The default is .jog.yaml or $HOME/.jog.yaml \n  -cs, --config-set \u003cconfig item path\u003e=\u003cconfig item value\u003e    Set value to specified config item \n  -cg, --config-get \u003cconfig item path\u003e                        Get value to specified config item \n  -d,  --debug                                                Print more error detail\n  -f,  --follow                                               Follow mode - follow log output\n  -g,  --grok \u003cgrok pattern name\u003e                             For non-json log line. The default patterns are saved in []\n  -h,  --help                                                 Display this information\n  -j,  --json                                                 Output the raw JSON but then able to apply filters\n  -l,  --level \u003clevel value\u003e                                  Filter by log level. For ex. --level warn \n  -n,  --lines \u003cnumber of tail lines\u003e                         Number of tail lines. 10 by default, for follow mode\n       --reset-grok-library-dir                               Save default GROK patterns to []\n  -t,  --template                                             Print a config YAML file template\n  -V,  --version                                              Display app version information\n\n`) + \"\\n\"\n\n\t// Act\n\tactualOutput := captureStdout(func() {\n\t\tdefaultGrokLibraryDirs = \"\"\n\t\tPrintHelp()\n\t})\n\n\t// Assert\n\tassert.Equal(t, expectedOutput, actualOutput)\n}\n\nfunc TestPrintHelpWithInvalidGrokLibraryDirs(t *testing.T) {\n\t// Arrange\n\tdefaultGrokLibraryDirs := \"/invalid/grok/library/dirs\"\n\texpectedOutput := strings.TrimSpace(`\nConvert and view structured (JSON) log\n` + static.AppVersion + `\nUsage:\n  jog  [option...]  \u003cyour JSON log file path\u003e\n    or\n  cat  \u003cyour JSON file path\u003e  |  jog  [option...]\nExamples:\n   1) follow with last 10 lines:         jog -f app-20200701-1.log\n   2) follow with specified lines:       jog -n 100 -f app-20200701-1.log\n   3) with specified config file:        jog -c another.jog.yml app-20200701-1.log\n   4) view docker-compose log:           docker-compose logs | jog\n   5) print the default template:        jog -t\n   6) only shows WARN \u0026 ERROR level:     jog -l warn -l error app-20200701-1.log\n   7) shows with timestamp range:        jog --after 2020-7-1 --before 2020-7-3 app-20200701-1.log\n   8) natural timestamp range:           jog --after \"1 week\" --before \"2 days\" app-20200701-1.log\n   9) output raw JSON and apply time range filter:      jog --after \"1 week\" --before \"2 days\" app-20200701-1.log --json\n   10) disable colorization:             jog -cs colorization=false app-20200701-1.log\n   11) view apache log, non-JSON log     jog -g COMMONAPACHELOG example_logs/grok_apache.log\nOptions:\n  -a,  --after \u003ctimestamp\u003e                                    'after' time filter. Auto-detect the timestamp format; can be natural datetime \n  -b,  --before \u003ctimestamp\u003e                                   'before' time filter. Auto-detect the timestamp format; can be natural datetime \n  -c,  --config \u003cconfig file path\u003e                            Specify config YAML file path. The default is .jog.yaml or $HOME/.jog.yaml \n  -cs, --config-set \u003cconfig item path\u003e=\u003cconfig item value\u003e    Set value to specified config item \n  -cg, --config-get \u003cconfig item path\u003e                        Get value to specified config item \n  -d,  --debug                                                Print more error detail\n  -f,  --follow                                               Follow mode - follow log output\n  -g,  --grok \u003cgrok pattern name\u003e                             For non-json log line. The default patterns are saved in []\n  -h,  --help                                                 Display this information\n  -j,  --json                                                 Output the raw JSON but then able to apply filters\n  -l,  --level \u003clevel value\u003e                                  Filter by log level. For ex. --level warn \n  -n,  --lines \u003cnumber of tail lines\u003e                         Number of tail lines. 10 by default, for follow mode\n       --reset-grok-library-dir                               Save default GROK patterns to []\n  -t,  --template                                             Print a config YAML file template\n  -V,  --version                                              Display app version information\n\n`) + \"\\n\"\n\n\t// Act\n\tactualOutput := captureStdout(func() {\n\t\tdefaultGrokLibraryDirs = \"/invalid/grok/library/dirs\"\n\t\tPrintHelp()\n\t})\n\n\t// Assert\n\tassert.Equal(t, expectedOutput, actualOutput)\n}\n\nfunc TestPrintHelpWithNonexistentGrokLibraryDirs(t *testing.T) {\n\t// Arrange\n\tdefaultGrokLibraryDirs := \"/nonexistent/grok/library/dirs\"\n\texpectedOutput := strings.TrimSpace(`\nConvert and view structured (JSON) log\n` + static.AppVersion + `\nUsage:\n  jog  [option...]  \u003cyour JSON log file path\u003e\n    or\n  cat  \u003cyour JSON file path\u003e  |  jog  [option...]\nExamples:\n   1) follow with last 10 lines:         jog -f app-20200701-1.log\n   2) follow with specified lines:       jog -n 100 -f app-20200701-1.log\n   3) with specified config file:        jog -c another.jog.yml app-20200701-1.log\n   4) view docker-compose log:           docker-compose logs | jog\n   5) print the default template:        jog -t\n   6) only shows WARN \u0026 ERROR level:     jog -l warn -l error app-20200701-1.log\n   7) shows with timestamp range:        jog --after 2020-7-1 --before 2020-7-3 app-20200701-1.log\n   8) natural timestamp range:           jog --after \"1 week\" --before \"2 days\" app-20200701-1.log\n   9) output raw JSON and apply time range filter:      jog --after \"1 week\" --before \"2 days\" app-20200701-1.log --json\n   10) disable colorization:             jog -cs colorization=false app-20200701-1.log\n   11) view apache log, non-JSON log     jog -g COMMONAPACHELOG example_logs/grok_apache.log\nOptions:\n  -a,  --after \u003ctimestamp\u003e                                    'after' time filter. Auto-detect the timestamp format; can be natural datetime \n  -b,  --before \u003ctimestamp\u003e                                   'before' time filter. Auto-detect the timestamp format; can be natural datetime \n  -c,  --config \u003cconfig file path\u003e                            Specify config YAML file path. The default is .jog.yaml or $HOME/.jog.yaml \n  -cs, --config-set \u003cconfig item path\u003e=\u003cconfig item value\u003e    Set value to specified config item \n  -cg, --config-get \u003cconfig item path\u003e                        Get value to specified config item \n  -d,  --debug                                                Print more error detail\n  -f,  --follow                                               Follow mode - follow log output\n  -g,  --grok \u003cgrok pattern name\u003e                             For non-json log line. The default patterns are saved in []\n  -h,  --help                                                 Display this information\n  -j,  --json                                                 Output the raw JSON but then able to apply filters\n  -l,  --level \u003clevel value\u003e                                  Filter by log level. For ex. --level warn \n  -n,  --lines \u003cnumber of tail lines\u003e                         Number of tail lines. 10 by default, for follow mode\n       --reset-grok-library-dir                               Save default GROK patterns to []\n  -t,  --template                                             Print a config YAML file template\n  -V,  --version                                              Display app version information\n\n`) + \"\\n\"\n\n\t// Act\n\tactualOutput := captureStdout(func() {\n\t\tdefaultGrokLibraryDirs = \"/nonexistent/grok/library/dirs\"\n\t\tPrintHelp()\n\t})\n\n\t// Assert\n\tassert.Equal(t, expectedOutput, actualOutput)\n}\n\nfunc TestPrintHelpWithEmptyGrokLibraryDirs(t *testing.T) {\n\t// Arrange\n\tdefaultGrokLibraryDirs = \"\"\n\texpectedOutput := strings.TrimSpace(`\nConvert and view structured (JSON) log\n` + static.AppVersion + `\nUsage:\n  jog  [option...]  \u003cyour JSON log file path\u003e\n    or\n  cat  \u003cyour JSON log file path\u003e  |  jog  [option...]\nExamples:\n   1) follow with last 10 lines:         jog -f app-20200701-1.log\n   2) follow with specified lines:       jog -n 100 -f app-20200701-1.log\n   3) with specified config file:        jog -c another.jog.yml app-20200701-1.log\n   4) view docker-compose log:           docker-compose logs | jog\n   5) print the default template:        jog -t\n   6) only shows WARN \u0026 ERROR level:     jog -l warn -l error app-20200701-1.log\n   7) shows with timestamp range:        jog --after 2020-7-1 --before 2020-7-3 app-20200701-1.log\n   8) natural timestamp range:           jog --after \"1 week\" --before \"2 days\" app-20200701-1.log\n   9) output raw JSON and apply time range filter:      jog --after \"1 week\" --before \"2 days\" app-20200701-1.log --json\n   10) disable colorization:             jog -cs colorization=false app-20200701-1.log\n   11) view apache log, non-JSON log     jog -g COMMONAPACHELOG example_logs/grok_apache.log\nOptions:\n  -a,  --after \u003ctimestamp\u003e                                    'after' time filter. Auto-detect the timestamp format; can be natural datetime \n  -b,  --before \u003ctimestamp\u003e                                   'before' time filter. Auto-detect the timestamp format; can be natural datetime \n  -c,  --config \u003cconfig file path\u003e                            Specify config YAML file path. The default is .jog.yaml or $HOME/.jog.yaml \n  -cs, --config-set \u003cconfig item path\u003e=\u003cconfig item value\u003e    Set value to specified config item \n  -cg, --config-get \u003cconfig item path\u003e                        Get value to specified config item \n  -d,  --debug                                                Print more error detail\n  -f,  --follow                                               Follow mode - follow log output\n  -g,  --grok \u003cgrok pattern name\u003e                             For non-json log line. The default patterns are saved in []\n  -h,  --help                                                 Display this information\n  -j,  --json                                                 Output the raw JSON but then able to apply filters\n  -l,  --level \u003clevel value\u003e                                  Filter by log level. For ex. --level warn \n  -n,  --lines \u003cnumber of tail lines\u003e                         Number of tail lines. 10 by default, for follow mode\n       --reset-grok-library-dir                               Save default GROK patterns to []\n  -t,  --template                                             Print a config YAML file template\n  -V,  --version                                              Display app version information\n\n`) + \"\\n\"\n\n\t// Act\n\tactualOutput := captureStdout(func() {\n\t\tdefaultGrokLibraryDirs = \"\"\n\t\tPrintHelp()\n\t})\n\n\t// Assert\n\tassert.Equal(t, expectedOutput, actualOutput)\n}\n\nfunc TestPrintHelpWithInvalidGrokLibraryDirs(t *testing.T) {\n\t// Arrange\n\tdefaultGrokLibraryDirs = \"/invalid/path\"\n\texpectedOutput := strings.TrimSpace(`\nConvert and view structured (JSON) log\n` + static.AppVersion + `\nUsage:\n  jog  [option...]  \u003cyour JSON log file path\u003e\n    or\n  cat  \u003cyour JSON log file path\u003e  |  jog  [option...]\nExamples:\n   1) follow with last 10 lines:         jog -f app-20200701-1.log\n   2) follow with specified lines:       jog -n 100 -f app-20200701-1.log\n   3) with specified config file:        jog -c another.jog.yml app-20200701-1.log\n   4) view docker-compose log:           docker-compose logs | jog\n   5) print the default template:        jog -t\n   6) only shows WARN \u0026 ERROR level:     jog -l warn -l error app-20200701-1.log\n   7) shows with timestamp range:        jog --after 2020-7-1 --before 2020-7-3 app-20200701-1.log\n   8) natural timestamp range:           jog --after \"1 week\" --before \"2 days\" app-20200701-1.log\n   9) output raw JSON and apply time range filter:      jog --after \"1 week\" --before \"2 days\" app-20200701-1.log --json\n   10) disable colorization:             jog -cs colorization=false app-20200701-1.log\n   11) view apache log, non-JSON log     jog -g COMMONAPACHELOG example_logs/grok_apache.log\nOptions:\n  -a,  --after \u003ctimestamp\u003e                                    'after' time filter. Auto-detect the timestamp format; can be natural datetime \n  -b,  --before \u003ctimestamp\u003e                                   'before' time filter. Auto-detect the timestamp format; can be natural datetime \n  -c,  --config \u003cconfig file path\u003e                            Specify config YAML file path. The default is .jog.yaml or $HOME/.jog.yaml \n  -cs, --config-set \u003cconfig item path\u003e=\u003cconfig item value\u003e    Set value to specified config item \n  -cg, --config-get \u003cconfig item path\u003e                        Get value to specified config item \n  -d,  --debug                                                Print more error detail\n  -f,  --follow                                               Follow mode - follow log output\n  -g,  --grok \u003cgrok pattern name\u003e                             For non-json log line. The default patterns are saved in []\n  -h,  --help                                                 Display this information\n  -j,  --json                                                 Output the raw JSON but then able to apply filters\n  -l,  --level \u003clevel value\u003e                                  Filter by log level. For ex. --level warn \n  -n,  --lines \u003cnumber of tail lines\u003e                         Number of tail lines. 10 by default, for follow mode\n       --reset-grok-library-dir                               Save default GROK patterns to []\n  -t,  --template                                             Print a config YAML file template\n  -V,  --version                                              Display app version information\n\n`) + \"\\n\"\n\n\t// Act\n\tactualOutput := captureStdout(func() {\n\t\tdefaultGrokLibraryDirs = \"/invalid/path\"\n\t\tPrintHelp()\n\t})\n\n\t// Assert\n\tassert.Equal(t, expectedOutput, actualOutput)\n}\n\nfunc TestPrintHelpWithValidGrokLibraryDirs(t *testing.T) {\n\t// Arrange\n\tdefaultGrokLibraryDirs = \"/valid/path\"\n\texpectedOutput := strings.TrimSpace(`\nConvert and view structured (JSON) log\n` + static.AppVersion + `\nUsage:\n  jog  [option...]  \u003cyour JSON log file path\u003e\n    or\n  cat  \u003cyour JSON log file path\u003e  |  jog  [option...]\nExamples:\n   1) follow with last 10 lines:         jog -f app-20200701-1.log\n   2) follow with specified lines:       jog -n 100 -f app-20200701-1.log\n   3) with specified config file:        jog -c another.jog.yml app-20200701-1.log\n   4) view docker-compose log:           docker-compose logs | jog\n   5) print the default template:        jog -t\n   6) only shows WARN \u0026 ERROR level:     jog -l warn -l error app-20200701-1.log\n   7) shows with timestamp range:        jog --after 2020-7-1 --before 2020-7-3 app-20200701-1.log\n   8) natural timestamp range:           jog --after \"1 week\" --before \"2 days\" app-20200701-1.log\n   9) output raw JSON and apply time range filter:      jog --after \"1 week\" --before \"2 days\" app-20200701-1.log --json\n   10) disable colorization:             jog -cs colorization=false app-20200701-1.log\n   11) view apache log, non-JSON log     jog -g COMMONAPACHELOG example_logs/grok_apache.log\nOptions:\n  -a,  --after \u003ctimestamp\u003e                                    'after' time filter. Auto-detect the timestamp format; can be natural datetime \n  -b,  --before \u003ctimestamp\u003e                                   'before' time filter. Auto-detect the timestamp format; can be natural datetime \n  -c,  --config \u003cconfig file path\u003e                            Specify config YAML file path. The default is .jog.yaml or $HOME/.jog.yaml \n  -cs, --config-set \u003cconfig item path\u003e=\u003cconfig item value\u003e    Set value to specified config item \n  -cg, --config-get \u003cconfig item path\u003e                        Get value to specified config item \n  -d,  --debug                                                Print more error detail\n  -f,  --follow                                               Follow mode - follow log output\n  -g,  --grok \u003cgrok pattern name\u003e                             For non-json log line. The default patterns are saved in []\n  -h,  --help                                                 Display this information\n  -j,  --json                                                 Output the raw JSON but then able to apply filters\n  -l,  --level \u003clevel value\u003e                                  Filter by log level. For ex. --level warn \n  -n,  --lines \u003cnumber of tail lines\u003e\n",
    "amount_of_generated_test_cases": 10,
    "single_test_run_command": "go test -v ./..."
}