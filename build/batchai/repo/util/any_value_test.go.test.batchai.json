{
    "path": "util/any_value_test.go",
    "model_usage_metrics": {
        "Duration": 13026112662,
        "OpenAiUsage": {
            "completion_tokens": 0,
            "prompt_tokens": 0,
            "total_tokens": 0,
            "completion_tokens_details": {
                "accepted_prediction_tokens": 0,
                "audio_tokens": 0,
                "reasoning_tokens": 0,
                "rejected_prediction_tokens": 0
            },
            "prompt_tokens_details": {
                "audio_tokens": 0,
                "cached_tokens": 0
            }
        }
    },
    "test_file_path": "util/any_value_test.go",
    "existing_test_code": "",
    "original_code": "package util\n\nimport (\n\t\"encoding/json\"\n\t\"errors\"\n\t\"testing\"\n\n\t\"github.com/agiledragon/gomonkey/v2\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc Test_AnyValueFromRaw_nil(t *testing.T) {\n\tassert := require.New(t)\n\n\ttarget := AnyValueFromRaw(1, nil, nil)\n\n\tassert.Nil(target.Raw)\n\tassert.True(target.Text == \"\")\n\tassert.Equal(1, target.LineNo)\n}\n\nfunc Test_Test_AnyValueFromRaw_Map(t *testing.T) {\n\tassert := require.New(t)\n\n\traw := map[string]string{\"k\": \"v\"}\n\ttarget := AnyValueFromRaw(0, raw, nil)\n\n\tassert.Equal(raw, target.Raw)\n\tassert.Equal(\"{\\n  \\\"k\\\": \\\"v\\\"\\n}\", target.Text)\n\tassert.Equal(0, target.LineNo)\n}\n\nfunc Test_Test_AnyValueFromRaw_Array(t *testing.T) {\n\tassert := require.New(t)\n\n\traw := []string{\"k\", \"v\"}\n\ttarget := AnyValueFromRaw(-1, raw, nil)\n\n\tassert.Equal(raw, target.Raw)\n\tassert.Equal(\"[\\n  \\\"k\\\",\\n  \\\"v\\\"\\n]\", target.Text)\n\tassert.Equal(-1, target.LineNo)\n\n\tpatches := gomonkey.ApplyFunc(json.MarshalIndent, func(_ interface{}, _ string, _ string) ([]byte, error) {\n\t\treturn nil, errors.New(\"\")\n\t})\n\tdefer patches.Reset()\n\n\ttarget = AnyValueFromRaw(-1, raw, nil)\n\t//TODO: what to assert?\n}\n\nfunc Test_AnyValueFromRaw_Slice(t *testing.T) {\n\tassert := require.New(t)\n\n\traw := []int{1, 2}[1:]\n\ttarget := AnyValueFromRaw(-1, raw, nil)\n\n\tassert.Equal(raw, target.Raw)\n\tassert.Equal(\"[\\n  2\\n]\", target.Text)\n\tassert.Equal(-1, target.LineNo)\n}\n\nfunc Test_AnyValueFromRaw_jsonText(t *testing.T) {\n\tassert := require.New(t)\n\n\traw := \"[3]\"\n\ttarget := AnyValueFromRaw(-1, raw, nil)\n\n\tassert.Equal(raw, target.Raw)\n\tassert.Equal(\"[\\n  3\\n]\", target.Text)\n\tassert.Equal(-1, target.LineNo)\n}\n\nfunc Test_AnyValueFromRaw_notJsonText(t *testing.T) {\n\tassert := require.New(t)\n\n\traw := \"[3\"\n\ttarget := AnyValueFromRaw(-1, raw, nil)\n\n\tassert.Equal(raw, target.Raw)\n\tassert.Equal(\"[3\", target.Text)\n\tassert.Equal(-1, target.LineNo)\n}\n\nfunc Test_AnyValueFromRaw_invalidKind(t *testing.T) {\n\tassert := require.New(t)\n\n\traw := struct{ X string }{X: \"x\"}\n\ttarget := AnyValueFromRaw(-1, raw, nil)\n\n\tassert.Equal(raw, target.Raw)\n\tassert.Equal(\"\", target.Text)\n\tassert.Equal(-1, target.LineNo)\n}\n\nfunc Test_AnyValueFromRaw_replace(t *testing.T) {\n\tassert := require.New(t)\n\n\traw := \"a\"\n\ttarget := AnyValueFromRaw(0, raw, map[string]string{\"a\": \"a-new\"})\n\n\tassert.Equal(raw, target.Raw)\n\tassert.Equal(\"a-new\", target.String())\n}\n",
    "test_code": "package util\n\nimport (\n\t\"encoding/json\"\n\t\"errors\"\n\t\"testing\"\n\n\t\"github.com/agiledragon/gomonkey/v2\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc Test_AnyValueFromRaw_nil(t *testing.T) {\n\tassert := require.New(t)\n\n\ttarget := AnyValueFromRaw(1, nil, nil)\n\n\tassert.Nil(target.Raw)\n\tassert.True(target.Text == \"\")\n\tassert.Equal(1, target.LineNo)\n}\n\nfunc Test_AnyValueFromRaw_Map(t *testing.T) {\n\tassert := require.New(t)\n\n\traw := map[string]string{\"k\": \"v\"}\n\ttarget := AnyValueFromRaw(0, raw, nil)\n\n\tassert.Equal(raw, target.Raw)\n\tassert.Equal(\"{\\n  \\\"k\\\": \\\"v\\\"\\n}\", target.Text)\n\tassert.Equal(0, target.LineNo)\n}\n\nfunc Test_AnyValueFromRaw_Array(t *testing.T) {\n\tassert := require.New(t)\n\n\traw := []string{\"k\", \"v\"}\n\ttarget := AnyValueFromRaw(-1, raw, nil)\n\n\tassert.Equal(raw, target.Raw)\n\tassert.Equal(\"[\\n  \\\"k\\\",\\n  \\\"v\\\"\\n]\", target.Text)\n\tassert.Equal(-1, target.LineNo)\n\n\tpatches := gomonkey.ApplyFunc(json.MarshalIndent, func(_ interface{}, _ string, _ string) ([]byte, error) {\n\t\treturn nil, errors.New(\"\")\n\t})\n\tdefer patches.Reset()\n\n\ttarget = AnyValueFromRaw(-1, raw, nil)\n\tassert.Error(target.Err)\n}\n\nfunc Test_AnyValueFromRaw_Slice(t *testing.T) {\n\tassert := require.New(t)\n\n\traw := []int{1, 2}[1:]\n\ttarget := AnyValueFromRaw(-1, raw, nil)\n\n\tassert.Equal(raw, target.Raw)\n\tassert.Equal(\"[\\n  2\\n]\", target.Text)\n\tassert.Equal(-1, target.LineNo)\n}\n\nfunc Test_AnyValueFromRaw_jsonText(t *testing.T) {\n\tassert := require.New(t)\n\n\traw := \"[3]\"\n\ttarget := AnyValueFromRaw(-1, raw, nil)\n\n\tassert.Equal(raw, target.Raw)\n\tassert.Equal(\"[\\n  3\\n]\", target.Text)\n\tassert.Equal(-1, target.LineNo)\n}\n\nfunc Test_AnyValueFromRaw_notJsonText(t *testing.T) {\n\tassert := require.New(t)\n\n\traw := \"[3\"\n\ttarget := AnyValueFromRaw(-1, raw, nil)\n\n\tassert.Equal(raw, target.Raw)\n\tassert.Equal(\"[3\", target.Text)\n\tassert.Equal(-1, target.LineNo)\n}\n\nfunc Test_AnyValueFromRaw_invalidKind(t *testing.T) {\n\tassert := require.New(t)\n\n\traw := struct{ X string }{X: \"x\"}\n\ttarget := AnyValueFromRaw(-1, raw, nil)\n\n\tassert.Equal(raw, target.Raw)\n\tassert.Equal(\"\", target.Text)\n\tassert.Equal(-1, target.LineNo)\n}\n\nfunc Test_AnyValueFromRaw_replace(t *testing.T) {\n\tassert := require.New(t)\n\n\traw := \"a\"\n\ttarget := AnyValueFromRaw(0, raw, map[string]string{\"a\": \"a-new\"})\n\n\tassert.Equal(raw, target.Raw)\n\tassert.Equal(\"a-new\", target.String())\n}\n",
    "amount_of_generated_test_cases": 10,
    "single_test_run_command": "go test -v util/any_value_test.go"
}