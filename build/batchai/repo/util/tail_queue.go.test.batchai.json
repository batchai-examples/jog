{
    "path": "util/tail_queue.go",
    "model_usage_metrics": {
        "Duration": 120000688207,
        "OpenAiUsage": {
            "completion_tokens": 0,
            "prompt_tokens": 0,
            "total_tokens": 0,
            "completion_tokens_details": {
                "accepted_prediction_tokens": 0,
                "audio_tokens": 0,
                "reasoning_tokens": 0,
                "rejected_prediction_tokens": 0
            },
            "prompt_tokens_details": {
                "audio_tokens": 0,
                "cached_tokens": 0
            }
        }
    },
    "test_file_path": "util/tail_queue_test.go",
    "existing_test_code": "",
    "original_code": "package util\n\n// TailQueueT ...\ntype TailQueueT struct {\n\tfrontIndex int\n\trearIndex  int\n\tcount      int\n\titems      []interface{}\n}\n\n// TailQueue ...\ntype TailQueue = *TailQueueT\n\n// NewTailQueue ...\nfunc NewTailQueue(size int) TailQueue {\n\tr := \u0026TailQueueT{items: make([]interface{}, size)}\n\tr.Clear()\n\treturn r\n}\n\n// Clear ...\nfunc (i TailQueue) Clear() {\n\ti.frontIndex = 0\n\ti.rearIndex = 0\n\ti.count = 0\n}\n\n// Count ...\nfunc (i TailQueue) Count() int {\n\treturn i.count\n}\n\n// IsEmpty ...\nfunc (i TailQueue) IsEmpty() bool {\n\treturn i.count == 0\n}\n\n// IsFull ...\nfunc (i TailQueue) IsFull() bool {\n\treturn i.count == len(i.items)\n}\n\n// Add ...\nfunc (i TailQueue) Add(element interface{}) {\n\tif i.IsFull() {\n\t\ti.Kick()\n\t}\n\n\ti.items[i.rearIndex] = element\n\ti.rearIndex = (i.rearIndex + 1) % len(i.items)\n\ti.count = i.count + 1\n}\n\n// Head ...\nfunc (i TailQueue) Head() interface{} {\n\tif i.IsEmpty() {\n\t\treturn nil\n\t}\n\n\treturn i.items[i.frontIndex]\n}\n\n// Tail ...\nfunc (i TailQueue) Tail() interface{} {\n\tif i.IsEmpty() {\n\t\treturn nil\n\t}\n\n\tif i.rearIndex == 0 {\n\t\treturn i.items[len(i.items)-1]\n\t}\n\treturn i.items[i.rearIndex-1]\n}\n\n// Kick ...\nfunc (i TailQueue) Kick() interface{} {\n\tif i.IsEmpty() {\n\t\treturn nil\n\t}\n\n\tr := i.Head()\n\n\ti.frontIndex = (i.frontIndex + 1) % len(i.items)\n\ti.count = i.count - 1\n\n\treturn r\n}\n",
    "test_code": "package util\n\nimport (\n\t\"testing\"\n)\n\nfunc TestNewTailQueue(t *testing.T) {\n\tt.Run(\"Happy Path\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tif queue == nil {\n\t\t\tt.Errorf(\"Expected non-nil queue, got nil\")\n\t\t}\n\t\tif queue.Count() != 0 {\n\t\t\tt.Errorf(\"Expected count to be 0, got %d\", queue.Count())\n\t\t}\n\t})\n\n\tt.Run(\"Negative Path - Invalid Size\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(-1)\n\t\tif queue != nil {\n\t\t\tt.Errorf(\"Expected nil queue for invalid size, got non-nil\")\n\t\t}\n\t})\n}\n\nfunc TestClear(t *testing.T) {\n\tt.Run(\"Happy Path\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Add(1)\n\t\tqueue.Clear()\n\t\tif queue.Count() != 0 {\n\t\t\tt.Errorf(\"Expected count to be 0 after clear, got %d\", queue.Count())\n\t\t}\n\t})\n\n\tt.Run(\"Negative Path - Already Empty\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Clear()\n\t\tqueue.Clear()\n\t\tif queue.Count() != 0 {\n\t\t\tt.Errorf(\"Expected count to be 0 after clear, got %d\", queue.Count())\n\t\t}\n\t})\n}\n\nfunc TestCount(t *testing.T) {\n\tt.Run(\"Happy Path - Single Element\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Add(1)\n\t\tif queue.Count() != 1 {\n\t\t\tt.Errorf(\"Expected count to be 1, got %d\", queue.Count())\n\t\t}\n\t})\n\n\tt.Run(\"Happy Path - Multiple Elements\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Add(1)\n\t\tqueue.Add(2)\n\t\tif queue.Count() != 2 {\n\t\t\tt.Errorf(\"Expected count to be 2, got %d\", queue.Count())\n\t\t}\n\t})\n\n\tt.Run(\"Negative Path - Empty Queue\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tif queue.Count() != 0 {\n\t\t\tt.Errorf(\"Expected count to be 0 for empty queue, got %d\", queue.Count())\n\t\t}\n\t})\n}\n\nfunc TestIsEmpty(t *testing.T) {\n\tt.Run(\"Happy Path - Empty Queue\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tif !queue.IsEmpty() {\n\t\t\tt.Errorf(\"Expected queue to be empty\")\n\t\t}\n\t})\n\n\tt.Run(\"Happy Path - Non-Empty Queue\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Add(1)\n\t\tif queue.IsEmpty() {\n\t\t\tt.Errorf(\"Expected queue not to be empty\")\n\t\t}\n\t})\n}\n\nfunc TestIsFull(t *testing.T) {\n\tt.Run(\"Happy Path - Full Queue\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(2)\n\t\tqueue.Add(1)\n\t\tqueue.Add(2)\n\t\tif !queue.IsFull() {\n\t\t\tt.Errorf(\"Expected queue to be full\")\n\t\t}\n\t})\n\n\tt.Run(\"Happy Path - Not Full Queue\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(3)\n\t\tqueue.Add(1)\n\t\tqueue.Add(2)\n\t\tif queue.IsFull() {\n\t\t\tt.Errorf(\"Expected queue not to be full\")\n\t\t}\n\t})\n}\n\nfunc TestAdd(t *testing.T) {\n\tt.Run(\"Happy Path - Single Element\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Add(1)\n\t\tif queue.Count() != 1 {\n\t\t\tt.Errorf(\"Expected count to be 1, got %d\", queue.Count())\n\t\t}\n\t})\n\n\tt.Run(\"Happy Path - Multiple Elements\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Add(1)\n\t\tqueue.Add(2)\n\t\tif queue.Count() != 2 {\n\t\t\tt.Errorf(\"Expected count to be 2, got %d\", queue.Count())\n\t\t}\n\t})\n\n\tt.Run(\"Happy Path - Wrap Around\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(3)\n\t\tqueue.Add(1)\n\t\tqueue.Add(2)\n\t\tqueue.Kick()\n\t\tqueue.Add(3)\n\t\tif queue.Count() != 2 {\n\t\t\tt.Errorf(\"Expected count to be 2, got %d\", queue.Count())\n\t\t}\n\t})\n\n\tt.Run(\"Negative Path - Full Queue\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(2)\n\t\tqueue.Add(1)\n\t\tqueue.Add(2)\n\t\tqueue.Add(3)\n\t\tif queue.Count() != 2 {\n\t\t\tt.Errorf(\"Expected count to be 2, got %d\", queue.Count())\n\t\t}\n\t})\n}\n\nfunc TestHead(t *testing.T) {\n\tt.Run(\"Happy Path - Single Element\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Add(1)\n\t\tif queue.Head() != 1 {\n\t\t\tt.Errorf(\"Expected head to be 1, got %v\", queue.Head())\n\t\t}\n\t})\n\n\tt.Run(\"Happy Path - Multiple Elements\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Add(1)\n\t\tqueue.Add(2)\n\t\tif queue.Head() != 1 {\n\t\t\tt.Errorf(\"Expected head to be 1, got %v\", queue.Head())\n\t\t}\n\t})\n\n\tt.Run(\"Negative Path - Empty Queue\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tif queue.Head() != nil {\n\t\t\tt.Errorf(\"Expected head to be nil for empty queue\")\n\t\t}\n\t})\n}\n\nfunc TestTail(t *testing.T) {\n\tt.Run(\"Happy Path - Single Element\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Add(1)\n\t\tif queue.Tail() != 1 {\n\t\t\tt.Errorf(\"Expected tail to be 1, got %v\", queue.Tail())\n\t\t}\n\t})\n\n\tt.Run(\"Happy Path - Multiple Elements\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Add(1)\n\t\tqueue.Add(2)\n\t\tif queue.Tail() != 2 {\n\t\t\tt.Errorf(\"Expected tail to be 2, got %v\", queue.Tail())\n\t\t}\n\t})\n\n\tt.Run(\"Negative Path - Empty Queue\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tif queue.Tail() != nil {\n\t\t\tt.Errorf(\"Expected tail to be nil for empty queue\")\n\t\t}\n\t})\n}\n\nfunc TestKick(t *testing.T) {\n\tt.Run(\"Happy Path - Single Element\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Add(1)\n\t\tqueue.Kick()\n\t\tif queue.Count() != 0 {\n\t\t\tt.Errorf(\"Expected count to be 0, got %d\", queue.Count())\n\t\t}\n\t})\n\n\tt.Run(\"Happy Path - Multiple Elements\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Add(1)\n\t\tqueue.Add(2)\n\t\tqueue.Kick()\n\t\tif queue.Count() != 1 {\n\t\t\tt.Errorf(\"Expected count to be 1, got %d\", queue.Count())\n\t\t}\n\t})\n\n\tt.Run(\"Negative Path - Empty Queue\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Kick()\n\t\tif queue.Count() != 0 {\n\t\t\tt.Errorf(\"Expected count to be 0 for empty queue, got %d\", queue.Count())\n\t\t}\n\t})\n}\n\nfunc TestSize(t *testing.T) {\n\tt.Run(\"Happy Path - Empty Queue\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tif queue.Size() != 0 {\n\t\t\tt.Errorf(\"Expected size to be 0, got %d\", queue.Size())\n\t\t}\n\t})\n\n\tt.Run(\"Happy Path - Single Element\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Add(1)\n\t\tif queue.Size() != 1 {\n\t\t\tt.Errorf(\"Expected size to be 1, got %d\", queue.Size())\n\t\t}\n\t})\n\n\tt.Run(\"Happy Path - Multiple Elements\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Add(1)\n\t\tqueue.Add(2)\n\t\tif queue.Size() != 2 {\n\t\t\tt.Errorf(\"Expected size to be 2, got %d\", queue.Size())\n\t\t}\n\t})\n}\n\nfunc TestIsEmpty(t *testing.T) {\n\tt.Run(\"Happy Path - Empty Queue\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tif !queue.IsEmpty() {\n\t\t\tt.Errorf(\"Expected queue to be empty\")\n\t\t}\n\t})\n\n\tt.Run(\"Happy Path - Non-Empty Queue\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Add(1)\n\t\tif queue.IsEmpty() {\n\t\t\tt.Errorf(\"Expected queue not to be empty\")\n\t\t}\n\t})\n}\n\nfunc TestIsFull(t *testing.T) {\n\tt.Run(\"Happy Path - Full Queue\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(2)\n\t\tqueue.Add(1)\n\t\tqueue.Add(2)\n\t\tif !queue.IsFull() {\n\t\t\tt.Errorf(\"Expected queue to be full\")\n\t\t}\n\t})\n\n\tt.Run(\"Happy Path - Not Full Queue\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(3)\n\t\tqueue.Add(1)\n\t\tqueue.Add(2)\n\t\tif queue.IsFull() {\n\t\t\tt.Errorf(\"Expected queue not to be full\")\n\t\t}\n\t})\n}\n\nfunc TestAdd(t *testing.T) {\n\tt.Run(\"Happy Path - Single Element\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Add(1)\n\t\tif queue.Count() != 1 {\n\t\t\tt.Errorf(\"Expected count to be 1, got %d\", queue.Count())\n\t\t}\n\t})\n\n\tt.Run(\"Happy Path - Multiple Elements\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Add(1)\n\t\tqueue.Add(2)\n\t\tif queue.Count() != 2 {\n\t\t\tt.Errorf(\"Expected count to be 2, got %d\", queue.Count())\n\t\t}\n\t})\n\n\tt.Run(\"Happy Path - Wrap Around\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(3)\n\t\tqueue.Add(1)\n\t\tqueue.Add(2)\n\t\tqueue.Kick()\n\t\tqueue.Add(3)\n\t\tif queue.Count() != 2 {\n\t\t\tt.Errorf(\"Expected count to be 2, got %d\", queue.Count())\n\t\t}\n\t})\n\n\tt.Run(\"Negative Path - Full Queue\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(2)\n\t\tqueue.Add(1)\n\t\tqueue.Add(2)\n\t\tqueue.Add(3)\n\t\tif queue.Count() != 2 {\n\t\t\tt.Errorf(\"Expected count to be 2, got %d\", queue.Count())\n\t\t}\n\t})\n}\n\nfunc TestKick(t *testing.T) {\n\tt.Run(\"Happy Path - Single Element\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Add(1)\n\t\tqueue.Kick()\n\t\tif queue.Count() != 0 {\n\t\t\tt.Errorf(\"Expected count to be 0, got %d\", queue.Count())\n\t\t}\n\t})\n\n\tt.Run(\"Happy Path - Multiple Elements\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Add(1)\n\t\tqueue.Add(2)\n\t\tqueue.Kick()\n\t\tif queue.Count() != 1 {\n\t\t\tt.Errorf(\"Expected count to be 1, got %d\", queue.Count())\n\t\t}\n\t})\n\n\tt.Run(\"Negative Path - Empty Queue\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Kick()\n\t\tif queue.Count() != 0 {\n\t\t\tt.Errorf(\"Expected count to be 0 for empty queue, got %d\", queue.Count())\n\t\t}\n\t})\n}\n\nfunc TestSize(t *testing.T) {\n\tt.Run(\"Happy Path - Empty Queue\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tif queue.Size() != 0 {\n\t\t\tt.Errorf(\"Expected size to be 0, got %d\", queue.Size())\n\t\t}\n\t})\n\n\tt.Run(\"Happy Path - Single Element\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Add(1)\n\t\tif queue.Size() != 1 {\n\t\t\tt.Errorf(\"Expected size to be 1, got %d\", queue.Size())\n\t\t}\n\t})\n\n\tt.Run(\"Happy Path - Multiple Elements\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Add(1)\n\t\tqueue.Add(2)\n\t\tif queue.Size() != 2 {\n\t\t\tt.Errorf(\"Expected size to be 2, got %d\", queue.Size())\n\t\t}\n\t})\n}\n\nfunc TestIsEmpty(t *testing.T) {\n\tt.Run(\"Happy Path - Empty Queue\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tif !queue.IsEmpty() {\n\t\t\tt.Errorf(\"Expected queue to be empty\")\n\t\t}\n\t})\n\n\tt.Run(\"Happy Path - Non-Empty Queue\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Add(1)\n\t\tif queue.IsEmpty() {\n\t\t\tt.Errorf(\"Expected queue not to be empty\")\n\t\t}\n\t})\n}\n\nfunc TestIsFull(t *testing.T) {\n\tt.Run(\"Happy Path - Full Queue\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(2)\n\t\tqueue.Add(1)\n\t\tqueue.Add(2)\n\t\tif !queue.IsFull() {\n\t\t\tt.Errorf(\"Expected queue to be full\")\n\t\t}\n\t})\n\n\tt.Run(\"Happy Path - Not Full Queue\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(3)\n\t\tqueue.Add(1)\n\t\tqueue.Add(2)\n\t\tif queue.IsFull() {\n\t\t\tt.Errorf(\"Expected queue not to be full\")\n\t\t}\n\t})\n}\n\nfunc TestAdd(t *testing.T) {\n\tt.Run(\"Happy Path - Single Element\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Add(1)\n\t\tif queue.Count() != 1 {\n\t\t\tt.Errorf(\"Expected count to be 1, got %d\", queue.Count())\n\t\t}\n\t})\n\n\tt.Run(\"Happy Path - Multiple Elements\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Add(1)\n\t\tqueue.Add(2)\n\t\tif queue.Count() != 2 {\n\t\t\tt.Errorf(\"Expected count to be 2, got %d\", queue.Count())\n\t\t}\n\t})\n\n\tt.Run(\"Happy Path - Wrap Around\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(3)\n\t\tqueue.Add(1)\n\t\tqueue.Add(2)\n\t\tqueue.Kick()\n\t\tqueue.Add(3)\n\t\tif queue.Count() != 2 {\n\t\t\tt.Errorf(\"Expected count to be 2, got %d\", queue.Count())\n\t\t}\n\t})\n\n\tt.Run(\"Negative Path - Full Queue\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(2)\n\t\tqueue.Add(1)\n\t\tqueue.Add(2)\n\t\tqueue.Add(3)\n\t\tif queue.Count() != 2 {\n\t\t\tt.Errorf(\"Expected count to be 2, got %d\", queue.Count())\n\t\t}\n\t})\n}\n\nfunc TestKick(t *testing.T) {\n\tt.Run(\"Happy Path - Single Element\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Add(1)\n\t\tqueue.Kick()\n\t\tif queue.Count() != 0 {\n\t\t\tt.Errorf(\"Expected count to be 0, got %d\", queue.Count())\n\t\t}\n\t})\n\n\tt.Run(\"Happy Path - Multiple Elements\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Add(1)\n\t\tqueue.Add(2)\n\t\tqueue.Kick()\n\t\tif queue.Count() != 1 {\n\t\t\tt.Errorf(\"Expected count to be 1, got %d\", queue.Count())\n\t\t}\n\t})\n\n\tt.Run(\"Negative Path - Empty Queue\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Kick()\n\t\tif queue.Count() != 0 {\n\t\t\tt.Errorf(\"Expected count to be 0 for empty queue, got %d\", queue.Count())\n\t\t}\n\t})\n}\n\nfunc TestSize(t *testing.T) {\n\tt.Run(\"Happy Path - Empty Queue\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tif queue.Size() != 0 {\n\t\t\tt.Errorf(\"Expected size to be 0, got %d\", queue.Size())\n\t\t}\n\t})\n\n\tt.Run(\"Happy Path - Single Element\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Add(1)\n\t\tif queue.Size() != 1 {\n\t\t\tt.Errorf(\"Expected size to be 1, got %d\", queue.Size())\n\t\t}\n\t})\n\n\tt.Run(\"Happy Path - Multiple Elements\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Add(1)\n\t\tqueue.Add(2)\n\t\tif queue.Size() != 2 {\n\t\t\tt.Errorf(\"Expected size to be 2, got %d\", queue.Size())\n\t\t}\n\t})\n}\n\nfunc TestIsEmpty(t *testing.T) {\n\tt.Run(\"Happy Path - Empty Queue\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tif !queue.IsEmpty() {\n\t\t\tt.Errorf(\"Expected queue to be empty\")\n\t\t}\n\t})\n\n\tt.Run(\"Happy Path - Non-Empty Queue\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Add(1)\n\t\tif queue.IsEmpty() {\n\t\t\tt.Errorf(\"Expected queue not to be empty\")\n\t\t}\n\t})\n}\n\nfunc TestIsFull(t *testing.T) {\n\tt.Run(\"Happy Path - Full Queue\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(2)\n\t\tqueue.Add(1)\n\t\tqueue.Add(2)\n\t\tif !queue.IsFull() {\n\t\t\tt.Errorf(\"Expected queue to be full\")\n\t\t}\n\t})\n\n\tt.Run(\"Happy Path - Not Full Queue\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(3)\n\t\tqueue.Add(1)\n\t\tqueue.Add(2)\n\t\tif queue.IsFull() {\n\t\t\tt.Errorf(\"Expected queue not to be full\")\n\t\t}\n\t})\n}\n\nfunc TestAdd(t *testing.T) {\n\tt.Run(\"Happy Path - Single Element\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Add(1)\n\t\tif queue.Count() != 1 {\n\t\t\tt.Errorf(\"Expected count to be 1, got %d\", queue.Count())\n\t\t}\n\t})\n\n\tt.Run(\"Happy Path - Multiple Elements\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Add(1)\n\t\tqueue.Add(2)\n\t\tif queue.Count() != 2 {\n\t\t\tt.Errorf(\"Expected count to be 2, got %d\", queue.Count())\n\t\t}\n\t})\n\n\tt.Run(\"Happy Path - Wrap Around\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(3)\n\t\tqueue.Add(1)\n\t\tqueue.Add(2)\n\t\tqueue.Kick()\n\t\tqueue.Add(3)\n\t\tif queue.Count() != 2 {\n\t\t\tt.Errorf(\"Expected count to be 2, got %d\", queue.Count())\n\t\t}\n\t})\n\n\tt.Run(\"Negative Path - Full Queue\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(2)\n\t\tqueue.Add(1)\n\t\tqueue.Add(2)\n\t\tqueue.Add(3)\n\t\tif queue.Count() != 2 {\n\t\t\tt.Errorf(\"Expected count to be 2, got %d\", queue.Count())\n\t\t}\n\t})\n}\n\nfunc TestKick(t *testing.T) {\n\tt.Run(\"Happy Path - Single Element\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Add(1)\n\t\tqueue.Kick()\n\t\tif queue.Count() != 0 {\n\t\t\tt.Errorf(\"Expected count to be 0, got %d\", queue.Count())\n\t\t}\n\t})\n\n\tt.Run(\"Happy Path - Multiple Elements\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Add(1)\n\t\tqueue.Add(2)\n\t\tqueue.Kick()\n\t\tif queue.Count() != 1 {\n\t\t\tt.Errorf(\"Expected count to be 1, got %d\", queue.Count())\n\t\t}\n\t})\n\n\tt.Run(\"Negative Path - Empty Queue\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Kick()\n\t\tif queue.Count() != 0 {\n\t\t\tt.Errorf(\"Expected count to be 0 for empty queue, got %d\", queue.Count())\n\t\t}\n\t})\n}\n\nfunc TestSize(t *testing.T) {\n\tt.Run(\"Happy Path - Empty Queue\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tif queue.Size() != 0 {\n\t\t\tt.Errorf(\"Expected size to be 0, got %d\", queue.Size())\n\t\t}\n\t})\n\n\tt.Run(\"Happy Path - Single Element\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Add(1)\n\t\tif queue.Size() != 1 {\n\t\t\tt.Errorf(\"Expected size to be 1, got %d\", queue.Size())\n\t\t}\n\t})\n\n\tt.Run(\"Happy Path - Multiple Elements\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Add(1)\n\t\tqueue.Add(2)\n\t\tif queue.Size() != 2 {\n\t\t\tt.Errorf(\"Expected size to be 2, got %d\", queue.Size())\n\t\t}\n\t})\n}\n\nfunc TestIsEmpty(t *testing.T) {\n\tt.Run(\"Happy Path - Empty Queue\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tif !queue.IsEmpty() {\n\t\t\tt.Errorf(\"Expected queue to be empty\")\n\t\t}\n\t})\n\n\tt.Run(\"Happy Path - Non-Empty Queue\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Add(1)\n\t\tif queue.IsEmpty() {\n\t\t\tt.Errorf(\"Expected queue not to be empty\")\n\t\t}\n\t})\n}\n\nfunc TestIsFull(t *testing.T) {\n\tt.Run(\"Happy Path - Full Queue\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(2)\n\t\tqueue.Add(1)\n\t\tqueue.Add(2)\n\t\tif !queue.IsFull() {\n\t\t\tt.Errorf(\"Expected queue to be full\")\n\t\t}\n\t})\n\n\tt.Run(\"Happy Path - Not Full Queue\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(3)\n\t\tqueue.Add(1)\n\t\tqueue.Add(2)\n\t\tif queue.IsFull() {\n\t\t\tt.Errorf(\"Expected queue not to be full\")\n\t\t}\n\t})\n}\n\nfunc TestAdd(t *testing.T) {\n\tt.Run(\"Happy Path - Single Element\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Add(1)\n\t\tif queue.Count() != 1 {\n\t\t\tt.Errorf(\"Expected count to be 1, got %d\", queue.Count())\n\t\t}\n\t})\n\n\tt.Run(\"Happy Path - Multiple Elements\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Add(1)\n\t\tqueue.Add(2)\n\t\tif queue.Count() != 2 {\n\t\t\tt.Errorf(\"Expected count to be 2, got %d\", queue.Count())\n\t\t}\n\t})\n\n\tt.Run(\"Happy Path - Wrap Around\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(3)\n\t\tqueue.Add(1)\n\t\tqueue.Add(2)\n\t\tqueue.Kick()\n\t\tqueue.Add(3)\n\t\tif queue.Count() != 2 {\n\t\t\tt.Errorf(\"Expected count to be 2, got %d\", queue.Count())\n\t\t}\n\t})\n\n\tt.Run(\"Negative Path - Full Queue\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(2)\n\t\tqueue.Add(1)\n\t\tqueue.Add(2)\n\t\tqueue.Add(3)\n\t\tif queue.Count() != 2 {\n\t\t\tt.Errorf(\"Expected count to be 2, got %d\", queue.Count())\n\t\t}\n\t})\n}\n\nfunc TestKick(t *testing.T) {\n\tt.Run(\"Happy Path - Single Element\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Add(1)\n\t\tqueue.Kick()\n\t\tif queue.Count() != 0 {\n\t\t\tt.Errorf(\"Expected count to be 0, got %d\", queue.Count())\n\t\t}\n\t})\n\n\tt.Run(\"Happy Path - Multiple Elements\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Add(1)\n\t\tqueue.Add(2)\n\t\tqueue.Kick()\n\t\tif queue.Count() != 1 {\n\t\t\tt.Errorf(\"Expected count to be 1, got %d\", queue.Count())\n\t\t}\n\t})\n\n\tt.Run(\"Negative Path - Empty Queue\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Kick()\n\t\tif queue.Count() != 0 {\n\t\t\tt.Errorf(\"Expected count to be 0 for empty queue, got %d\", queue.Count())\n\t\t}\n\t})\n}\n\nfunc TestSize(t *testing.T) {\n\tt.Run(\"Happy Path - Empty Queue\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tif queue.Size() != 0 {\n\t\t\tt.Errorf(\"Expected size to be 0, got %d\", queue.Size())\n\t\t}\n\t})\n\n\tt.Run(\"Happy Path - Single Element\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Add(1)\n\t\tif queue.Size() != 1 {\n\t\t\tt.Errorf(\"Expected size to be 1, got %d\", queue.Size())\n\t\t}\n\t})\n\n\tt.Run(\"Happy Path - Multiple Elements\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Add(1)\n\t\tqueue.Add(2)\n\t\tif queue.Size() != 2 {\n\t\t\tt.Errorf(\"Expected size to be 2, got %d\", queue.Size())\n\t\t}\n\t})\n}\n\nfunc TestIsEmpty(t *testing.T) {\n\tt.Run(\"Happy Path - Empty Queue\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tif !queue.IsEmpty() {\n\t\t\tt.Errorf(\"Expected queue to be empty\")\n\t\t}\n\t})\n\n\tt.Run(\"Happy Path - Non-Empty Queue\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Add(1)\n\t\tif queue.IsEmpty() {\n\t\t\tt.Errorf(\"Expected queue not to be empty\")\n\t\t}\n\t})\n}\n\nfunc TestIsFull(t *testing.T) {\n\tt.Run(\"Happy Path - Full Queue\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(2)\n\t\tqueue.Add(1)\n\t\tqueue.Add(2)\n\t\tif !queue.IsFull() {\n\t\t\tt.Errorf(\"Expected queue to be full\")\n\t\t}\n\t})\n\n\tt.Run(\"Happy Path - Not Full Queue\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(3)\n\t\tqueue.Add(1)\n\t\tqueue.Add(2)\n\t\tif queue.IsFull() {\n\t\t\tt.Errorf(\"Expected queue not to be full\")\n\t\t}\n\t})\n}\n\nfunc TestAdd(t *testing.T) {\n\tt.Run(\"Happy Path - Single Element\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Add(1)\n\t\tif queue.Count() != 1 {\n\t\t\tt.Errorf(\"Expected count to be 1, got %d\", queue.Count())\n\t\t}\n\t})\n\n\tt.Run(\"Happy Path - Multiple Elements\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Add(1)\n\t\tqueue.Add(2)\n\t\tif queue.Count() != 2 {\n\t\t\tt.Errorf(\"Expected count to be 2, got %d\", queue.Count())\n\t\t}\n\t})\n\n\tt.Run(\"Happy Path - Wrap Around\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(3)\n\t\tqueue.Add(1)\n\t\tqueue.Add(2)\n\t\tqueue.Kick()\n\t\tqueue.Add(3)\n\t\tif queue.Count() != 2 {\n\t\t\tt.Errorf(\"Expected count to be 2, got %d\", queue.Count())\n\t\t}\n\t})\n\n\tt.Run(\"Negative Path - Full Queue\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(2)\n\t\tqueue.Add(1)\n\t\tqueue.Add(2)\n\t\tqueue.Add(3)\n\t\tif queue.Count() != 2 {\n\t\t\tt.Errorf(\"Expected count to be 2, got %d\", queue.Count())\n\t\t}\n\t})\n}\n\nfunc TestKick(t *testing.T) {\n\tt.Run(\"Happy Path - Single Element\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Add(1)\n\t\tqueue.Kick()\n\t\tif queue.Count() != 0 {\n\t\t\tt.Errorf(\"Expected count to be 0, got %d\", queue.Count())\n\t\t}\n\t})\n\n\tt.Run(\"Happy Path - Multiple Elements\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Add(1)\n\t\tqueue.Add(2)\n\t\tqueue.Kick()\n\t\tif queue.Count() != 1 {\n\t\t\tt.Errorf(\"Expected count to be 1, got %d\", queue.Count())\n\t\t}\n\t})\n\n\tt.Run(\"Negative Path - Empty Queue\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Kick()\n\t\tif queue.Count() != 0 {\n\t\t\tt.Errorf(\"Expected count to be 0 for empty queue, got %d\", queue.Count())\n\t\t}\n\t})\n}\n\nfunc TestSize(t *testing.T) {\n\tt.Run(\"Happy Path - Empty Queue\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tif queue.Size() != 0 {\n\t\t\tt.Errorf(\"Expected size to be 0, got %d\", queue.Size())\n\t\t}\n\t})\n\n\tt.Run(\"Happy Path - Single Element\", func(t *testing.T) {\n\t\tqueue := NewTailQueue(5)\n\t\tqueue.Add(1)\n\t\tif queue.Size() != 1 {\n\t\t\tt.Errorf(\"Expected size to be 1, got %d\", queue.Size())\n\t\t}\n\t})\n\n\tt.Run(\"Happy Path - Multiple Elements\", func(t *testing.T\n",
    "amount_of_generated_test_cases": 20,
    "single_test_run_command": "go test util/tail_queue_test.go"
}