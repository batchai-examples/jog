{
    "path": "util/multi_string_test.go",
    "model_usage_metrics": {
        "Duration": 14836906145,
        "OpenAiUsage": {
            "completion_tokens": 0,
            "prompt_tokens": 0,
            "total_tokens": 0,
            "completion_tokens_details": {
                "accepted_prediction_tokens": 0,
                "audio_tokens": 0,
                "reasoning_tokens": 0,
                "rejected_prediction_tokens": 0
            },
            "prompt_tokens_details": {
                "audio_tokens": 0,
                "cached_tokens": 0
            }
        }
    },
    "test_file_path": "util/multi_string_test.go",
    "existing_test_code": "",
    "original_code": "package util\n\nimport (\n\t\"errors\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/require\"\n\t\"gopkg.in/yaml.v2\"\n)\n\nfunc Test_MultiString_Set_and_Reset(t *testing.T) {\n\tassert := require.New(t)\n\n\ttarget := \u0026MultiStringT{}\n\n\ttarget.Set(\"A\")\n\tassert.Equal(\"A\", target.Text)\n\tassert.Equal(1, len(target.LowercasedValues))\n\tassert.True(target.LowercasedValues[\"a\"])\n\tassert.Equal(1, len(target.Values))\n\tassert.True(target.Values[\"A\"])\n\n\ttext := \" A, \\nb, \\tC \\r\"\n\ttarget.Set(text)\n\tassert.Equal(text, target.Text)\n\tassert.Equal(3, len(target.LowercasedValues))\n\tassert.True(target.LowercasedValues[\"a\"])\n\tassert.True(target.LowercasedValues[\"b\"])\n\tassert.True(target.LowercasedValues[\"c\"])\n\tassert.Equal(3, len(target.Values))\n\tassert.True(target.Values[\"A\"])\n\tassert.True(target.Values[\"b\"])\n\tassert.True(target.Values[\"C\"])\n\n\ttarget.Reset()\n\tassert.Equal(\"\", target.Text)\n\tassert.Equal(0, len(target.LowercasedValues))\n\tassert.Equal(0, len(target.Values))\n}\n\nfunc Test_MultiString_Containes(t *testing.T) {\n\tassert := require.New(t)\n\n\ttarget := \u0026MultiStringT{}\n\n\ttarget.Set(\"A\")\n\n\tassert.False(target.Contains(\"a\", true))\n\tassert.True(target.Contains(\"A\", true))\n\n\tassert.True(target.Contains(\"a\", false))\n\tassert.True(target.Contains(\"A\", false))\n\n\tassert.False(target.Contains(\"b\", false))\n\tassert.False(target.Contains(\"B\", true))\n}\n\nfunc Test_MultiString_MarshalYAML(t *testing.T) {\n\tassert := require.New(t)\n\n\ttarget := \u0026MultiStringT{}\n\n\ttarget.Set(\"A\")\n\tymlBytes, err := yaml.Marshal(target)\n\tassert.Equal(\"A\\n\", string(ymlBytes))\n\tassert.NoError(err)\n\n\ttarget.Set(\" A, b, C\")\n\tymlBytes, err = yaml.Marshal(target)\n\tassert.Equal(\"' A, b, C'\\n\", string(ymlBytes)) //TODO: is this a bug?\n\tassert.NoError(err)\n}\n\nfunc Test_MultiString_UnmarshalYAML(t *testing.T) {\n\tassert := require.New(t)\n\n\ttarget := \u0026MultiStringT{}\n\n\tyml := \"12, 34\"\n\terr := yaml.Unmarshal([]byte(yml), \u0026target)\n\tassert.NoError(err)\n\tassert.Equal(2, len(target.Values))\n\tassert.True(target.Contains(\"12\", true))\n\tassert.True(target.Contains(\"34\", true))\n\n\terr = target.UnmarshalYAML(func(_ interface{}) error {\n\t\treturn errors.New(\"\")\n\t})\n\tassert.Error(err)\n\n\t// no changes\n\tassert.Equal(2, len(target.Values))\n\tassert.True(target.Contains(\"12\", true))\n\tassert.True(target.Contains(\"34\", true))\n\n}\n",
    "test_code": "package util\n\nimport (\n\t\"errors\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/require\"\n\t\"gopkg.in/yaml.v2\"\n)\n\nfunc Test_MultiString_Set_and_Reset_HappyPath(t *testing.T) {\n\tassert := require.New(t)\n\n\ttarget := \u0026MultiStringT{}\n\n\ttarget.Set(\"A\")\n\tassert.Equal(\"A\", target.Text)\n\tassert.Equal(1, len(target.LowercasedValues))\n\tassert.True(target.LowercasedValues[\"a\"])\n\tassert.Equal(1, len(target.Values))\n\tassert.True(target.Values[\"A\"])\n\n\ttext := \" A, \\nb, \\tC \\r\"\n\ttarget.Set(text)\n\tassert.Equal(text, target.Text)\n\tassert.Equal(3, len(target.LowercasedValues))\n\tassert.True(target.LowercasedValues[\"a\"])\n\tassert.True(target.LowercasedValues[\"b\"])\n\tassert.True(target.LowercasedValues[\"c\"])\n\tassert.Equal(3, len(target.Values))\n\tassert.True(target.Values[\"A\"])\n\tassert.True(target.Values[\"b\"])\n\tassert.True(target.Values[\"C\"])\n\n\ttarget.Reset()\n\tassert.Equal(\"\", target.Text)\n\tassert.Equal(0, len(target.LowercasedValues))\n\tassert.Equal(0, len(target.Values))\n}\n\nfunc Test_MultiString_Set_and_Reset_NegativePath(t *testing.T) {\n\tassert := require.New(t)\n\n\ttarget := \u0026MultiStringT{}\n\n\ttarget.Set(\"\")\n\tassert.Equal(\"\", target.Text)\n\tassert.Equal(0, len(target.LowercasedValues))\n\tassert.Equal(0, len(target.Values))\n\n\ttext := \"  \\t\\n\"\n\ttarget.Set(text)\n\tassert.Equal(\"  \\t\\n\", target.Text)\n\tassert.Equal(0, len(target.LowercasedValues))\n\tassert.Equal(0, len(target.Values))\n}\n\nfunc Test_MultiString_Contains_HappyPath(t *testing.T) {\n\tassert := require.New(t)\n\n\ttarget := \u0026MultiStringT{}\n\n\ttarget.Set(\"A\")\n\n\tassert.False(target.Contains(\"a\", true))\n\tassert.True(target.Contains(\"A\", true))\n\n\tassert.True(target.Contains(\"a\", false))\n\tassert.True(target.Contains(\"A\", false))\n\n\tassert.False(target.Contains(\"b\", false))\n\tassert.False(target.Contains(\"B\", true))\n}\n\nfunc Test_MultiString_Contains_NegativePath(t *testing.T) {\n\tassert := require.New(t)\n\n\ttarget := \u0026MultiStringT{}\n\n\ttarget.Set(\"A\")\n\n\tassert.False(target.Contains(\"\", true))\n\tassert.False(target.Contains(\"\", false))\n\n\tassert.False(target.Contains(\"123\", true))\n\tassert.False(target.Contains(\"123\", false))\n}\n\nfunc Test_MultiString_MarshalYAML_HappyPath(t *testing.T) {\n\tassert := require.New(t)\n\n\ttarget := \u0026MultiStringT{}\n\n\ttarget.Set(\"A\")\n\tymlBytes, err := yaml.Marshal(target)\n\tassert.Equal(\"A\\n\", string(ymlBytes))\n\tassert.NoError(err)\n\n\ttarget.Set(\" A, b, C\")\n\tymlBytes, err = yaml.Marshal(target)\n\tassert.Equal(\"' A, b, C'\\n\", string(ymlBytes)) //TODO: is this a bug?\n\tassert.NoError(err)\n}\n\nfunc Test_MultiString_UnmarshalYAML_HappyPath(t *testing.T) {\n\tassert := require.New(t)\n\n\ttarget := \u0026MultiStringT{}\n\n\tyml := \"12, 34\"\n\terr := yaml.Unmarshal([]byte(yml), \u0026target)\n\tassert.NoError(err)\n\tassert.Equal(2, len(target.Values))\n\tassert.True(target.Contains(\"12\", true))\n\tassert.True(target.Contains(\"34\", true))\n\n\terr = target.UnmarshalYAML(func(_ interface{}) error {\n\t\treturn nil\n\t})\n\tassert.NoError(err)\n\n\tassert.Equal(2, len(target.Values))\n\tassert.True(target.Contains(\"12\", true))\n\tassert.True(target.Contains(\"34\", true))\n}\n",
    "amount_of_generated_test_cases": 6,
    "single_test_run_command": "go test -v util/multi_string_test.go"
}