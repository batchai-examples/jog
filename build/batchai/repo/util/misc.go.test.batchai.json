{
    "path": "util/misc.go",
    "model_usage_metrics": {
        "Duration": 120000442657,
        "OpenAiUsage": {
            "completion_tokens": 0,
            "prompt_tokens": 0,
            "total_tokens": 0,
            "completion_tokens_details": {
                "accepted_prediction_tokens": 0,
                "audio_tokens": 0,
                "reasoning_tokens": 0,
                "rejected_prediction_tokens": 0
            },
            "prompt_tokens_details": {
                "audio_tokens": 0,
                "cached_tokens": 0
            }
        }
    },
    "test_file_path": "util_test.go",
    "existing_test_code": "",
    "original_code": "package util\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"path/filepath\"\n\n\t\"github.com/gookit/goutil/strutil\"\n\t\"github.com/mitchellh/go-homedir\"\n\t\"github.com/pkg/errors\"\n\t\"gopkg.in/yaml.v2\"\n)\n\n// ExeDirectory ...\nfunc ExeDirectory() string {\n\treturn exeDirectory(os.Args[0])\n}\n\n// ExeDirectory_ ...\nfunc exeDirectory(exePath string) string {\n\tr, err := filepath.Abs(filepath.Dir(exePath))\n\tif err != nil {\n\t\tpanic(errors.Wrapf(err, \"failed to get absolute directory path for \"+exePath))\n\t}\n\treturn r\n}\n\n// FileStat ...\nfunc FileStat(path string, ensureExists bool) os.FileInfo {\n\tr, err := os.Stat(path)\n\tif err != nil {\n\t\tif !os.IsNotExist(err) {\n\t\t\tpanic(errors.Wrapf(err, \"failed to stat file: %s\", path))\n\t\t}\n\t\tif ensureExists {\n\t\t\tpanic(errors.Wrapf(err, \"file not exists: %s\", path))\n\t\t}\n\t\treturn nil\n\t}\n\n\treturn r\n}\n\n// FileExists ...\nfunc FileExists(path string) bool {\n\tfi := FileStat(path, false)\n\tif fi == nil {\n\t\treturn false\n\t}\n\tif fi.IsDir() {\n\t\tpanic(fmt.Errorf(\"expect %s be file, but it is directory\", path))\n\t}\n\treturn true\n}\n\n// DirExists ...\nfunc DirExists(path string) bool {\n\tfi := FileStat(path, false)\n\tif fi == nil {\n\t\treturn false\n\t}\n\tif !fi.IsDir() {\n\t\tpanic(fmt.Errorf(\"expect %s be directory, but it is file\", path))\n\t}\n\treturn true\n}\n\n// RemoveFile ...\nfunc RemoveFile(path string) {\n\tif FileExists(path) {\n\t\tif err := os.Remove(path); err != nil {\n\t\t\tpanic(errors.Wrapf(err, \"failed to delete file: %s\", path))\n\t\t}\n\t}\n}\n\n// RemoveDir ...\nfunc RemoveDir(path string) {\n\tif path == \"/\" || path == \"\\\\\" {\n\t\tpanic(fmt.Errorf(\"should NOT remove root directory\"))\n\t}\n\tif err := os.RemoveAll(path); err != nil {\n\t\tpanic(errors.Wrapf(err, \"failed to delete directory: %s\", path))\n\t}\n}\n\n// ReadFile ...\nfunc ReadFile(path string) []byte {\n\tr, err := ioutil.ReadFile(path)\n\tif err != nil {\n\t\tpanic(errors.Wrapf(err, \"failed to read file: %s\", path))\n\t}\n\treturn r\n}\n\n// WriteFileIfNotFound ...\nfunc WriteFileIfNotFound(path string, content []byte) {\n\tif FileExists(path) {\n\t\treturn\n\t}\n\tReplaceFile(path, content)\n}\n\n// ReplaceFile ...\nfunc ReplaceFile(path string, content []byte) {\n\tif err := ioutil.WriteFile(path, content, 0640); err != nil {\n\t\tpanic(errors.Wrapf(err, \"failed to write file: %s\", path))\n\t}\n}\n\n// ExpandHomePath ...\nfunc ExpandHomePath(path string) string {\n\tvar r string\n\tvar err error\n\n\tif r, err = homedir.Expand(path); err != nil {\n\t\tpanic(errors.Wrapf(err, \"failed to expand path: %s\", path))\n\t}\n\treturn r\n}\n\n// UnmashalYAMLAgain ...\nfunc UnmashalYAMLAgain(in interface{}, out interface{}) error {\n\tyml, err := yaml.Marshal(in)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn yaml.Unmarshal(yml, out)\n}\n\n// ToBool ...\nfunc ToBool(v interface{}) bool {\n\tswitch v.(type) {\n\tcase bool:\n\t\treturn v.(bool)\n\tdefault:\n\t\treturn strutil.MustBool(strutil.MustString(v))\n\t}\n}\n\n// ExtractFromMap ...\nfunc ExtractFromMap(m map[string]interface{}, key string) interface{} {\n\tr, has := m[key]\n\tif !has {\n\t\treturn nil\n\t}\n\tdelete(m, key)\n\treturn r\n}\n\n// ExtractStringSliceFromMap ...\nfunc ExtractStringSliceFromMap(m map[string]interface{}, key string) ([]string, error) {\n\tv, has := m[key]\n\tif !has || v == nil {\n\t\treturn []string{}, nil\n\t}\n\n\tr, err := MustStringSlice(v)\n\tif err != nil {\n\t\treturn nil, errors.Wrapf(err, \"failed to parse %s: %v\", key, v)\n\t}\n\n\tdelete(m, key)\n\treturn r, nil\n}\n\n// MkdirAll ...\nfunc MkdirAll(path string) {\n\tif err := os.MkdirAll(path, os.ModePerm); err != nil {\n\t\tpanic(errors.Wrapf(err, \"failed to create directory: %s\", path))\n\t}\n}\n\n// MustStringSlice ...\nfunc MustStringSlice(raw interface{}) ([]string, error) {\n\tswitch raw.(type) {\n\tcase []string:\n\t\treturn raw.([]string), nil\n\tcase []interface{}:\n\t\t{\n\t\t\tr := []string{}\n\t\t\tfor _, v := range raw.([]interface{}) {\n\t\t\t\tr = append(r, v.(string))\n\t\t\t}\n\t\t\treturn r, nil\n\t\t}\n\tdefault:\n\t\treturn nil, fmt.Errorf(\"not a string array: %v\", raw)\n\t}\n}\n",
    "test_code": "package util\n\nimport (\n\t\"os\"\n\t\"path/filepath\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestExeDirectory(t *testing.T) {\n\tt.Run(\"Happy Path\", func(t *testing.T) {\n\t\texePath := os.Args[0]\n\t\texpected := filepath.Dir(exePath)\n\t\tresult := ExeDirectory()\n\t\tassert.Equal(t, expected, result)\n\t})\n\n\tt.Run(\"Negative Path - Non-Existent File\", func(t *testing.T) {\n\t\texePath := \"/non-existent-file\"\n\t\tdefer os.Remove(exePath)\n\t\tos.Create(exePath)\n\t\texpected := filepath.Dir(exePath)\n\t\tresult := ExeDirectory()\n\t\tassert.Equal(t, expected, result)\n\t})\n\n\tt.Run(\"Negative Path - Invalid File Path\", func(t *testing.T) {\n\t\texePath := \"invalid/path\"\n\t\tdefer os.Remove(exePath)\n\t\tos.Create(exePath)\n\t\texpected := filepath.Dir(exePath)\n\t\tresult := ExeDirectory()\n\t\tassert.Equal(t, expected, result)\n\t})\n\n\tt.Run(\"Negative Path - Empty File Path\", func(t *testing.T) {\n\t\texePath := \"\"\n\t\tdefer os.Remove(exePath)\n\t\tos.Create(exePath)\n\t\texpected := filepath.Dir(exePath)\n\t\tresult := ExeDirectory()\n\t\tassert.Equal(t, expected, result)\n\t})\n}\n\nfunc TestFileStat(t *testing.T) {\n\tt.Run(\"Happy Path - File Exists\", func(t *testing.T) {\n\t\tfilePath := \"testfile.txt\"\n\t\tdefer os.Remove(filePath)\n\t\tos.Create(filePath)\n\t\tresult := FileStat(filePath, true)\n\t\tassert.NotNil(t, result)\n\t})\n\n\tt.Run(\"Negative Path - File Does Not Exist\", func(t *testing.T) {\n\t\tfilePath := \"/non-existent-file\"\n\t\tresult := FileStat(filePath, false)\n\t\tassert.Nil(t, result)\n\t})\n\n\tt.Run(\"Negative Path - Invalid File Path\", func(t *testing.T) {\n\t\tfilePath := \"invalid/path\"\n\t\tresult := FileStat(filePath, false)\n\t\tassert.Nil(t, result)\n\t})\n}\n\nfunc TestFileExists(t *testing.T) {\n\tt.Run(\"Happy Path - File Exists\", func(t *testing.T) {\n\t\tfilePath := \"testfile.txt\"\n\t\tdefer os.Remove(filePath)\n\t\tos.Create(filePath)\n\t\tresult := FileExists(filePath)\n\t\tassert.True(t, result)\n\t})\n\n\tt.Run(\"Negative Path - File Does Not Exist\", func(t *testing.T) {\n\t\tfilePath := \"/non-existent-file\"\n\t\tresult := FileExists(filePath)\n\t\tassert.False(t, result)\n\t})\n\n\tt.Run(\"Negative Path - Invalid File Path\", func(t *testing.T) {\n\t\tfilePath := \"invalid/path\"\n\t\tresult := FileExists(filePath)\n\t\tassert.False(t, result)\n\t})\n}\n\nfunc TestDirExists(t *testing.T) {\n\tt.Run(\"Happy Path - Directory Exists\", func(t *testing.T) {\n\t\tdirPath := \"testdir\"\n\t\tdefer os.RemoveAll(dirPath)\n\t\tos.MkdirAll(dirPath, os.ModePerm)\n\t\tresult := DirExists(dirPath)\n\t\tassert.True(t, result)\n\t})\n\n\tt.Run(\"Negative Path - Directory Does Not Exist\", func(t *testing.T) {\n\t\tdirPath := \"/non-existent-dir\"\n\t\tresult := DirExists(dirPath)\n\t\tassert.False(t, result)\n\t})\n\n\tt.Run(\"Negative Path - Invalid Directory Path\", func(t *testing.T) {\n\t\tdirPath := \"invalid/path\"\n\t\tresult := DirExists(dirPath)\n\t\tassert.False(t, result)\n\t})\n}\n\nfunc TestRemoveFile(t *testing.T) {\n\tt.Run(\"Happy Path - File Exists\", func(t *testing.T) {\n\t\tfilePath := \"testfile.txt\"\n\t\tdefer os.Remove(filePath)\n\t\tos.Create(filePath)\n\t\terr := RemoveFile(filePath)\n\t\tassert.NoError(t, err)\n\t})\n\n\tt.Run(\"Negative Path - File Does Not Exist\", func(t *testing.T) {\n\t\tfilePath := \"/non-existent-file\"\n\t\terr := RemoveFile(filePath)\n\t\tassert.Error(t, err)\n\t})\n\n\tt.Run(\"Negative Path - Invalid File Path\", func(t *testing.T) {\n\t\tfilePath := \"invalid/path\"\n\t\terr := RemoveFile(filePath)\n\t\tassert.Error(t, err)\n\t})\n}\n\nfunc TestRemoveDir(t *testing.T) {\n\tt.Run(\"Happy Path - Directory Exists\", func(t *testing.T) {\n\t\tdirPath := \"testdir\"\n\t\tdefer os.RemoveAll(dirPath)\n\t\tos.MkdirAll(dirPath, os.ModePerm)\n\t\terr := RemoveDir(dirPath)\n\t\tassert.NoError(t, err)\n\t})\n\n\tt.Run(\"Negative Path - Directory Does Not Exist\", func(t *testing.T) {\n\t\tdirPath := \"/non-existent-dir\"\n\t\terr := RemoveDir(dirPath)\n\t\tassert.Error(t, err)\n\t})\n\n\tt.Run(\"Negative Path - Invalid Directory Path\", func(t *testing.T) {\n\t\tdirPath := \"invalid/path\"\n\t\terr := RemoveDir(dirPath)\n\t\tassert.Error(t, err)\n\t})\n}\n\nfunc TestMkdirAll(t *testing.T) {\n\tt.Run(\"Happy Path - Directory Does Not Exist\", func(t *testing.T) {\n\t\tdirPath := \"testdir\"\n\t\tdefer os.RemoveAll(dirPath)\n\t\terr := MkdirAll(dirPath)\n\t\tassert.NoError(t, err)\n\t})\n\n\tt.Run(\"Negative Path - Directory Already Exists\", func(t *testing.T) {\n\t\tdirPath := \"testdir\"\n\t\tdefer os.RemoveAll(dirPath)\n\t\tos.MkdirAll(dirPath, os.ModePerm)\n\t\terr := MkdirAll(dirPath)\n\t\tassert.NoError(t, err)\n\t})\n\n\tt.Run(\"Negative Path - Invalid Directory Path\", func(t *testing.T) {\n\t\tdirPath := \"invalid/path\"\n\t\terr := MkdirAll(dirPath)\n\t\tassert.Error(t, err)\n\t})\n}\n\nfunc TestMustStringSlice(t *testing.T) {\n\tt.Run(\"Happy Path - String Slice\", func(t *testing.T) {\n\t\traw := []string{\"a\", \"b\", \"c\"}\n\t\tresult, err := MustStringSlice(raw)\n\t\tassert.NoError(t, err)\n\t\tassert.Equal(t, raw, result)\n\t})\n\n\tt.Run(\"Negative Path - Non-String Slice\", func(t *testing.T) {\n\t\traw := []interface{}{1, 2, 3}\n\t\t_, err := MustStringSlice(raw)\n\t\tassert.Error(t, err)\n\t})\n}\n\nfunc TestExtractStringSliceFromMap(t *testing.T) {\n\tt.Run(\"Happy Path - String Slice\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": []string{\"a\", \"b\", \"c\"},\n\t\t}\n\t\tresult, err := ExtractStringSliceFromMap(m, \"key\")\n\t\tassert.NoError(t, err)\n\t\tassert.Equal(t, []string{\"a\", \"b\", \"c\"}, result)\n\t})\n\n\tt.Run(\"Negative Path - Non-String Slice\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": []interface{}{1, 2, 3},\n\t\t}\n\t\t_, err := ExtractStringSliceFromMap(m, \"key\")\n\t\tassert.Error(t, err)\n\t})\n\n\tt.Run(\"Negative Path - Key Does Not Exist\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": []string{\"a\", \"b\", \"c\"},\n\t\t}\n\t\tresult, err := ExtractStringSliceFromMap(m, \"non-existent-key\")\n\t\tassert.NoError(t, err)\n\t\tassert.Equal(t, []string{}, result)\n\t})\n}\n\nfunc TestExtractStringFromMap(t *testing.T) {\n\tt.Run(\"Happy Path - String Value\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": \"value\",\n\t\t}\n\t\tresult := ExtractStringFromMap(m, \"key\")\n\t\tassert.Equal(t, \"value\", result)\n\t})\n\n\tt.Run(\"Negative Path - Key Does Not Exist\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": \"value\",\n\t\t}\n\t\tresult := ExtractStringFromMap(m, \"non-existent-key\")\n\t\tassert.Equal(t, \"\", result)\n\t})\n}\n\nfunc TestExtractIntFromMap(t *testing.T) {\n\tt.Run(\"Happy Path - Int Value\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": 123,\n\t\t}\n\t\tresult := ExtractIntFromMap(m, \"key\")\n\t\tassert.Equal(t, 123, result)\n\t})\n\n\tt.Run(\"Negative Path - Key Does Not Exist\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": 123,\n\t\t}\n\t\tresult := ExtractIntFromMap(m, \"non-existent-key\")\n\t\tassert.Equal(t, 0, result)\n\t})\n}\n\nfunc TestExtractBoolFromMap(t *testing.T) {\n\tt.Run(\"Happy Path - Bool Value\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": true,\n\t\t}\n\t\tresult := ExtractBoolFromMap(m, \"key\")\n\t\tassert.Equal(t, true, result)\n\t})\n\n\tt.Run(\"Negative Path - Key Does Not Exist\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": true,\n\t\t}\n\t\tresult := ExtractBoolFromMap(m, \"non-existent-key\")\n\t\tassert.Equal(t, false, result)\n\t})\n}\n\nfunc TestExtractFloat64FromMap(t *testing.T) {\n\tt.Run(\"Happy Path - Float64 Value\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": 123.45,\n\t\t}\n\t\tresult := ExtractFloat64FromMap(m, \"key\")\n\t\tassert.Equal(t, 123.45, result)\n\t})\n\n\tt.Run(\"Negative Path - Key Does Not Exist\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": 123.45,\n\t\t}\n\t\tresult := ExtractFloat64FromMap(m, \"non-existent-key\")\n\t\tassert.Equal(t, 0.0, result)\n\t})\n}\n\nfunc TestExtractTimeFromMap(t *testing.T) {\n\tt.Run(\"Happy Path - Time Value\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": time.Now(),\n\t\t}\n\t\tresult := ExtractTimeFromMap(m, \"key\")\n\t\tassert.Equal(t, time.Now(), result)\n\t})\n\n\tt.Run(\"Negative Path - Key Does Not Exist\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": time.Now(),\n\t\t}\n\t\tresult := ExtractTimeFromMap(m, \"non-existent-key\")\n\t\tassert.Equal(t, time.Time{}, result)\n\t})\n}\n\nfunc TestExtractDurationFromMap(t *testing.T) {\n\tt.Run(\"Happy Path - Duration Value\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": 10 * time.Second,\n\t\t}\n\t\tresult := ExtractDurationFromMap(m, \"key\")\n\t\tassert.Equal(t, 10*time.Second, result)\n\t})\n\n\tt.Run(\"Negative Path - Key Does Not Exist\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": 10 * time.Second,\n\t\t}\n\t\tresult := ExtractDurationFromMap(m, \"non-existent-key\")\n\t\tassert.Equal(t, 0*time.Second, result)\n\t})\n}\n\nfunc TestExtractInterfaceFromMap(t *testing.T) {\n\tt.Run(\"Happy Path - Interface Value\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": \"value\",\n\t\t}\n\t\tresult := ExtractInterfaceFromMap(m, \"key\")\n\t\tassert.Equal(t, \"value\", result)\n\t})\n\n\tt.Run(\"Negative Path - Key Does Not Exist\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": \"value\",\n\t\t}\n\t\tresult := ExtractInterfaceFromMap(m, \"non-existent-key\")\n\t\tassert.Nil(t, result)\n\t})\n}\n\nfunc TestExtractSliceFromMap(t *testing.T) {\n\tt.Run(\"Happy Path - Slice Value\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": []string{\"a\", \"b\", \"c\"},\n\t\t}\n\t\tresult := ExtractSliceFromMap(m, \"key\")\n\t\tassert.Equal(t, []string{\"a\", \"b\", \"c\"}, result)\n\t})\n\n\tt.Run(\"Negative Path - Key Does Not Exist\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": []string{\"a\", \"b\", \"c\"},\n\t\t}\n\t\tresult := ExtractSliceFromMap(m, \"non-existent-key\")\n\t\tassert.Nil(t, result)\n\t})\n}\n\nfunc TestExtractMapFromMap(t *testing.T) {\n\tt.Run(\"Happy Path - Map Value\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": map[string]string{\"a\": \"b\", \"c\": \"d\"},\n\t\t}\n\t\tresult := ExtractMapFromMap(m, \"key\")\n\t\tassert.Equal(t, map[string]string{\"a\": \"b\", \"c\": \"d\"}, result)\n\t})\n\n\tt.Run(\"Negative Path - Key Does Not Exist\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": map[string]string{\"a\": \"b\", \"c\": \"d\"},\n\t\t}\n\t\tresult := ExtractMapFromMap(m, \"non-existent-key\")\n\t\tassert.Nil(t, result)\n\t})\n}\n\nfunc TestExtractStringSliceFromMap(t *testing.T) {\n\tt.Run(\"Happy Path - String Slice Value\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": []string{\"a\", \"b\", \"c\"},\n\t\t}\n\t\tresult := ExtractStringSliceFromMap(m, \"key\")\n\t\tassert.Equal(t, []string{\"a\", \"b\", \"c\"}, result)\n\t})\n\n\tt.Run(\"Negative Path - Key Does Not Exist\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": []string{\"a\", \"b\", \"c\"},\n\t\t}\n\t\tresult := ExtractStringSliceFromMap(m, \"non-existent-key\")\n\t\tassert.Nil(t, result)\n\t})\n}\n\nfunc TestExtractIntSliceFromMap(t *testing.T) {\n\tt.Run(\"Happy Path - Int Slice Value\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": []int{1, 2, 3},\n\t\t}\n\t\tresult := ExtractIntSliceFromMap(m, \"key\")\n\t\tassert.Equal(t, []int{1, 2, 3}, result)\n\t})\n\n\tt.Run(\"Negative Path - Key Does Not Exist\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": []int{1, 2, 3},\n\t\t}\n\t\tresult := ExtractIntSliceFromMap(m, \"non-existent-key\")\n\t\tassert.Nil(t, result)\n\t})\n}\n\nfunc TestExtractBoolSliceFromMap(t *testing.T) {\n\tt.Run(\"Happy Path - Bool Slice Value\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": []bool{true, false, true},\n\t\t}\n\t\tresult := ExtractBoolSliceFromMap(m, \"key\")\n\t\tassert.Equal(t, []bool{true, false, true}, result)\n\t})\n\n\tt.Run(\"Negative Path - Key Does Not Exist\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": []bool{true, false, true},\n\t\t}\n\t\tresult := ExtractBoolSliceFromMap(m, \"non-existent-key\")\n\t\tassert.Nil(t, result)\n\t})\n}\n\nfunc TestExtractFloat64SliceFromMap(t *testing.T) {\n\tt.Run(\"Happy Path - Float64 Slice Value\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": []float64{1.0, 2.0, 3.0},\n\t\t}\n\t\tresult := ExtractFloat64SliceFromMap(m, \"key\")\n\t\tassert.Equal(t, []float64{1.0, 2.0, 3.0}, result)\n\t})\n\n\tt.Run(\"Negative Path - Key Does Not Exist\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": []float64{1.0, 2.0, 3.0},\n\t\t}\n\t\tresult := ExtractFloat64SliceFromMap(m, \"non-existent-key\")\n\t\tassert.Nil(t, result)\n\t})\n}\n\nfunc TestExtractDurationSliceFromMap(t *testing.T) {\n\tt.Run(\"Happy Path - Duration Slice Value\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": []time.Duration{10 * time.Second, 20 * time.Second},\n\t\t}\n\t\tresult := ExtractDurationSliceFromMap(m, \"key\")\n\t\tassert.Equal(t, []time.Duration{10*time.Second, 20*time.Second}, result)\n\t})\n\n\tt.Run(\"Negative Path - Key Does Not Exist\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": []time.Duration{10 * time.Second, 20 * time.Second},\n\t\t}\n\t\tresult := ExtractDurationSliceFromMap(m, \"non-existent-key\")\n\t\tassert.Nil(t, result)\n\t})\n}\n\nfunc TestExtractTimeSliceFromMap(t *testing.T) {\n\tt.Run(\"Happy Path - Time Slice Value\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": []time.Time{time.Now(), time.Now().Add(1 * time.Hour)},\n\t\t}\n\t\tresult := ExtractTimeSliceFromMap(m, \"key\")\n\t\tassert.Equal(t, []time.Time{time.Now(), time.Now().Add(1 * time.Hour)}, result)\n\t})\n\n\tt.Run(\"Negative Path - Key Does Not Exist\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": []time.Time{time.Now(), time.Now().Add(1 * time.Hour)},\n\t\t}\n\t\tresult := ExtractTimeSliceFromMap(m, \"non-existent-key\")\n\t\tassert.Nil(t, result)\n\t})\n}\n\nfunc TestExtractStringMapFromMap(t *testing.T) {\n\tt.Run(\"Happy Path - String Map Value\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": map[string]string{\"a\": \"b\", \"c\": \"d\"},\n\t\t}\n\t\tresult := ExtractStringMapFromMap(m, \"key\")\n\t\tassert.Equal(t, map[string]string{\"a\": \"b\", \"c\": \"d\"}, result)\n\t})\n\n\tt.Run(\"Negative Path - Key Does Not Exist\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": map[string]string{\"a\": \"b\", \"c\": \"d\"},\n\t\t}\n\t\tresult := ExtractStringMapFromMap(m, \"non-existent-key\")\n\t\tassert.Nil(t, result)\n\t})\n}\n\nfunc TestExtractIntMapFromMap(t *testing.T) {\n\tt.Run(\"Happy Path - Int Map Value\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": map[string]int{\"a\": 1, \"b\": 2},\n\t\t}\n\t\tresult := ExtractIntMapFromMap(m, \"key\")\n\t\tassert.Equal(t, map[string]int{\"a\": 1, \"b\": 2}, result)\n\t})\n\n\tt.Run(\"Negative Path - Key Does Not Exist\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": map[string]int{\"a\": 1, \"b\": 2},\n\t\t}\n\t\tresult := ExtractIntMapFromMap(m, \"non-existent-key\")\n\t\tassert.Nil(t, result)\n\t})\n}\n\nfunc TestExtractBoolMapFromMap(t *testing.T) {\n\tt.Run(\"Happy Path - Bool Map Value\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": map[string]bool{\"a\": true, \"b\": false},\n\t\t}\n\t\tresult := ExtractBoolMapFromMap(m, \"key\")\n\t\tassert.Equal(t, map[string]bool{\"a\": true, \"b\": false}, result)\n\t})\n\n\tt.Run(\"Negative Path - Key Does Not Exist\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": map[string]bool{\"a\": true, \"b\": false},\n\t\t}\n\t\tresult := ExtractBoolMapFromMap(m, \"non-existent-key\")\n\t\tassert.Nil(t, result)\n\t})\n}\n\nfunc TestExtractFloat64MapFromMap(t *testing.T) {\n\tt.Run(\"Happy Path - Float64 Map Value\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": map[string]float64{\"a\": 1.0, \"b\": 2.0},\n\t\t}\n\t\tresult := ExtractFloat64MapFromMap(m, \"key\")\n\t\tassert.Equal(t, map[string]float64{\"a\": 1.0, \"b\": 2.0}, result)\n\t})\n\n\tt.Run(\"Negative Path - Key Does Not Exist\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": map[string]float64{\"a\": 1.0, \"b\": 2.0},\n\t\t}\n\t\tresult := ExtractFloat64MapFromMap(m, \"non-existent-key\")\n\t\tassert.Nil(t, result)\n\t})\n}\n\nfunc TestExtractDurationMapFromMap(t *testing.T) {\n\tt.Run(\"Happy Path - Duration Map Value\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": map[string]time.Duration{\"a\": 10 * time.Second, \"b\": 20 * time.Second},\n\t\t}\n\t\tresult := ExtractDurationMapFromMap(m, \"key\")\n\t\tassert.Equal(t, map[string]time.Duration{\"a\": 10*time.Second, \"b\": 20*time.Second}, result)\n\t})\n\n\tt.Run(\"Negative Path - Key Does Not Exist\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": map[string]time.Duration{\"a\": 10 * time.Second, \"b\": 20 * time.Second},\n\t\t}\n\t\tresult := ExtractDurationMapFromMap(m, \"non-existent-key\")\n\t\tassert.Nil(t, result)\n\t})\n}\n\nfunc TestExtractTimeMapFromMap(t *testing.T) {\n\tt.Run(\"Happy Path - Time Map Value\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": map[string]time.Time{\"a\": time.Now(), \"b\": time.Now().Add(1 * time.Hour)},\n\t\t}\n\t\tresult := ExtractTimeMapFromMap(m, \"key\")\n\t\tassert.Equal(t, map[string]time.Time{\"a\": time.Now(), \"b\": time.Now().Add(1 * time.Hour)}, result)\n\t})\n\n\tt.Run(\"Negative Path - Key Does Not Exist\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": map[string]time.Time{\"a\": time.Now(), \"b\": time.Now().Add(1 * time.Hour)},\n\t\t}\n\t\tresult := ExtractTimeMapFromMap(m, \"non-existent-key\")\n\t\tassert.Nil(t, result)\n\t})\n}\n\nfunc TestExtractStringArrayFromMap(t *testing.T) {\n\tt.Run(\"Happy Path - String Array Value\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": []string{\"a\", \"b\", \"c\"},\n\t\t}\n\t\tresult := ExtractStringArrayFromMap(m, \"key\")\n\t\tassert.Equal(t, []string{\"a\", \"b\", \"c\"}, result)\n\t})\n\n\tt.Run(\"Negative Path - Key Does Not Exist\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": []string{\"a\", \"b\", \"c\"},\n\t\t}\n\t\tresult := ExtractStringArrayFromMap(m, \"non-existent-key\")\n\t\tassert.Nil(t, result)\n\t})\n}\n\nfunc TestExtractIntArrayFromMap(t *testing.T) {\n\tt.Run(\"Happy Path - Int Array Value\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": []int{1, 2, 3},\n\t\t}\n\t\tresult := ExtractIntArrayFromMap(m, \"key\")\n\t\tassert.Equal(t, []int{1, 2, 3}, result)\n\t})\n\n\tt.Run(\"Negative Path - Key Does Not Exist\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": []int{1, 2, 3},\n\t\t}\n\t\tresult := ExtractIntArrayFromMap(m, \"non-existent-key\")\n\t\tassert.Nil(t, result)\n\t})\n}\n\nfunc TestExtractBoolArrayFromMap(t *testing.T) {\n\tt.Run(\"Happy Path - Bool Array Value\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": []bool{true, false, true},\n\t\t}\n\t\tresult := ExtractBoolArrayFromMap(m, \"key\")\n\t\tassert.Equal(t, []bool{true, false, true}, result)\n\t})\n\n\tt.Run(\"Negative Path - Key Does Not Exist\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": []bool{true, false, true},\n\t\t}\n\t\tresult := ExtractBoolArrayFromMap(m, \"non-existent-key\")\n\t\tassert.Nil(t, result)\n\t})\n}\n\nfunc TestExtractFloat64ArrayFromMap(t *testing.T) {\n\tt.Run(\"Happy Path - Float64 Array Value\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": []float64{1.0, 2.0, 3.0},\n\t\t}\n\t\tresult := ExtractFloat64ArrayFromMap(m, \"key\")\n\t\tassert.Equal(t, []float64{1.0, 2.0, 3.0}, result)\n\t})\n\n\tt.Run(\"Negative Path - Key Does Not Exist\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": []float64{1.0, 2.0, 3.0},\n\t\t}\n\t\tresult := ExtractFloat64ArrayFromMap(m, \"non-existent-key\")\n\t\tassert.Nil(t, result)\n\t})\n}\n\nfunc TestExtractDurationArrayFromMap(t *testing.T) {\n\tt.Run(\"Happy Path - Duration Array Value\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": []time.Duration{10 * time.Second, 20 * time.Second},\n\t\t}\n\t\tresult := ExtractDurationArrayFromMap(m, \"key\")\n\t\tassert.Equal(t, []time.Duration{10*time.Second, 20*time.Second}, result)\n\t})\n\n\tt.Run(\"Negative Path - Key Does Not Exist\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": []time.Duration{10 * time.Second, 20 * time.Second},\n\t\t}\n\t\tresult := ExtractDurationArrayFromMap(m, \"non-existent-key\")\n\t\tassert.Nil(t, result)\n\t})\n}\n\nfunc TestExtractTimeArrayFromMap(t *testing.T) {\n\tt.Run(\"Happy Path - Time Array Value\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": []time.Time{time.Now(), time.Now().Add(1 * time.Hour)},\n\t\t}\n\t\tresult := ExtractTimeArrayFromMap(m, \"key\")\n\t\tassert.Equal(t, []time.Time{time.Now(), time.Now().Add(1 * time.Hour)}, result)\n\t})\n\n\tt.Run(\"Negative Path - Key Does Not Exist\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": []time.Time{time.Now(), time.Now().Add(1 * time.Hour)},\n\t\t}\n\t\tresult := ExtractTimeArrayFromMap(m, \"non-existent-key\")\n\t\tassert.Nil(t, result)\n\t})\n}\n\nfunc TestExtractStringMapFromMap(t *testing.T) {\n\tt.Run(\"Happy Path - String Map Value\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": map[string]string{\"a\": \"1\", \"b\": \"2\"},\n\t\t}\n\t\tresult := ExtractStringMapFromMap(m, \"key\")\n\t\tassert.Equal(t, map[string]string{\"a\": \"1\", \"b\": \"2\"}, result)\n\t})\n\n\tt.Run(\"Negative Path - Key Does Not Exist\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": map[string]string{\"a\": \"1\", \"b\": \"2\"},\n\t\t}\n\t\tresult := ExtractStringMapFromMap(m, \"non-existent-key\")\n\t\tassert.Nil(t, result)\n\t})\n}\n\nfunc TestExtractIntMapFromMap(t *testing.T) {\n\tt.Run(\"Happy Path - Int Map Value\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": map[string]int{\"a\": 1, \"b\": 2},\n\t\t}\n\t\tresult := ExtractIntMapFromMap(m, \"key\")\n\t\tassert.Equal(t, map[string]int{\"a\": 1, \"b\": 2}, result)\n\t})\n\n\tt.Run(\"Negative Path - Key Does Not Exist\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": map[string]int{\"a\": 1, \"b\": 2},\n\t\t}\n\t\tresult := ExtractIntMapFromMap(m, \"non-existent-key\")\n\t\tassert.Nil(t, result)\n\t})\n}\n\nfunc TestExtractBoolMapFromMap(t *testing.T) {\n\tt.Run(\"Happy Path - Bool Map Value\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": map[string]bool{\"a\": true, \"b\": false},\n\t\t}\n\t\tresult := ExtractBoolMapFromMap(m, \"key\")\n\t\tassert.Equal(t, map[string]bool{\"a\": true, \"b\": false}, result)\n\t})\n\n\tt.Run(\"Negative Path - Key Does Not Exist\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": map[string]bool{\"a\": true, \"b\": false},\n\t\t}\n\t\tresult := ExtractBoolMapFromMap(m, \"non-existent-key\")\n\t\tassert.Nil(t, result)\n\t})\n}\n\nfunc TestExtractFloat64MapFromMap(t *testing.T) {\n\tt.Run(\"Happy Path - Float64 Map Value\", func(t *testing.T) {\n\t\tm := map[string]interface{}{\n\t\t\t\"key\": map[string]float64{\"a\": 1.0, \"b\": 2.0},\n",
    "amount_of_generated_test_cases": 17,
    "single_test_run_command": "go test -v ./util"
}