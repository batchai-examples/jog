{
    "path": "util/loglog.go",
    "model_usage_metrics": {
        "Duration": 43452014446,
        "OpenAiUsage": {
            "completion_tokens": 0,
            "prompt_tokens": 0,
            "total_tokens": 0,
            "completion_tokens_details": {
                "accepted_prediction_tokens": 0,
                "audio_tokens": 0,
                "reasoning_tokens": 0,
                "rejected_prediction_tokens": 0
            },
            "prompt_tokens_details": {
                "audio_tokens": 0,
                "cached_tokens": 0
            }
        }
    },
    "test_file_path": "util/loglog_test.go",
    "existing_test_code": "",
    "original_code": "package util\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"time\"\n\n\t\"github.com/pkg/errors\"\n)\n\n// LogFileT implements io.Writer\ntype LogFileT struct {\n\tpath string\n\tfile *os.File\n}\n\n// LogFile ...\ntype LogFile = *LogFileT\n\n// Write ...\nfunc (i LogFile) Write(p []byte) (int, error) {\n\treturn i.file.Write(p)\n}\n\n// Open ...\nfunc (i LogFile) Open() {\n\tp := i.path\n\n\tcreate := true\n\tif fi := FileStat(p, false); fi != nil {\n\t\tif fi.Size() \u003e= 100*1024*1024 {\n\t\t\tRemoveFile(p)\n\t\t} else {\n\t\t\tcreate = false\n\t\t}\n\t}\n\n\tflg := os.O_RDWR | os.O_EXCL // | os.O_SYNC\n\tif create {\n\t\tflg = flg | os.O_CREATE\n\t} else {\n\t\tflg = flg | os.O_APPEND\n\t}\n\n\tf, err := os.OpenFile(p, flg, 0666)\n\tif err != nil {\n\t\tpanic(errors.Wrapf(err, \"failed to create/open log file: %s\", p))\n\t}\n\n\ti.file = f\n\n\tlog.SetOutput(i)\n\tlog.SetPrefix(fmt.Sprintf(\"[%5d] \", os.Getpid()))\n\n\tif !create {\n\t\ti.file.Write([]byte(\"-------------------------------------------------------------------------------\\n\"))\n\t}\n\tlog.Printf(\"started at: %v\\n\", time.Now())\n}\n\n// Close ...\nfunc (i LogFile) Close() {\n\tif i.file != nil {\n\t\ti.file.Close()\n\t}\n}\n\n// InitLogger ...\nfunc InitLogger(jogHomeDir string) LogFile {\n\tr := \u0026LogFileT{\n\t\tpath: filepath.Join(jogHomeDir, \"jog.log\"),\n\t}\n\tr.Open()\n\treturn r\n}\n",
    "test_code": "package util\n\nimport (\n\t\"errors\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestLogFileT_Write(t *testing.T) {\n\tt.Run(\"Happy Path\", func(t *testing.T) {\n\t\ttmpDir := t.TempDir()\n\t\tlogFile := LogFileT{path: filepath.Join(tmpDir, \"test.log\")}\n\t\tlogFile.Open()\n\n\t\tdata := []byte(\"Test data\")\n\t\tn, err := logFile.Write(data)\n\t\tassert.NoError(t, err)\n\t\tassert.Equal(t, len(data), n)\n\n\t\tlogFile.Close()\n\t})\n\n\tt.Run(\"Negative Path - File Not Found\", func(t *testing.T) {\n\t\ttmpDir := t.TempDir()\n\t\tlogFile := LogFileT{path: filepath.Join(tmpDir, \"nonexistent.log\")}\n\t\terr := logFile.Write([]byte(\"Test data\"))\n\t\tassert.Error(t, err)\n\t})\n\n\tt.Run(\"Corner Case - Large File\", func(t *testing.T) {\n\t\ttmpDir := t.TempDir()\n\t\tlogFile := LogFileT{path: filepath.Join(tmpDir, \"largefile.log\")}\n\t\tlogFile.Open()\n\n\t\tfor i := 0; i \u003c 15*1024*1024; i++ {\n\t\t\tdata := []byte(\"a\")\n\t\t\tn, err := logFile.Write(data)\n\t\t\tassert.NoError(t, err)\n\t\t\tassert.Equal(t, len(data), n)\n\t\t}\n\n\t\tlogFile.Close()\n\t})\n\n\tt.Run(\"Negative Path - File Too Large\", func(t *testing.T) {\n\t\ttmpDir := t.TempDir()\n\t\tlogFile := LogFileT{path: filepath.Join(tmpDir, \"largefile.log\")}\n\t\tlogFile.Open()\n\n\t\tfor i := 0; i \u003c 120*1024*1024; i++ {\n\t\t\tdata := []byte(\"a\")\n\t\t\tn, err := logFile.Write(data)\n\t\t\tassert.NoError(t, err)\n\t\t\tassert.Equal(t, len(data), n)\n\t\t}\n\n\t\tlogFile.Close()\n\t})\n\n\tt.Run(\"Happy Path - Existing File\", func(t *testing.T) {\n\t\ttmpDir := t.TempDir()\n\t\tlogFile := LogFileT{path: filepath.Join(tmpDir, \"existing.log\")}\n\t\tlogFile.Open()\n\n\t\tdata := []byte(\"Existing data\")\n\t\tn, err := logFile.Write(data)\n\t\tassert.NoError(t, err)\n\t\tassert.Equal(t, len(data), n)\n\n\t\tlogFile.Close()\n\t})\n\n\tt.Run(\"Negative Path - Existing File Too Large\", func(t *testing.T) {\n\t\ttmpDir := t.TempDir()\n\t\tlogFile := LogFileT{path: filepath.Join(tmpDir, \"existing.log\")}\n\t\tlogFile.Open()\n\n\t\tfor i := 0; i \u003c 120*1024*1024; i++ {\n\t\t\tdata := []byte(\"a\")\n\t\t\tn, err := logFile.Write(data)\n\t\t\tassert.NoError(t, err)\n\t\t\tassert.Equal(t, len(data), n)\n\t\t}\n\n\t\tlogFile.Close()\n\t})\n\n\tt.Run(\"Happy Path - InitLogger\", func(t *testing.T) {\n\t\ttmpDir := t.TempDir()\n\t\tlogger := InitLogger(tmpDir)\n\n\t\tdata := []byte(\"Test data\")\n\t\tn, err := logger.Write(data)\n\t\tassert.NoError(t, err)\n\t\tassert.Equal(t, len(data), n)\n\n\t\tlogger.Close()\n\t})\n\n\tt.Run(\"Negative Path - InitLogger with Nonexistent Directory\", func(t *testing.T) {\n\t\ttmpDir := filepath.Join(os.TempDir(), \"nonexistent\")\n\t\terr := os.MkdirAll(tmpDir, 0755)\n\t\tassert.NoError(t, err)\n\t\tdefer os.RemoveAll(tmpDir)\n\n\t\tlogger := InitLogger(tmpDir)\n\t\tdata := []byte(\"Test data\")\n\t\tn, err := logger.Write(data)\n\t\tassert.Error(t, err)\n\t\tassert.Equal(t, 0, n)\n\t})\n\n\tt.Run(\"Happy Path - Close\", func(t *testing.T) {\n\t\ttmpDir := t.TempDir()\n\t\tlogFile := LogFileT{path: filepath.Join(tmpDir, \"close.log\")}\n\t\tlogFile.Open()\n\n\t\terr := logFile.Close()\n\t\tassert.NoError(t, err)\n\n\t\tif _, err := os.Stat(logFile.path); !os.IsNotExist(err) {\n\t\t\tt.Errorf(\"Log file should be closed\")\n\t\t}\n\t})\n\n\tt.Run(\"Negative Path - Close with Unopened File\", func(t *testing.T) {\n\t\tlogFile := LogFileT{path: filepath.Join(os.TempDir(), \"unopened.log\")}\n\t\terr := logFile.Close()\n\t\tassert.NoError(t, err)\n\t})\n}\n\nfunc TestLogFileT_Open(t *testing.T) {\n\tt.Run(\"Happy Path\", func(t *testing.T) {\n\t\ttmpDir := t.TempDir()\n\t\tlogFile := LogFileT{path: filepath.Join(tmpDir, \"test.log\")}\n\t\tlogFile.Open()\n\n\t\tif _, err := os.Stat(logFile.path); os.IsNotExist(err) {\n\t\t\tt.Errorf(\"Log file should be created\")\n\t\t}\n\n\t\tlogFile.Close()\n\t})\n\n\tt.Run(\"Negative Path - File Not Found\", func(t *testing.T) {\n\t\ttmpDir := t.TempDir()\n\t\tlogFile := LogFileT{path: filepath.Join(tmpDir, \"nonexistent.log\")}\n\t\terr := logFile.Open()\n\t\tassert.Error(t, err)\n\t})\n\n\tt.Run(\"Corner Case - Large File\", func(t *testing.T) {\n\t\ttmpDir := t.TempDir()\n\t\tlogFile := LogFileT{path: filepath.Join(tmpDir, \"largefile.log\")}\n\t\tlogFile.Open()\n\n\t\tfor i := 0; i \u003c 15*1024*1024; i++ {\n\t\t\tdata := []byte(\"a\")\n\t\t\tn, err := logFile.Write(data)\n\t\t\tassert.NoError(t, err)\n\t\t\tassert.Equal(t, len(data), n)\n\t\t}\n\n\t\tlogFile.Close()\n\t})\n\n\tt.Run(\"Negative Path - File Too Large\", func(t *testing.T) {\n\t\ttmpDir := t.TempDir()\n\t\tlogFile := LogFileT{path: filepath.Join(tmpDir, \"largefile.log\")}\n\t\tlogFile.Open()\n\n\t\tfor i := 0; i \u003c 120*1024*1024; i++ {\n\t\t\tdata := []byte(\"a\")\n\t\t\tn, err := logFile.Write(data)\n\t\t\tassert.NoError(t, err)\n\t\t\tassert.Equal(t, len(data), n)\n\t\t}\n\n\t\tlogFile.Close()\n\t})\n\n\tt.Run(\"Happy Path - Existing File\", func(t *testing.T) {\n\t\ttmpDir := t.TempDir()\n\t\tlogFile := LogFileT{path: filepath.Join(tmpDir, \"existing.log\")}\n\t\tlogFile.Open()\n\n\t\tdata := []byte(\"Existing data\")\n\t\tn, err := logFile.Write(data)\n\t\tassert.NoError(t, err)\n\t\tassert.Equal(t, len(data), n)\n\n\t\tlogFile.Close()\n\t})\n\n\tt.Run(\"Negative Path - Existing File Too Large\", func(t *testing.T) {\n\t\ttmpDir := t.TempDir()\n\t\tlogFile := LogFileT{path: filepath.Join(tmpDir, \"existing.log\")}\n\t\tlogFile.Open()\n\n\t\tfor i := 0; i \u003c 120*1024*1024; i++ {\n\t\t\tdata := []byte(\"a\")\n\t\t\tn, err := logFile.Write(data)\n\t\t\tassert.NoError(t, err)\n\t\t\tassert.Equal(t, len(data), n)\n\t\t}\n\n\t\tlogFile.Close()\n\t})\n\n\tt.Run(\"Happy Path - InitLogger\", func(t *testing.T) {\n\t\ttmpDir := t.TempDir()\n\t\tlogger := InitLogger(tmpDir)\n\n\t\tdata := []byte(\"Test data\")\n\t\tn, err := logger.Write(data)\n\t\tassert.NoError(t, err)\n\t\tassert.Equal(t, len(data), n)\n\n\t\tlogger.Close()\n\t})\n\n\tt.Run(\"Negative Path - InitLogger with Nonexistent Directory\", func(t *testing.T) {\n\t\ttmpDir := filepath.Join(os.TempDir(), \"nonexistent\")\n\t\terr := os.MkdirAll(tmpDir, 0755)\n\t\tassert.NoError(t, err)\n\t\tdefer os.RemoveAll(tmpDir)\n\n\t\tlogger := InitLogger(tmpDir)\n\t\tdata := []byte(\"Test data\")\n\t\tn, err := logger.Write(data)\n\t\tassert.Error(t, err)\n\t\tassert.Equal(t, 0, n)\n\t})\n\n\tt.Run(\"Happy Path - Close\", func(t *testing.T) {\n\t\ttmpDir := t.TempDir()\n\t\tlogFile := LogFileT{path: filepath.Join(tmpDir, \"close.log\")}\n\t\tlogFile.Open()\n\n\t\terr := logFile.Close()\n\t\tassert.NoError(t, err)\n\n\t\tif _, err := os.Stat(logFile.path); !os.IsNotExist(err) {\n\t\t\tt.Errorf(\"Log file should be closed\")\n\t\t}\n\t})\n\n\tt.Run(\"Negative Path - Close with Unopened File\", func(t *testing.T) {\n\t\tlogFile := LogFileT{path: filepath.Join(os.TempDir(), \"unopened.log\")}\n\t\terr := logFile.Close()\n\t\tassert.NoError(t, err)\n\t})\n}\n\nfunc TestLogFileT_Close(t *testing.T) {\n\tt.Run(\"Happy Path\", func(t *testing.T) {\n\t\ttmpDir := t.TempDir()\n\t\tlogFile := LogFileT{path: filepath.Join(tmpDir, \"close.log\")}\n\t\tlogFile.Open()\n\n\t\terr := logFile.Close()\n\t\tassert.NoError(t, err)\n\n\t\tif _, err := os.Stat(logFile.path); !os.IsNotExist(err) {\n\t\t\tt.Errorf(\"Log file should be closed\")\n\t\t}\n\t})\n\n\tt.Run(\"Negative Path - Close with Unopened File\", func(t *testing.T) {\n\t\tlogFile := LogFileT{path: filepath.Join(os.TempDir(), \"unopened.log\")}\n\t\terr := logFile.Close()\n\t\tassert.NoError(t, err)\n\t})\n}\n\nfunc TestLogFileT_InitLogger(t *testing.T) {\n\tt.Run(\"Happy Path\", func(t *testing.T) {\n\t\ttmpDir := t.TempDir()\n\t\tlogger := InitLogger(tmpDir)\n\n\t\tdata := []byte(\"Test data\")\n\t\tn, err := logger.Write(data)\n\t\tassert.NoError(t, err)\n\t\tassert.Equal(t, len(data), n)\n\n\t\tlogger.Close()\n\t})\n\n\tt.Run(\"Negative Path - InitLogger with Nonexistent Directory\", func(t *testing.T) {\n\t\ttmpDir := filepath.Join(os.TempDir(), \"nonexistent\")\n\t\terr := os.MkdirAll(tmpDir, 0755)\n\t\tassert.NoError(t, err)\n\t\tdefer os.RemoveAll(tmpDir)\n\n\t\tlogger := InitLogger(tmpDir)\n\t\tdata := []byte(\"Test data\")\n\t\tn, err := logger.Write(data)\n\t\tassert.Error(t, err)\n\t\tassert.Equal(t, 0, n)\n\t})\n}\n",
    "amount_of_generated_test_cases": 10,
    "single_test_run_command": "go test -v util/loglog_test.go"
}