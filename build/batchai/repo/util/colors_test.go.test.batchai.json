{
    "path": "util/colors_test.go",
    "model_usage_metrics": {
        "Duration": 26325748437,
        "OpenAiUsage": {
            "completion_tokens": 0,
            "prompt_tokens": 0,
            "total_tokens": 0,
            "completion_tokens_details": {
                "accepted_prediction_tokens": 0,
                "audio_tokens": 0,
                "reasoning_tokens": 0,
                "rejected_prediction_tokens": 0
            },
            "prompt_tokens_details": {
                "audio_tokens": 0,
                "cached_tokens": 0
            }
        }
    },
    "test_file_path": "util/colors_test.go",
    "existing_test_code": "",
    "original_code": "package util\n\nimport (\n\t\"errors\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestColorsFromLabel_HappyPath(t *testing.T) {\n\t// Given a valid label with multiple color names separated by commas\n\tlabel := \"FgRed,BgGreen,OpBold\"\n\n\t// When calling ColorsFromLabel with the given label\n\tstyle, err := ColorsFromLabel(label)\n\n\t// Then no error should be returned and the style should contain the expected colors and options\n\tassert.NoError(t, err)\n\tassert.Equal(t, color.FgRed|color.BgGreen|color.OpBold, style)\n}\n\nfunc TestColorsFromLabel_InvalidColorName(t *testing.T) {\n\t// Given a label with an invalid color name\n\tlabel := \"FgRed,UnknownColor,BgGreen\"\n\n\t// When calling ColorsFromLabel with the given label\n\t_, err := ColorsFromLabel(label)\n\n\t// Then an error should be returned indicating that the unknown color name is not allowed\n\tassert.Error(t, err)\n\tassert.Contains(t, err.Error(), \"unknown color name 'UnknownColor' in\")\n}\n\nfunc TestColorsFromLabel_EmptyLabel(t *testing.T) {\n\t// Given an empty label\n\tlabel := \"\"\n\n\t// When calling ColorsFromLabel with the given label\n\tstyle, err := ColorsFromLabel(label)\n\n\t// Then no error should be returned and the style should be reset to default\n\tassert.NoError(t, err)\n\tassert.Equal(t, color.FgDefault, style)\n}\n\nfunc TestColorsFromLabel_SingleColor(t *testing.T) {\n\t// Given a label with a single valid color name\n\tlabel := \"FgBlue\"\n\n\t// When calling ColorsFromLabel with the given label\n\tstyle, err := ColorsFromLabel(label)\n\n\t// Then no error should be returned and the style should contain only the specified color\n\tassert.NoError(t, err)\n\tassert.Equal(t, color.FgBlue, style)\n}\n\nfunc TestColorsFromLabel_MultipleOptions(t *testing.T) {\n\t// Given a label with multiple options separated by commas\n\tlabel := \"OpBold,OpItalic\"\n\n\t// When calling ColorsFromLabel with the given label\n\tstyle, err := ColorsFromLabel(label)\n\n\t// Then no error should be returned and the style should contain only the specified options\n\tassert.NoError(t, err)\n\tassert.Equal(t, color.OpBold|color.OpItalic, style)\n}\n\nfunc TestColorsFromLabel_MixedColorAndOption(t *testing.T) {\n\t// Given a label with both valid color names and options separated by commas\n\tlabel := \"FgRed,OpBold\"\n\n\t// When calling ColorsFromLabel with the given label\n\tstyle, err := ColorsFromLabel(label)\n\n\t// Then no error should be returned and the style should contain the specified color and option\n\tassert.NoError(t, err)\n\tassert.Equal(t, color.FgRed|color.OpBold, style)\n}\n\nfunc TestColorsFromLabel_LeadingTrailingSpaces(t *testing.T) {\n\t// Given a label with leading and trailing spaces around valid color names\n\tlabel := \"  FgGreen,BgBlue  \"\n\n\t// When calling ColorsFromLabel with the given label\n\tstyle, err := ColorsFromLabel(label)\n\n\t// Then no error should be returned and the style should contain only the specified colors\n\tassert.NoError(t, err)\n\tassert.Equal(t, color.FgGreen|color.BgBlue, style)\n}\n\nfunc TestColorsFromLabel_CommaOnly(t *testing.T) {\n\t// Given a label with only commas\n\tlabel := \",\"\n\n\t// When calling ColorsFromLabel with the given label\n\tstyle, err := ColorsFromLabel(label)\n\n\t// Then no error should be returned and the style should be reset to default\n\tassert.NoError(t, err)\n\tassert.Equal(t, color.FgDefault, style)\n}\n\nfunc TestColorsFromLabel_SingleInvalidColorName(t *testing.T) {\n\t// Given a label with a single invalid color name\n\tlabel := \"UnknownColor\"\n\n\t// When calling ColorsFromLabel with the given label\n\t_, err := ColorsFromLabel(label)\n\n\t// Then an error should be returned indicating that the unknown color name is not allowed\n\tassert.Error(t, err)\n\tassert.Contains(t, err.Error(), \"unknown color name 'UnknownColor' in\")\n}\n\nfunc TestColorsFromLabel_MultipleInvalidColorNames(t *testing.T) {\n\t// Given a label with multiple invalid color names separated by commas\n\tlabel := \"UnknownColor1,UnknownColor2\"\n\n\t// When calling ColorsFromLabel with the given label\n\t_, err := ColorsFromLabel(label)\n\n\t// Then an error should be returned indicating that the unknown color names are not allowed\n\tassert.Error(t, err)\n\tassert.Contains(t, err.Error(), \"unknown color name 'UnknownColor1' in\")\n\tassert.Contains(t, err.Error(), \"unknown color name 'UnknownColor2' in\")\n}\n",
    "test_code": "package util\n\nimport (\n\t\"errors\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestColorsFromLabel_HappyPath(t *testing.T) {\n\t// Given a valid label with multiple color names separated by commas\n\tlabel := \"FgRed,BgGreen,OpBold\"\n\n\t// When calling ColorsFromLabel with the given label\n\tstyle, err := ColorsFromLabel(label)\n\n\t// Then no error should be returned and the style should contain the expected colors and options\n\tassert.NoError(t, err)\n\tassert.Equal(t, color.FgRed|color.BgGreen|color.OpBold, style)\n}\n\nfunc TestColorsFromLabel_InvalidColorName(t *testing.T) {\n\t// Given a label with an invalid color name\n\tlabel := \"FgRed,UnknownColor,BgGreen\"\n\n\t// When calling ColorsFromLabel with the given label\n\t_, err := ColorsFromLabel(label)\n\n\t// Then an error should be returned indicating that the unknown color name is not allowed\n\tassert.Error(t, err)\n\tassert.Contains(t, err.Error(), \"unknown color name 'UnknownColor' in\")\n}\n\nfunc TestColorsFromLabel_EmptyLabel(t *testing.T) {\n\t// Given an empty label\n\tlabel := \"\"\n\n\t// When calling ColorsFromLabel with the given label\n\tstyle, err := ColorsFromLabel(label)\n\n\t// Then no error should be returned and the style should be reset to default\n\tassert.NoError(t, err)\n\tassert.Equal(t, color.FgDefault, style)\n}\n\nfunc TestColorsFromLabel_SingleColor(t *testing.T) {\n\t// Given a label with a single valid color name\n\tlabel := \"FgBlue\"\n\n\t// When calling ColorsFromLabel with the given label\n\tstyle, err := ColorsFromLabel(label)\n\n\t// Then no error should be returned and the style should contain only the specified color\n\tassert.NoError(t, err)\n\tassert.Equal(t, color.FgBlue, style)\n}\n\nfunc TestColorsFromLabel_MultipleOptions(t *testing.T) {\n\t// Given a label with multiple options separated by commas\n\tlabel := \"OpBold,OpItalic\"\n\n\t// When calling ColorsFromLabel with the given label\n\tstyle, err := ColorsFromLabel(label)\n\n\t// Then no error should be returned and the style should contain only the specified options\n\tassert.NoError(t, err)\n\tassert.Equal(t, color.OpBold|color.OpItalic, style)\n}\n\nfunc TestColorsFromLabel_MixedColorAndOption(t *testing.T) {\n\t// Given a label with both valid color names and options separated by commas\n\tlabel := \"FgRed,OpBold\"\n\n\t// When calling ColorsFromLabel with the given label\n\tstyle, err := ColorsFromLabel(label)\n\n\t// Then no error should be returned and the style should contain the specified color and option\n\tassert.NoError(t, err)\n\tassert.Equal(t, color.FgRed|color.OpBold, style)\n}\n\nfunc TestColorsFromLabel_LeadingTrailingSpaces(t *testing.T) {\n\t// Given a label with leading and trailing spaces around valid color names\n\tlabel := \"  FgGreen,BgBlue  \"\n\n\t// When calling ColorsFromLabel with the given label\n\tstyle, err := ColorsFromLabel(label)\n\n\t// Then no error should be returned and the style should contain only the specified colors\n\tassert.NoError(t, err)\n\tassert.Equal(t, color.FgGreen|color.BgBlue, style)\n}\n\nfunc TestColorsFromLabel_CommaOnly(t *testing.T) {\n\t// Given a label with only commas\n\tlabel := \",\"\n\n\t// When calling ColorsFromLabel with the given label\n\tstyle, err := ColorsFromLabel(label)\n\n\t// Then no error should be returned and the style should be reset to default\n\tassert.NoError(t, err)\n\tassert.Equal(t, color.FgDefault, style)\n}\n\nfunc TestColorsFromLabel_SingleInvalidColorName(t *testing.T) {\n\t// Given a label with a single invalid color name\n\tlabel := \"UnknownColor\"\n\n\t// When calling ColorsFromLabel with the given label\n\t_, err := ColorsFromLabel(label)\n\n\t// Then an error should be returned indicating that the unknown color name is not allowed\n\tassert.Error(t, err)\n\tassert.Contains(t, err.Error(), \"unknown color name 'UnknownColor' in\")\n}\n\nfunc TestColorsFromLabel_MultipleInvalidColorNames(t *testing.T) {\n\t// Given a label with multiple invalid color names separated by commas\n\tlabel := \"UnknownColor1,UnknownColor2\"\n\n\t// When calling ColorsFromLabel with the given label\n\t_, err := ColorsFromLabel(label)\n\n\t// Then an error should be returned indicating that the unknown color names are not allowed\n\tassert.Error(t, err)\n\tassert.Contains(t, err.Error(), \"unknown color name 'UnknownColor1' in\")\n\tassert.Contains(t, err.Error(), \"unknown color name 'UnknownColor2' in\")\n}\n\nfunc TestColorsFromLabel_EmptyString(t *testing.T) {\n\t// Given an empty string as the label\n\tlabel := \"\"\n\n\t// When calling ColorsFromLabel with the given label\n\tstyle, err := ColorsFromLabel(label)\n\n\t// Then no error should be returned and the style should be reset to default\n\tassert.NoError(t, err)\n\tassert.Equal(t, color.FgDefault, style)\n}\n\nfunc TestColorsFromLabel_WhitespaceOnly(t *testing.T) {\n\t// Given a string with only whitespace as the label\n\tlabel := \"   \"\n\n\t// When calling ColorsFromLabel with the given label\n\tstyle, err := ColorsFromLabel(label)\n\n\t// Then no error should be returned and the style should be reset to default\n\tassert.NoError(t, err)\n\tassert.Equal(t, color.FgDefault, style)\n}\n\nfunc TestColorsFromLabel_MixedCaseColorNames(t *testing.T) {\n\t// Given a label with mixed case color names\n\tlabel := \"FgRed,bGgreen,OpBold\"\n\n\t// When calling ColorsFromLabel with the given label\n\tstyle, err := ColorsFromLabel(label)\n\n\t// Then no error should be returned and the style should contain the expected colors and options\n\tassert.NoError(t, err)\n\tassert.Equal(t, color.FgRed|color.BgGreen|color.OpBold, style)\n}\n\nfunc TestColorsFromLabel_MixedCaseOptionNames(t *testing.T) {\n\t// Given a label with mixed case option names\n\tlabel := \"Opbold,bGiTalic\"\n\n\t// When calling ColorsFromLabel with the given label\n\tstyle, err := ColorsFromLabel(label)\n\n\t// Then no error should be returned and the style should contain the expected options\n\tassert.NoError(t, err)\n\tassert.Equal(t, color.OpBold|color.OpItalic, style)\n}\n",
    "amount_of_generated_test_cases": 14,
    "single_test_run_command": "go test -v util/colors_test.go"
}