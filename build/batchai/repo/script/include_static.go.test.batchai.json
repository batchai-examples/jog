{
    "path": "script/include_static.go",
    "model_usage_metrics": {
        "Duration": 28725019989,
        "OpenAiUsage": {
            "completion_tokens": 0,
            "prompt_tokens": 0,
            "total_tokens": 0,
            "completion_tokens_details": {
                "accepted_prediction_tokens": 0,
                "audio_tokens": 0,
                "reasoning_tokens": 0,
                "rejected_prediction_tokens": 0
            },
            "prompt_tokens_details": {
                "audio_tokens": 0,
                "cached_tokens": 0
            }
        }
    },
    "test_file_path": "script/include_static_test.go",
    "existing_test_code": "",
    "original_code": "package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"strings\"\n)\n\nfunc includeDir(staticGoParentDir string, staticFileParentDir string, dirName string) {\n\tstaticGoDir := filepath.Join(staticGoParentDir, dirName)\n\tos.MkdirAll(staticGoDir, os.ModePerm)\n\n\tstaticFilesDir := filepath.Join(staticFileParentDir, dirName)\n\tfs, _ := ioutil.ReadDir(staticFilesDir)\n\n\tfor _, f := range fs {\n\t\tfName := f.Name()\n\n\t\tif f.IsDir() {\n\t\t\tincludeDir(staticGoDir, staticFilesDir, fName)\n\t\t} else {\n\t\t\tincludeFile(staticGoDir, staticFilesDir, fName)\n\t\t}\n\t}\n}\n\nfunc includeFile(staticGoParentDir string, staticFileParentDir string, fName string) {\n\tpackageName := staticGoParentDir[strings.LastIndex(staticGoParentDir, \"/\")+1:]\n\n\tfPath := filepath.Join(staticFileParentDir, fName)\n\tfmt.Println(\"Including static file: \" + fPath)\n\n\tvar fTitle, fExt string\n\n\tindexOfLastDot := strings.LastIndex(fName, \".\")\n\tif indexOfLastDot \u003e= 0 {\n\t\tfTitle = fName[:indexOfLastDot]\n\t\tfExt = fName[indexOfLastDot+1:]\n\t} else {\n\t\tfTitle = fName\n\t\tfExt = \"\"\n\t}\n\n\tindexOfLastSlash := strings.LastIndex(fTitle, \"/\")\n\tif indexOfLastSlash \u003e= 0 {\n\t\tfTitle = fTitle[indexOfLastSlash+1:]\n\t}\n\n\t// TODO: this code does not work for text files that contain: %  `\n\n\tout, _ := os.Create(filepath.Join(staticGoParentDir, fName+\".go\"))\n\tdefer out.Close()\n\tout.WriteString(\"package \" + packageName + \" \\n\\nconst (\\n\")\n\n\tvarName := fTitle\n\tif len(fExt) \u003e 0 {\n\t\tvarName = varName + \"_\" + fExt\n\t}\n\tvarName = strings.ToUpper(varName[:1]) + varName[1:]\n\tvarName = strings.ReplaceAll(varName, \"-\", \"_\")\n\tout.WriteString(\"  // \" + varName + \" ...\\n\")\n\tout.WriteString(\"  \" + varName + \" string = `\")\n\n\tcontentBytes, _ := ioutil.ReadFile(fPath)\n\tcontent := string(contentBytes)\n\tcontent = strings.ReplaceAll(content, \"`\", \"` + \\\"`\\\" + `\")\n\tout.WriteString(content)\n\n\tout.WriteString(\"`\\n\")\n\tout.WriteString(\")\\n\")\n}\n\n// Reads all static files in the current folder\n// and encodes them as strings literals in static/static.go\nfunc main() {\n\tfs, _ := ioutil.ReadDir(\"./static_files\")\n\n\tfor _, f := range fs {\n\t\tfName := f.Name()\n\t\tif f.IsDir() {\n\t\t\tincludeDir(\"./static\", \"./static_files\", fName)\n\t\t} else {\n\t\t\tincludeFile(\"./static\", \"./static_files\", fName)\n\t\t}\n\t}\n}\n",
    "test_code": "package main\n\nimport (\n\t\"testing\"\n)\n\nfunc TestIncludeDir(t *testing.T) {\n\t// Test case: Happy path - include a directory with files and subdirectories\n\tstaticGoParentDir := \"./static_go\"\n\tstaticFileParentDir := \"./static_files\"\n\tdirName := \"test_dir\"\n\n\tincludeDir(staticGoParentDir, staticFileParentDir, dirName)\n\n\t// Check if the directories are created\n\tif _, err := os.Stat(filepath.Join(staticGoParentDir, dirName)); os.IsNotExist(err) {\n\t\tt.Errorf(\"Directory %s not created\", filepath.Join(staticGoParentDir, dirName))\n\t}\n\n\t// Check if the files are included\n\tif _, err := os.Stat(filepath.Join(staticGoParentDir, dirName, \"file1.go\")); os.IsNotExist(err) {\n\t\tt.Errorf(\"File file1.go not included\")\n\t}\n\tif _, err := os.Stat(filepath.Join(staticGoParentDir, dirName, \"subdir\", \"file2.go\")); os.IsNotExist(err) {\n\t\tt.Errorf(\"File file2.go not included in subdir\")\n\t}\n\n\t// Clean up\n\tos.RemoveAll(staticGoParentDir)\n}\n\nfunc TestIncludeFile(t *testing.T) {\n\t// Test case: Happy path - include a single file\n\tstaticGoParentDir := \"./static_go\"\n\tstaticFileParentDir := \"./static_files\"\n\tfName := \"file1.txt\"\n\n\tincludeFile(staticGoParentDir, staticFileParentDir, fName)\n\n\t// Check if the file is included\n\tif _, err := os.Stat(filepath.Join(staticGoParentDir, fName+\".go\")); os.IsNotExist(err) {\n\t\tt.Errorf(\"File %s.go not included\", fName)\n\t}\n\n\t// Clean up\n\tos.RemoveAll(staticGoParentDir)\n}\n\nfunc TestIncludeEmptyDir(t *testing.T) {\n\t// Test case: Corner case - include an empty directory\n\tstaticGoParentDir := \"./static_go\"\n\tstaticFileParentDir := \"./static_files\"\n\tdirName := \"empty_dir\"\n\n\tincludeDir(staticGoParentDir, staticFileParentDir, dirName)\n\n\t// Check if the directory is created\n\tif _, err := os.Stat(filepath.Join(staticGoParentDir, dirName)); os.IsNotExist(err) {\n\t\tt.Errorf(\"Directory %s not created\", filepath.Join(staticGoParentDir, dirName))\n\t}\n\n\t// Clean up\n\tos.RemoveAll(staticGoParentDir)\n}\n\nfunc TestIncludeFileWithExt(t *testing.T) {\n\t// Test case: Happy path - include a file with extension\n\tstaticGoParentDir := \"./static_go\"\n\tstaticFileParentDir := \"./static_files\"\n\tfName := \"file1.txt\"\n\n\tincludeFile(staticGoParentDir, staticFileParentDir, fName)\n\n\t// Check if the file is included with correct variable name\n\tif _, err := os.Stat(filepath.Join(staticGoParentDir, \"File1_txt.go\")); os.IsNotExist(err) {\n\t\tt.Errorf(\"File File1_txt.go not included\")\n\t}\n\n\t// Clean up\n\tos.RemoveAll(staticGoParentDir)\n}\n\nfunc TestIncludeFileWithDash(t *testing.T) {\n\t// Test case: Happy path - include a file with dash in name\n\tstaticGoParentDir := \"./static_go\"\n\tstaticFileParentDir := \"./static_files\"\n\tfName := \"file-1.txt\"\n\n\tincludeFile(staticGoParentDir, staticFileParentDir, fName)\n\n\t// Check if the file is included with correct variable name\n\tif _, err := os.Stat(filepath.Join(staticGoParentDir, \"File_1_txt.go\")); os.IsNotExist(err) {\n\t\tt.Errorf(\"File File_1_txt.go not included\")\n\t}\n\n\t// Clean up\n\tos.RemoveAll(staticGoParentDir)\n}\n\nfunc TestIncludeFileWithSpecialChars(t *testing.T) {\n\t// Test case: Happy path - include a file with special characters in name\n\tstaticGoParentDir := \"./static_go\"\n\tstaticFileParentDir := \"./static_files\"\n\tfName := \"file!@#$.txt\"\n\n\tincludeFile(staticGoParentDir, staticFileParentDir, fName)\n\n\t// Check if the file is included with correct variable name\n\tif _, err := os.Stat(filepath.Join(staticGoParentDir, \"File_!_@___$.txt.go\")); os.IsNotExist(err) {\n\t\tt.Errorf(\"File File_!_@___$.txt.go not included\")\n\t}\n\n\t// Clean up\n\tos.RemoveAll(staticGoParentDir)\n}\n\nfunc TestIncludeFileWithQuotes(t *testing.T) {\n\t// Test case: Happy path - include a file with quotes in content\n\tstaticGoParentDir := \"./static_go\"\n\tstaticFileParentDir := \"./static_files\"\n\tfName := \"file_with_quotes.txt\"\n\n\tioutil.WriteFile(filepath.Join(staticFileParentDir, fName), []byte(`\"Hello, world!\"`), os.ModePerm)\n\tincludeFile(staticGoParentDir, staticFileParentDir, fName)\n\n\t// Check if the file is included with correct content\n\tcontentBytes, _ := ioutil.ReadFile(filepath.Join(staticGoParentDir, fName+\".go\"))\n\tcontent := string(contentBytes)\n\tif !strings.Contains(content, \"`Hello, world!`\") {\n\t\tt.Errorf(\"Content of %s.go does not match\", fName)\n\t}\n\n\t// Clean up\n\tos.RemoveAll(staticGoParentDir)\n}\n\nfunc TestIncludeFileWithBackticks(t *testing.T) {\n\t// Test case: Happy path - include a file with backticks in content\n\tstaticGoParentDir := \"./static_go\"\n\tstaticFileParentDir := \"./static_files\"\n\tfName := \"file_with_backticks.txt\"\n\n\tioutil.WriteFile(filepath.Join(staticFileParentDir, fName), []byte(\"`Hello, world!`\"), os.ModePerm)\n\tincludeFile(staticGoParentDir, staticFileParentDir, fName)\n\n\t// Check if the file is included with correct content\n\tcontentBytes, _ := ioutil.ReadFile(filepath.Join(staticGoParentDir, fName+\".go\"))\n\tcontent := string(contentBytes)\n\tif !strings.Contains(content, \"`Hello, world!`\") {\n\t\tt.Errorf(\"Content of %s.go does not match\", fName)\n\t}\n\n\t// Clean up\n\tos.RemoveAll(staticGoParentDir)\n}\n\nfunc TestIncludeFileWithNewLines(t *testing.T) {\n\t// Test case: Happy path - include a file with new lines in content\n\tstaticGoParentDir := \"./static_go\"\n\tstaticFileParentDir := \"./static_files\"\n\tfName := \"file_with_new_lines.txt\"\n\n\tioutil.WriteFile(filepath.Join(staticFileParentDir, fName), []byte(\"Hello,\\nworld!\"), os.ModePerm)\n\tincludeFile(staticGoParentDir, staticFileParentDir, fName)\n\n\t// Check if the file is included with correct content\n\tcontentBytes, _ := ioutil.ReadFile(filepath.Join(staticGoParentDir, fName+\".go\"))\n\tcontent := string(contentBytes)\n\tif !strings.Contains(content, \"`Hello,\\nworld!`\") {\n\t\tt.Errorf(\"Content of %s.go does not match\", fName)\n\t}\n\n\t// Clean up\n\tos.RemoveAll(staticGoParentDir)\n}\n",
    "amount_of_generated_test_cases": 10,
    "single_test_run_command": "go test script/include_static_test.go"
}