{
    "path": "static/grok_vjeantet/mongodb.go",
    "model_usage_metrics": {
        "Duration": 120000810564,
        "OpenAiUsage": {
            "completion_tokens": 0,
            "prompt_tokens": 0,
            "total_tokens": 0,
            "completion_tokens_details": {
                "accepted_prediction_tokens": 0,
                "audio_tokens": 0,
                "reasoning_tokens": 0,
                "rejected_prediction_tokens": 0
            },
            "prompt_tokens_details": {
                "audio_tokens": 0,
                "cached_tokens": 0
            }
        }
    },
    "test_file_path": "static/grok_vjeantet/mongodb_test.go",
    "existing_test_code": "",
    "original_code": "package grok_vjeantet \n\nconst (\n  // Mongodb ...\n  Mongodb string = `MONGO_LOG %{SYSLOGTIMESTAMP:timestamp} \\[%{WORD:component}\\] %{GREEDYDATA:message}\nMONGO_QUERY \\{ (?\u003c={ ).*(?= } ntoreturn:) \\}\nMONGO_SLOWQUERY %{WORD} %{MONGO_WORDDASH:database}\\.%{MONGO_WORDDASH:collection} %{WORD}: %{MONGO_QUERY:query} %{WORD}:%{NONNEGINT:ntoreturn} %{WORD}:%{NONNEGINT:ntoskip} %{WORD}:%{NONNEGINT:nscanned}.*nreturned:%{NONNEGINT:nreturned}..+ (?\u003cduration\u003e[0-9]+)ms\nMONGO_WORDDASH \\b[\\w-]+\\b\nMONGO3_SEVERITY \\w\nMONGO3_COMPONENT %{WORD}|-\nMONGO3_LOG %{TIMESTAMP_ISO8601:timestamp} %{MONGO3_SEVERITY:severity} %{MONGO3_COMPONENT:component}%{SPACE}(?:\\[%{DATA:context}\\])? %{GREEDYDATA:message}\n`\n)\n",
    "test_code": "package grok_vjeantet\n\nimport (\n\t\"testing\"\n)\n\n// TestMongodbHappyPath tests the Mongodb constant with a valid log entry.\nfunc TestMongodbHappyPath(t *testing.T) {\n\tlogEntry := `MONGO_LOG 2023-04-10T12:34:56Z [mongod] { \"query\": { \"find\": \"users\", \"filter\": {}, \"limit\": 10, \"skip\": 0, \"sort\": { \"_id\": 1 }, \"fields\": null, \"hint\": null, \"returnKey\": false, \"showDiskLoc\": false, \"snapshot\": false, \"readConcern\": null, \"writeConcern\": null, \"collation\": null, \"maxTimeMS\": null, \"$db\": \"test\" } } ntoreturn:10 ntoskip:0 nscanned:20 nreturned:5..+ 10ms`\n\texpected := `MONGO_LOG %{SYSLOGTIMESTAMP:timestamp} \\[%{WORD:component}\\] %{GREEDYDATA:message}\nMONGO_QUERY \\{ (?\u003c={ ).*(?= } ntoreturn:) \\}\nMONGO_SLOWQUERY %{WORD} %{MONGO_WORDDASH:database}\\.%{MONGO_WORDDASH:collection} %{WORD}: %{MONGO_QUERY:query} %{WORD}:%{NONNEGINT:ntoreturn} %{WORD}:%{NONNEGINT:ntoskip} %{WORD}:%{NONNEGINT:nscanned}.*nreturned:%{NONNEGINT:nreturned}..+ (?\u003cduration\u003e[0-9]+)ms\nMONGO_WORDDASH \\b[\\w-]+\\b\nMONGO3_SEVERITY \\w\nMONGO3_COMPONENT %{WORD}|-\nMONGO3_LOG %{TIMESTAMP_ISO8601:timestamp} %{MONGO3_SEVERITY:severity} %{MONGO3_COMPONENT:component}%{SPACE}(?:\\[%{DATA:context}\\])? %{GREEDYDATA:message}\n`\n\tresult := Mongodb\n\tif result != expected {\n\t\tt.Errorf(\"Expected %s, but got %s\", expected, result)\n\t}\n}\n\n// TestMongodbNegativePath tests the Mongodb constant with an invalid log entry.\nfunc TestMongodbNegativePath(t *testing.T) {\n\tlogEntry := `MONGO_LOG 2023-04-10T12:34:56Z [mongod] { \"query\": { \"find\": \"users\", \"filter\": {}, \"limit\": 10, \"skip\": 0, \"sort\": { \"_id\": 1 }, \"fields\": null, \"hint\": null, \"returnKey\": false, \"showDiskLoc\": false, \"snapshot\": false, \"readConcern\": null, \"writeConcern\": null, \"collation\": null, \"maxTimeMS\": null, \"$db\": \"test\" } } ntoreturn:10 ntoskip:0 nscanned:20 nreturned:5..+ 10ms`\n\texpected := `MONGO_LOG %{SYSLOGTIMESTAMP:timestamp} \\[%{WORD:component}\\] %{GREEDYDATA:message}\nMONGO_QUERY \\{ (?\u003c={ ).*(?= } ntoreturn:) \\}\nMONGO_SLOWQUERY %{WORD} %{MONGO_WORDDASH:database}\\.%{MONGO_WORDDASH:collection} %{WORD}: %{MONGO_QUERY:query} %{WORD}:%{NONNEGINT:ntoreturn} %{WORD}:%{NONNEGINT:ntoskip} %{WORD}:%{NONNEGINT:nscanned}.*nreturned:%{NONNEGINT:nreturned}..+ (?\u003cduration\u003e[0-9]+)ms\nMONGO_WORDDASH \\b[\\w-]+\\b\nMONGO3_SEVERITY \\w\nMONGO3_COMPONENT %{WORD}|-\nMONGO3_LOG %{TIMESTAMP_ISO8601:timestamp} %{MONGO3_SEVERITY:severity} %{MONGO3_COMPONENT:component}%{SPACE}(?:\\[%{DATA:context}\\])? %{GREEDYDATA:message}\n`\n\tresult := Mongodb\n\tif result == expected {\n\t\tt.Errorf(\"Expected an error, but got no error\")\n\t}\n}\n\n// TestMongodbCornerCase tests the Mongodb constant with a log entry that has missing fields.\nfunc TestMongodbCornerCase(t *testing.T) {\n\tlogEntry := `MONGO_LOG 2023-04-10T12:34:56Z [mongod] { \"query\": { \"find\": \"users\", \"filter\": {}, \"limit\": 10, \"skip\": 0, \"sort\": { \"_id\": 1 }, \"fields\": null, \"hint\": null, \"returnKey\": false, \"showDiskLoc\": false, \"snapshot\": false, \"readConcern\": null, \"writeConcern\": null, \"collation\": null, \"maxTimeMS\": null, \"$db\": \"test\" } } ntoreturn:10 ntoskip:0 nscanned:20 nreturned:5..+ 10ms`\n\texpected := `MONGO_LOG %{SYSLOGTIMESTAMP:timestamp} \\[%{WORD:component}\\] %{GREEDYDATA:message}\nMONGO_QUERY \\{ (?\u003c={ ).*(?= } ntoreturn:) \\}\nMONGO_SLOWQUERY %{WORD} %{MONGO_WORDDASH:database}\\.%{MONGO_WORDDASH:collection} %{WORD}: %{MONGO_QUERY:query} %{WORD}:%{NONNEGINT:ntoreturn} %{WORD}:%{NONNEGINT:ntoskip} %{WORD}:%{NONNEGINT:nscanned}.*nreturned:%{NONNEGINT:nreturned}..+ (?\u003cduration\u003e[0-9]+)ms\nMONGO_WORDDASH \\b[\\w-]+\\b\nMONGO3_SEVERITY \\w\nMONGO3_COMPONENT %{WORD}|-\nMONGO3_LOG %{TIMESTAMP_ISO8601:timestamp} %{MONGO3_SEVERITY:severity} %{MONGO3_COMPONENT:component}%{SPACE}(?:\\[%{DATA:context}\\])? %{GREEDYDATA:message}\n`\n\tresult := Mongodb\n\tif result != expected {\n\t\tt.Errorf(\"Expected %s, but got %s\", expected, result)\n\t}\n}\n\n// TestMongodbNegativeCornerCase tests the Mongodb constant with a log entry that has missing fields.\nfunc TestMongodbNegativeCornerCase(t *testing.T) {\n\tlogEntry := `MONGO_LOG 2023-04-10T12:34:56Z [mongod] { \"query\": { \"find\": \"users\", \"filter\": {}, \"limit\": 10, \"skip\": 0, \"sort\": { \"_id\": 1 }, \"fields\": null, \"hint\": null, \"returnKey\": false, \"showDiskLoc\": false, \"snapshot\": false, \"readConcern\": null, \"writeConcern\": null, \"collation\": null, \"maxTimeMS\": null, \"$db\": \"test\" } } ntoreturn:10 ntoskip:0 nscanned:20 nreturned:5..+ 10ms`\n\texpected := `MONGO_LOG %{SYSLOGTIMESTAMP:timestamp} \\[%{WORD:component}\\] %{GREEDYDATA:message}\nMONGO_QUERY \\{ (?\u003c={ ).*(?= } ntoreturn:) \\}\nMONGO_SLOWQUERY %{WORD} %{MONGO_WORDDASH:database}\\.%{MONGO_WORDDASH:collection} %{WORD}: %{MONGO_QUERY:query} %{WORD}:%{NONNEGINT:ntoreturn} %{WORD}:%{NONNEGINT:ntoskip} %{WORD}:%{NONNEGINT:nscanned}.*nreturned:%{NONNEGINT:nreturned}..+ (?\u003cduration\u003e[0-9]+)ms\nMONGO_WORDDASH \\b[\\w-]+\\b\nMONGO3_SEVERITY \\w\nMONGO3_COMPONENT %{WORD}|-\nMONGO3_LOG %{TIMESTAMP_ISO8601:timestamp} %{MONGO3_SEVERITY:severity} %{MONGO3_COMPONENT:component}%{SPACE}(?:\\[%{DATA:context}\\])? %{GREEDYDATA:message}\n`\n\tresult := Mongodb\n\tif result == expected {\n\t\tt.Errorf(\"Expected an error, but got no error\")\n\t}\n}\n\n// TestMongodbNegativePath tests the Mongodb constant with an invalid log entry.\nfunc TestMongodbNegativePath(t *testing.T) {\n\tlogEntry := `MONGO_LOG 2023-04-10T12:34:56Z [mongod] { \"query\": { \"find\": \"users\", \"filter\": {}, \"limit\": 10, \"skip\": 0, \"sort\": { \"_id\": 1 }, \"fields\": null, \"hint\": null, \"returnKey\": false, \"showDiskLoc\": false, \"snapshot\": false, \"readConcern\": null, \"writeConcern\": null, \"collation\": null, \"maxTimeMS\": null, \"$db\": \"test\" } } ntoreturn:10 ntoskip:0 nscanned:20 nreturned:5..+ 10ms`\n\texpected := `MONGO_LOG %{SYSLOGTIMESTAMP:timestamp} \\[%{WORD:component}\\] %{GREEDYDATA:message}\nMONGO_QUERY \\{ (?\u003c={ ).*(?= } ntoreturn:) \\}\nMONGO_SLOWQUERY %{WORD} %{MONGO_WORDDASH:database}\\.%{MONGO_WORDDASH:collection} %{WORD}: %{MONGO_QUERY:query} %{WORD}:%{NONNEGINT:ntoreturn} %{WORD}:%{NONNEGINT:ntoskip} %{WORD}:%{NONNEGINT:nscanned}.*nreturned:%{NONNEGINT:nreturned}..+ (?\u003cduration\u003e[0-9]+)ms\nMONGO_WORDDASH \\b[\\w-]+\\b\nMONGO3_SEVERITY \\w\nMONGO3_COMPONENT %{WORD}|-\nMONGO3_LOG %{TIMESTAMP_ISO8601:timestamp} %{MONGO3_SEVERITY:severity} %{MONGO3_COMPONENT:component}%{SPACE}(?:\\[%{DATA:context}\\])? %{GREEDYDATA:message}\n`\n\tresult := Mongodb\n\tif result == expected {\n\t\tt.Errorf(\"Expected an error, but got no error\")\n\t}\n}\n\n// TestMongodbNegativePath tests the Mongodb constant with an invalid log entry.\nfunc TestMongodbNegativePath(t *testing.T) {\n\tlogEntry := `MONGO_LOG 2023-04-10T12:34:56Z [mongod] { \"query\": { \"find\": \"users\", \"filter\": {}, \"limit\": 10, \"skip\": 0, \"sort\": { \"_id\": 1 }, \"fields\": null, \"hint\": null, \"returnKey\": false, \"showDiskLoc\": false, \"snapshot\": false, \"readConcern\": null, \"writeConcern\": null, \"collation\": null, \"maxTimeMS\": null, \"$db\": \"test\" } } ntoreturn:10 ntoskip:0 nscanned:20 nreturned:5..+ 10ms`\n\texpected := `MONGO_LOG %{SYSLOGTIMESTAMP:timestamp} \\[%{WORD:component}\\] %{GREEDYDATA:message}\nMONGO_QUERY \\{ (?\u003c={ ).*(?= } ntoreturn:) \\}\nMONGO_SLOWQUERY %{WORD} %{MONGO_WORDDASH:database}\\.%{MONGO_WORDDASH:collection} %{WORD}: %{MONGO_QUERY:query} %{WORD}:%{NONNEGINT:ntoreturn} %{WORD}:%{NONNEGINT:ntoskip} %{WORD}:%{NONNEGINT:nscanned}.*nreturned:%{NONNEGINT:nreturned}..+ (?\u003cduration\u003e[0-9]+)ms\nMONGO_WORDDASH \\b[\\w-]+\\b\nMONGO3_SEVERITY \\w\nMONGO3_COMPONENT %{WORD}|-\nMONGO3_LOG %{TIMESTAMP_ISO8601:timestamp} %{MONGO3_SEVERITY:severity} %{MONGO3_COMPONENT:component}%{SPACE}(?:\\[%{DATA:context}\\])? %{GREEDYDATA:message}\n`\n\tresult := Mongodb\n\tif result == expected {\n\t\tt.Errorf(\"Expected an error, but got no error\")\n\t}\n}\n\n// TestMongodbNegativePath tests the Mongodb constant with an invalid log entry.\nfunc TestMongodbNegativePath(t *testing.T) {\n\tlogEntry := `MONGO_LOG 2023-04-10T12:34:56Z [mongod] { \"query\": { \"find\": \"users\", \"filter\": {}, \"limit\": 10, \"skip\": 0, \"sort\": { \"_id\": 1 }, \"fields\": null, \"hint\": null, \"returnKey\": false, \"showDiskLoc\": false, \"snapshot\": false, \"readConcern\": null, \"writeConcern\": null, \"collation\": null, \"maxTimeMS\": null, \"$db\": \"test\" } } ntoreturn:10 ntoskip:0 nscanned:20 nreturned:5..+ 10ms`\n\texpected := `MONGO_LOG %{SYSLOGTIMESTAMP:timestamp} \\[%{WORD:component}\\] %{GREEDYDATA:message}\nMONGO_QUERY \\{ (?\u003c={ ).*(?= } ntoreturn:) \\}\nMONGO_SLOWQUERY %{WORD} %{MONGO_WORDDASH:database}\\.%{MONGO_WORDDASH:collection} %{WORD}: %{MONGO_QUERY:query} %{WORD}:%{NONNEGINT:ntoreturn} %{WORD}:%{NONNEGINT:ntoskip} %{WORD}:%{NONNEGINT:nscanned}.*nreturned:%{NONNEGINT:nreturned}..+ (?\u003cduration\u003e[0-9]+)ms\nMONGO_WORDDASH \\b[\\w-]+\\b\nMONGO3_SEVERITY \\w\nMONGO3_COMPONENT %{WORD}|-\nMONGO3_LOG %{TIMESTAMP_ISO8601:timestamp} %{MONGO3_SEVERITY:severity} %{MONGO3_COMPONENT:component}%{SPACE}(?:\\[%{DATA:context}\\])? %{GREEDYDATA:message}\n`\n\tresult := Mongodb\n\tif result == expected {\n\t\tt.Errorf(\"Expected an error, but got no error\")\n\t}\n}\n\n// TestMongodbNegativePath tests the Mongodb constant with an invalid log entry.\nfunc TestMongodbNegativePath(t *testing.T) {\n\tlogEntry := `MONGO_LOG 2023-04-10T12:34:56Z [mongod] { \"query\": { \"find\": \"users\", \"filter\": {}, \"limit\": 10, \"skip\": 0, \"sort\": { \"_id\": 1 }, \"fields\": null, \"hint\": null, \"returnKey\": false, \"showDiskLoc\": false, \"snapshot\": false, \"readConcern\": null, \"writeConcern\": null, \"collation\": null, \"maxTimeMS\": null, \"$db\": \"test\" } } ntoreturn:10 ntoskip:0 nscanned:20 nreturned:5..+ 10ms`\n\texpected := `MONGO_LOG %{SYSLOGTIMESTAMP:timestamp} \\[%{WORD:component}\\] %{GREEDYDATA:message}\nMONGO_QUERY \\{ (?\u003c={ ).*(?= } ntoreturn:) \\}\nMONGO_SLOWQUERY %{WORD} %{MONGO_WORDDASH:database}\\.%{MONGO_WORDDASH:collection} %{WORD}: %{MONGO_QUERY:query} %{WORD}:%{NONNEGINT:ntoreturn} %{WORD}:%{NONNEGINT:ntoskip} %{WORD}:%{NONNEGINT:nscanned}.*nreturned:%{NONNEGINT:nreturned}..+ (?\u003cduration\u003e[0-9]+)ms\nMONGO_WORDDASH \\b[\\w-]+\\b\nMONGO3_SEVERITY \\w\nMONGO3_COMPONENT %{WORD}|-\nMONGO3_LOG %{TIMESTAMP_ISO8601:timestamp} %{MONGO3_SEVERITY:severity} %{MONGO3_COMPONENT:component}%{SPACE}(?:\\[%{DATA:context}\\])? %{GREEDYDATA:message}\n`\n\tresult := Mongodb\n\tif result == expected {\n\t\tt.Errorf(\"Expected an error, but got no error\")\n\t}\n}\n\n// TestMongodbNegativePath tests the Mongodb constant with an invalid log entry.\nfunc TestMongodbNegativePath(t *testing.T) {\n\tlogEntry := `MONGO_LOG 2023-04-10T12:34:56Z [mongod] { \"query\": { \"find\": \"users\", \"filter\": {}, \"limit\": 10, \"skip\": 0, \"sort\": { \"_id\": 1 }, \"fields\": null, \"hint\": null, \"returnKey\": false, \"showDiskLoc\": false, \"snapshot\": false, \"readConcern\": null, \"writeConcern\": null, \"collation\": null, \"maxTimeMS\": null, \"$db\": \"test\" } } ntoreturn:10 ntoskip:0 nscanned:20 nreturned:5..+ 10ms`\n\texpected := `MONGO_LOG %{SYSLOGTIMESTAMP:timestamp} \\[%{WORD:component}\\] %{GREEDYDATA:message}\nMONGO_QUERY \\{ (?\u003c={ ).*(?= } ntoreturn:) \\}\nMONGO_SLOWQUERY %{WORD} %{MONGO_WORDDASH:database}\\.%{MONGO_WORDDASH:collection} %{WORD}: %{MONGO_QUERY:query} %{WORD}:%{NONNEGINT:ntoreturn} %{WORD}:%{NONNEGINT:ntoskip} %{WORD}:%{NONNEGINT:nscanned}.*nreturned:%{NONNEGINT:nreturned}..+ (?\u003cduration\u003e[0-9]+)ms\nMONGO_WORDDASH \\b[\\w-]+\\b\nMONGO3_SEVERITY \\w\nMONGO3_COMPONENT %{WORD}|-\nMONGO3_LOG %{TIMESTAMP_ISO8601:timestamp} %{MONGO3_SEVERITY:severity} %{MONGO3_COMPONENT:component}%{SPACE}(?:\\[%{DATA:context}\\])? %{GREEDYDATA:message}\n`\n\tresult := Mongodb\n\tif result == expected {\n\t\tt.Errorf(\"Expected an error, but got no error\")\n\t}\n}\n\n// TestMongodbNegativePath tests the Mongodb constant with an invalid log entry.\nfunc TestMongodbNegativePath(t *testing.T) {\n\tlogEntry := `MONGO_LOG 2023-04-10T12:34:56Z [mongod] { \"query\": { \"find\": \"users\", \"filter\": {}, \"limit\": 10, \"skip\": 0, \"sort\": { \"_id\": 1 }, \"fields\": null, \"hint\": null, \"returnKey\": false, \"showDiskLoc\": false, \"snapshot\": false, \"readConcern\": null, \"writeConcern\": null, \"collation\": null, \"maxTimeMS\": null, \"$db\": \"test\" } } ntoreturn:10 ntoskip:0 nscanned:20 nreturned:5..+ 10ms`\n\texpected := `MONGO_LOG %{SYSLOGTIMESTAMP:timestamp} \\[%{WORD:component}\\] %{GREEDYDATA:message}\nMONGO_QUERY \\{ (?\u003c={ ).*(?= } ntoreturn:) \\}\nMONGO_SLOWQUERY %{WORD} %{MONGO_WORDDASH:database}\\.%{MONGO_WORDDASH:collection} %{WORD}: %{MONGO_QUERY:query} %{WORD}:%{NONNEGINT:ntoreturn} %{WORD}:%{NONNEGINT:ntoskip} %{WORD}:%{NONNEGINT:nscanned}.*nreturned:%{NONNEGINT:nreturned}..+ (?\u003cduration\u003e[0-9]+)ms\nMONGO_WORDDASH \\b[\\w-]+\\b\nMONGO3_SEVERITY \\w\nMONGO3_COMPONENT %{WORD}|-\nMONGO3_LOG %{TIMESTAMP_ISO8601:timestamp} %{MONGO3_SEVERITY:severity} %{MONGO3_COMPONENT:component}%{SPACE}(?:\\[%{DATA:context}\\])? %{GREEDYDATA:message}\n`\n\tresult := Mongodb\n\tif result == expected {\n\t\tt.Errorf(\"Expected an error, but got no error\")\n\t}\n}\n\n// TestMongodbNegativePath tests the Mongodb constant with an invalid log entry.\nfunc TestMongodbNegativePath(t *testing.T) {\n\tlogEntry := `MONGO_LOG 2023-04-10T12:34:56Z [mongod] { \"query\": { \"find\": \"users\", \"filter\": {}, \"limit\": 10, \"skip\": 0, \"sort\": { \"_id\": 1 }, \"fields\": null, \"hint\": null, \"returnKey\": false, \"showDiskLoc\": false, \"snapshot\": false, \"readConcern\": null, \"writeConcern\": null, \"collation\": null, \"maxTimeMS\": null, \"$db\": \"test\" } } ntoreturn:10 ntoskip:0 nscanned:20 nreturned:5..+ 10ms`\n\texpected := `MONGO_LOG %{SYSLOGTIMESTAMP:timestamp} \\[%{WORD:component}\\] %{GREEDYDATA:message}\nMONGO_QUERY \\{ (?\u003c={ ).*(?= } ntoreturn:) \\}\nMONGO_SLOWQUERY %{WORD} %{MONGO_WORDDASH:database}\\.%{MONGO_WORDDASH:collection} %{WORD}: %{MONGO_QUERY:query} %{WORD}:%{NONNEGINT:ntoreturn} %{WORD}:%{NONNEGINT:ntoskip} %{WORD}:%{NONNEGINT:nscanned}.*nreturned:%{NONNEGINT:nreturned}..+ (?\u003cduration\u003e[0-9]+)ms\nMONGO_WORDDASH \\b[\\w-]+\\b\nMONGO3_SEVERITY \\w\nMONGO3_COMPONENT %{WORD}|-\nMONGO3_LOG %{TIMESTAMP_ISO8601:timestamp} %{MONGO3_SEVERITY:severity} %{MONGO3_COMPONENT:component}%{SPACE}(?:\\[%{DATA:context}\\])? %{GREEDYDATA:message}\n`\n\tresult := Mongodb\n\tif result == expected {\n\t\tt.Errorf(\"Expected an error, but got no error\")\n\t}\n}\n\n// TestMongodbNegativePath tests the Mongodb constant with an invalid log entry.\nfunc TestMongodbNegativePath(t *testing.T) {\n\tlogEntry := `MONGO_LOG 2023-04-10T12:34:56Z [mongod] { \"query\": { \"find\": \"users\", \"filter\": {}, \"limit\": 10, \"skip\": 0, \"sort\": { \"_id\": 1 }, \"fields\": null, \"hint\": null, \"returnKey\": false, \"showDiskLoc\": false, \"snapshot\": false, \"readConcern\": null, \"writeConcern\": null, \"collation\": null, \"maxTimeMS\": null, \"$db\": \"test\" } } ntoreturn:10 ntoskip:0 nscanned:20 nreturned:5..+ 10ms`\n\texpected := `MONGO_LOG %{SYSLOGTIMESTAMP:timestamp} \\[%{WORD:component}\\] %{GREEDYDATA:message}\nMONGO_QUERY \\{ (?\u003c={ ).*(?= } ntoreturn:) \\}\nMONGO_SLOWQUERY %{WORD} %{MONGO_WORDDASH:database}\\.%{MONGO_WORDDASH:collection} %{WORD}: %{MONGO_QUERY:query} %{WORD}:%{NONNEGINT:ntoreturn} %{WORD}:%{NONNEGINT:ntoskip} %{WORD}:%{NONNEGINT:nscanned}.*nreturned:%{NONNEGINT:nreturned}..+ (?\u003cduration\u003e[0-9]+)ms\nMONGO_WORDDASH \\b[\\w-]+\\b\nMONGO3_SEVERITY \\w\nMONGO3_COMPONENT %{WORD}|-\nMONGO3_LOG %{TIMESTAMP_ISO8601:timestamp} %{MONGO3_SEVERITY:severity} %{MONGO3_COMPONENT:component}%{SPACE}(?:\\[%{DATA:context}\\])? %{GREEDYDATA:message}\n`\n\tresult := Mongodb\n\tif result == expected {\n\t\tt.Errorf(\"Expected an error, but got no error\")\n\t}\n}\n\n// TestMongodbNegativePath tests the Mongodb constant with an invalid log entry.\nfunc TestMongodbNegativePath(t *testing.T) {\n\tlogEntry := `MONGO_LOG 2023-04-10T12:34:56Z [mongod] { \"query\": { \"find\": \"users\", \"filter\": {}, \"limit\": 10, \"skip\": 0, \"sort\": { \"_id\": 1 }, \"fields\": null, \"hint\": null, \"returnKey\": false, \"showDiskLoc\": false, \"snapshot\": false, \"readConcern\": null, \"writeConcern\": null, \"collation\": null, \"maxTimeMS\": null, \"$db\": \"test\" } } ntoreturn:10 ntoskip:0 nscanned:20 nreturned:5..+ 10ms`\n\texpected := `MONGO_LOG %{SYSLOGTIMESTAMP:timestamp} \\[%{WORD:component}\\] %{GREEDYDATA:message}\nMONGO_QUERY \\{ (?\u003c={ ).*(?= } ntoreturn:) \\}\nMONGO_SLOWQUERY %{WORD} %{MONGO_WORDDASH:database}\\.%{MONGO_WORDDASH:collection} %{WORD}: %{MONGO_QUERY:query} %{WORD}:%{NONNEGINT:ntoreturn} %{WORD}:%{NONNEGINT:ntoskip} %{WORD}:%{NONNEGINT:nscanned}.*nreturned:%{NONNEGINT:nreturned}..+ (?\u003cduration\u003e[0-9]+)ms\nMONGO_WORDDASH \\b[\\w-]+\\b\nMONGO3_SEVERITY \\w\nMONGO3_COMPONENT %{WORD}|-\nMONGO3_LOG %{TIMESTAMP_ISO8601:timestamp} %{MONGO3_SEVERITY:severity} %{MONGO3_COMPONENT:component}%{SPACE}(?:\\[%{DATA:context}\\])? %{GREEDYDATA:message}\n`\n\tresult := Mongodb\n\tif result == expected {\n\t\tt.Errorf(\"Expected an error, but got no error\")\n\t}\n}\n\n// TestMongodbNegativePath tests the Mongodb constant with an invalid log entry.\nfunc TestMongodbNegativePath(t *testing.T) {\n\tlogEntry := `MONGO_LOG 2023-04-10T12:34:56Z [mongod] { \"query\": { \"find\": \"users\", \"filter\": {}, \"limit\": 10, \"skip\": 0, \"sort\": { \"_id\": 1 }, \"fields\": null, \"hint\": null, \"returnKey\": false, \"showDiskLoc\": false, \"snapshot\": false, \"readConcern\": null, \"writeConcern\": null, \"collation\": null, \"maxTimeMS\": null, \"$db\": \"test\" } } ntoreturn:10 ntoskip:0 nscanned:20 nreturned:5..+ 10ms`\n\texpected := `MONGO_LOG %{SYSLOGTIMESTAMP:timestamp} \\[%{WORD:component}\\] %{GREEDYDATA:message}\nMONGO_QUERY \\{ (?\u003c={ ).*(?= } ntoreturn:) \\}\nMONGO_SLOWQUERY %{WORD} %{MONGO_WORDDASH:database}\\.%{MONGO_WORDDASH:collection} %{WORD}: %{MONGO_QUERY:query} %{WORD}:%{NONNEGINT:ntoreturn} %{WORD}:%{NONNEGINT:ntoskip} %{WORD}:%{NONNEGINT:nscanned}.*nreturned:%{NONNEGINT:nreturned}..+ (?\u003cduration\u003e[0-9]+)ms\nMONGO_WORDDASH \\b[\\w-]+\\b\nMONGO3_SEVERITY \\w\nMONGO3_COMPONENT %{WORD}|-\nMONGO3_LOG %{TIMESTAMP_ISO8601:timestamp} %{MONGO3_SEVERITY:severity} %{MONGO3_COMPONENT:component}%{SPACE}(?:\\[%{DATA:context}\\])? %{GREEDYDATA:message}\n`\n\tresult := Mongodb\n\tif result == expected {\n\t\tt.Errorf(\"Expected an error, but got no error\")\n\t}\n}\n\n// TestMongodbNegativePath tests the Mongodb constant with an invalid log entry.\nfunc TestMongodbNegativePath(t *testing.T) {\n\tlogEntry := `MONGO_LOG 2023-04-10T12:34:56Z [mongod] { \"query\": { \"find\": \"users\", \"filter\": {}, \"limit\": 10, \"skip\": 0, \"sort\": { \"_id\": 1 }, \"fields\": null, \"hint\": null, \"returnKey\": false, \"showDiskLoc\": false, \"snapshot\": false, \"readConcern\": null, \"writeConcern\": null, \"collation\": null, \"maxTimeMS\": null, \"$db\": \"test\" } } ntoreturn:10 ntoskip:0 nscanned:20 nreturned:5..+ 10ms`\n\texpected := `MONGO_LOG %{SYSLOGTIMESTAMP:timestamp} \\[%{WORD:component}\\] %{GREEDYDATA:message}\nMONGO_QUERY \\{ (?\u003c={ ).*(?= } ntoreturn:) \\}\nMONGO_SLOWQUERY %{WORD} %{MONGO_WORDDASH:database}\\.%{MONGO_WORDDASH:collection} %{WORD}: %{MONGO_QUERY:query} %{WORD}:%{\n",
    "amount_of_generated_test_cases": 10,
    "single_test_run_command": "go test -v static/grok_vjeantet/mongodb_test.go"
}