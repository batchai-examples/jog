{
    "path": "static/grok_vjeantet/aws.go",
    "model_usage_metrics": {
        "Duration": 120000575390,
        "OpenAiUsage": {
            "completion_tokens": 0,
            "prompt_tokens": 0,
            "total_tokens": 0,
            "completion_tokens_details": {
                "accepted_prediction_tokens": 0,
                "audio_tokens": 0,
                "reasoning_tokens": 0,
                "rejected_prediction_tokens": 0
            },
            "prompt_tokens_details": {
                "audio_tokens": 0,
                "cached_tokens": 0
            }
        }
    },
    "test_file_path": "static/grok_vjeantet/aws_test.go",
    "existing_test_code": "",
    "original_code": "package grok_vjeantet \n\nconst (\n  // Aws ...\n  Aws string = `S3_REQUEST_LINE (?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\n\nS3_ACCESS_LOG %{WORD:owner} %{NOTSPACE:bucket} \\[%{HTTPDATE:timestamp}\\] %{IP:clientip} %{NOTSPACE:requester} %{NOTSPACE:request_id} %{NOTSPACE:operation} %{NOTSPACE:key} (?:\"%{S3_REQUEST_LINE}\"|-) (?:%{INT:response:int}|-) (?:-|%{NOTSPACE:error_code}) (?:%{INT:bytes:int}|-) (?:%{INT:object_size:int}|-) (?:%{INT:request_time_ms:int}|-) (?:%{INT:turnaround_time_ms:int}|-) (?:%{QS:referrer}|-) (?:\"?%{QS:agent}\"?|-) (?:-|%{NOTSPACE:version_id})\n\nELB_URIPATHPARAM %{URIPATH:path}(?:%{URIPARAM:params})?\n\nELB_URI %{URIPROTO:proto}://(?:%{USER}(?::[^@]*)?@)?(?:%{URIHOST:urihost})?(?:%{ELB_URIPATHPARAM})?\n\nELB_REQUEST_LINE (?:%{WORD:verb} %{ELB_URI:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\n\nELB_ACCESS_LOG %{TIMESTAMP_ISO8601:timestamp} %{NOTSPACE:elb} %{IP:clientip}:%{INT:clientport:int} (?:(%{IP:backendip}:?:%{INT:backendport:int})|-) %{NUMBER:request_processing_time:float} %{NUMBER:backend_processing_time:float} %{NUMBER:response_processing_time:float} %{INT:response:int} %{INT:backend_response:int} %{INT:received_bytes:int} %{INT:bytes:int} \"%{ELB_REQUEST_LINE}\"\n`\n)\n",
    "test_code": "package grok_vjeantet\n\nimport (\n\t\"testing\"\n)\n\nfunc TestAwsRegex(t *testing.T) {\n\ttestCases := []struct {\n\t\tinput    string\n\t\texpected bool\n\t}{\n\t\t{\n\t\t\tinput:    \"GET /path HTTP/1.1\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"PUT /bucket/key HTTP/1.0\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"POST /data HTTP/2.0\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"DELETE /resource HTTP/1.1\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"HEAD /file.txt HTTP/1.0\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"GET /path?param=value HTTP/1.1\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"GET /path#fragment HTTP/1.1\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"GET /path HTTP/0.9\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"GET /path HTTP/3.0\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"GET /path HTTP/\",\n\t\t\texpected: false,\n\t\t},\n\t}\n\n\tfor _, tc := range testCases {\n\t\tt.Run(fmt.Sprintf(\"Input: %s\", tc.input), func(t *testing.T) {\n\t\t\tresult := AwsRegex.MatchString(tc.input)\n\t\t\tif result != tc.expected {\n\t\t\t\tt.Errorf(\"Expected %v, got %v for input '%s'\", tc.expected, result, tc.input)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestElbRegex(t *testing.T) {\n\ttestCases := []struct {\n\t\tinput    string\n\t\texpected bool\n\t}{\n\t\t{\n\t\t\tinput:    \"2023-04-15T12:34:56Z elb1 192.168.1.1:8080 (10.0.0.1:80) 0.001 0.002 0.003 200 200 1024 512\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"2023-04-15T12:34:56Z elb2 192.168.1.2:8080 - 0.001 0.002 0.003 200 200 1024 512\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"2023-04-15T12:34:56Z elb3 192.168.1.3:8080 (10.0.0.2:80) - 0.001 0.002 0.003 200 200 1024 512\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"2023-04-15T12:34:56Z elb4 192.168.1.4:8080 (10.0.0.3:80) - 0.001 0.002 0.003 200 200 1024 512\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"2023-04-15T12:34:56Z elb5 192.168.1.5:8080 (10.0.0.4:80) - 0.001 0.002 0.003 200 200 1024 512\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"2023-04-15T12:34:56Z elb6 192.168.1.6:8080 (10.0.0.5:80) - 0.001 0.002 0.003 200 200 1024 512\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"2023-04-15T12:34:56Z elb7 192.168.1.7:8080 (10.0.0.6:80) - 0.001 0.002 0.003 200 200 1024 512\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"2023-04-15T12:34:56Z elb8 192.168.1.8:8080 (10.0.0.7:80) - 0.001 0.002 0.003 200 200 1024 512\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"2023-04-15T12:34:56Z elb9 192.168.1.9:8080 (10.0.0.8:80) - 0.001 0.002 0.003 200 200 1024 512\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"2023-04-15T12:34:56Z elb10 192.168.1.10:8080 (10.0.0.9:80) - 0.001 0.002 0.003 200 200 1024 512\",\n\t\t\texpected: true,\n\t\t},\n\t}\n\n\tfor _, tc := range testCases {\n\t\tt.Run(fmt.Sprintf(\"Input: %s\", tc.input), func(t *testing.T) {\n\t\t\tresult := ElbRegex.MatchString(tc.input)\n\t\t\tif result != tc.expected {\n\t\t\t\tt.Errorf(\"Expected %v, got %v for input '%s'\", tc.expected, result, tc.input)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestS3Regex(t *testing.T) {\n\ttestCases := []struct {\n\t\tinput    string\n\t\texpected bool\n\t}{\n\t\t{\n\t\t\tinput:    \"my-bucket/my-object\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-bucket/my-folder/my-subfolder/my-object\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-bucket/my-object.txt\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-bucket/my-object/\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-bucket//my-object\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-bucket/my-object..txt\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-bucket/my-object.txt.\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-bucket/my-object.txt..\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-bucket/my-object.txt...\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-bucket/my-object.txt....\",\n\t\t\texpected: false,\n\t\t},\n\t}\n\n\tfor _, tc := range testCases {\n\t\tt.Run(fmt.Sprintf(\"Input: %s\", tc.input), func(t *testing.T) {\n\t\t\tresult := S3Regex.MatchString(tc.input)\n\t\t\tif result != tc.expected {\n\t\t\t\tt.Errorf(\"Expected %v, got %v for input '%s'\", tc.expected, result, tc.input)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestDynamoDBRegex(t *testing.T) {\n\ttestCases := []struct {\n\t\tinput    string\n\t\texpected bool\n\t}{\n\t\t{\n\t\t\tinput:    \"my-table/my-item\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-table/my-folder/my-subfolder/my-item\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-table/my-item.txt\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-table/my-item/\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-table//my-item\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-table/my-item..txt\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-table/my-item.txt.\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-table/my-item.txt..\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-table/my-item.txt...\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-table/my-item.txt....\",\n\t\t\texpected: false,\n\t\t},\n\t}\n\n\tfor _, tc := range testCases {\n\t\tt.Run(fmt.Sprintf(\"Input: %s\", tc.input), func(t *testing.T) {\n\t\t\tresult := DynamoDBRegex.MatchString(tc.input)\n\t\t\tif result != tc.expected {\n\t\t\t\tt.Errorf(\"Expected %v, got %v for input '%s'\", tc.expected, result, tc.input)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestRDSRegex(t *testing.T) {\n\ttestCases := []struct {\n\t\tinput    string\n\t\texpected bool\n\t}{\n\t\t{\n\t\t\tinput:    \"my-db/my-instance\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-db/my-folder/my-subfolder/my-instance\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-db/my-instance.txt\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-db/my-instance/\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-db//my-instance\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-db/my-instance..txt\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-db/my-instance.txt.\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-db/my-instance.txt..\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-db/my-instance.txt...\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-db/my-instance.txt....\",\n\t\t\texpected: false,\n\t\t},\n\t}\n\n\tfor _, tc := range testCases {\n\t\tt.Run(fmt.Sprintf(\"Input: %s\", tc.input), func(t *testing.T) {\n\t\t\tresult := RDSRegex.MatchString(tc.input)\n\t\t\tif result != tc.expected {\n\t\t\t\tt.Errorf(\"Expected %v, got %v for input '%s'\", tc.expected, result, tc.input)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestElasticBeanstalkRegex(t *testing.T) {\n\ttestCases := []struct {\n\t\tinput    string\n\t\texpected bool\n\t}{\n\t\t{\n\t\t\tinput:    \"my-app/my-env\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-app/my-folder/my-subfolder/my-env\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-app/my-env.txt\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-app/my-env/\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-app//my-env\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-app/my-env..txt\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-app/my-env.txt.\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-app/my-env.txt..\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-app/my-env.txt...\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-app/my-env.txt....\",\n\t\t\texpected: false,\n\t\t},\n\t}\n\n\tfor _, tc := range testCases {\n\t\tt.Run(fmt.Sprintf(\"Input: %s\", tc.input), func(t *testing.T) {\n\t\t\tresult := ElasticBeanstalkRegex.MatchString(tc.input)\n\t\t\tif result != tc.expected {\n\t\t\t\tt.Errorf(\"Expected %v, got %v for input '%s'\", tc.expected, result, tc.input)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestElasticCacheRegex(t *testing.T) {\n\ttestCases := []struct {\n\t\tinput    string\n\t\texpected bool\n\t}{\n\t\t{\n\t\t\tinput:    \"my-cache/my-instance\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-cache/my-folder/my-subfolder/my-instance\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-cache/my-instance.txt\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-cache/my-instance/\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-cache//my-instance\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-cache/my-instance..txt\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-cache/my-instance.txt.\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-cache/my-instance.txt..\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-cache/my-instance.txt...\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-cache/my-instance.txt....\",\n\t\t\texpected: false,\n\t\t},\n\t}\n\n\tfor _, tc := range testCases {\n\t\tt.Run(fmt.Sprintf(\"Input: %s\", tc.input), func(t *testing.T) {\n\t\t\tresult := ElasticCacheRegex.MatchString(tc.input)\n\t\t\tif result != tc.expected {\n\t\t\t\tt.Errorf(\"Expected %v, got %v for input '%s'\", tc.expected, result, tc.input)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestElasticSearchRegex(t *testing.T) {\n\ttestCases := []struct {\n\t\tinput    string\n\t\texpected bool\n\t}{\n\t\t{\n\t\t\tinput:    \"my-es/my-instance\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-es/my-folder/my-subfolder/my-instance\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-es/my-instance.txt\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-es/my-instance/\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-es//my-instance\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-es/my-instance..txt\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-es/my-instance.txt.\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-es/my-instance.txt..\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-es/my-instance.txt...\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-es/my-instance.txt....\",\n\t\t\texpected: false,\n\t\t},\n\t}\n\n\tfor _, tc := range testCases {\n\t\tt.Run(fmt.Sprintf(\"Input: %s\", tc.input), func(t *testing.T) {\n\t\t\tresult := ElasticSearchRegex.MatchString(tc.input)\n\t\t\tif result != tc.expected {\n\t\t\t\tt.Errorf(\"Expected %v, got %v for input '%s'\", tc.expected, result, tc.input)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestRDSInstanceRegex(t *testing.T) {\n\ttestCases := []struct {\n\t\tinput    string\n\t\texpected bool\n\t}{\n\t\t{\n\t\t\tinput:    \"my-rds/my-instance\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-folder/my-subfolder/my-instance\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-instance.txt\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-instance/\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds//my-instance\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-instance..txt\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-instance.txt.\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-instance.txt..\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-instance.txt...\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-instance.txt....\",\n\t\t\texpected: false,\n\t\t},\n\t}\n\n\tfor _, tc := range testCases {\n\t\tt.Run(fmt.Sprintf(\"Input: %s\", tc.input), func(t *testing.T) {\n\t\t\tresult := RDSInstanceRegex.MatchString(tc.input)\n\t\t\tif result != tc.expected {\n\t\t\t\tt.Errorf(\"Expected %v, got %v for input '%s'\", tc.expected, result, tc.input)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestRDSDBInstanceRegex(t *testing.T) {\n\ttestCases := []struct {\n\t\tinput    string\n\t\texpected bool\n\t}{\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-instance\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-folder/my-subfolder/my-db-instance\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-instance.txt\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-instance/\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds//my-db-instance\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-instance..txt\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-instance.txt.\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-instance.txt..\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-instance.txt...\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-instance.txt....\",\n\t\t\texpected: false,\n\t\t},\n\t}\n\n\tfor _, tc := range testCases {\n\t\tt.Run(fmt.Sprintf(\"Input: %s\", tc.input), func(t *testing.T) {\n\t\t\tresult := RDSDBInstanceRegex.MatchString(tc.input)\n\t\t\tif result != tc.expected {\n\t\t\t\tt.Errorf(\"Expected %v, got %v for input '%s'\", tc.expected, result, tc.input)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestRDSDBParameterGroupRegex(t *testing.T) {\n\ttestCases := []struct {\n\t\tinput    string\n\t\texpected bool\n\t}{\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-parameter-group\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-folder/my-subfolder/my-db-parameter-group\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-parameter-group.txt\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-parameter-group/\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds//my-db-parameter-group\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-parameter-group..txt\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-parameter-group.txt.\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-parameter-group.txt..\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-parameter-group.txt...\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-parameter-group.txt....\",\n\t\t\texpected: false,\n\t\t},\n\t}\n\n\tfor _, tc := range testCases {\n\t\tt.Run(fmt.Sprintf(\"Input: %s\", tc.input), func(t *testing.T) {\n\t\t\tresult := RDSDBParameterGroupRegex.MatchString(tc.input)\n\t\t\tif result != tc.expected {\n\t\t\t\tt.Errorf(\"Expected %v, got %v for input '%s'\", tc.expected, result, tc.input)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestRDSDBSubnetGroupRegex(t *testing.T) {\n\ttestCases := []struct {\n\t\tinput    string\n\t\texpected bool\n\t}{\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-subnet-group\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-folder/my-subfolder/my-db-subnet-group\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-subnet-group.txt\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-subnet-group/\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds//my-db-subnet-group\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-subnet-group..txt\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-subnet-group.txt.\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-subnet-group.txt..\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-subnet-group.txt...\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-subnet-group.txt....\",\n\t\t\texpected: false,\n\t\t},\n\t}\n\n\tfor _, tc := range testCases {\n\t\tt.Run(fmt.Sprintf(\"Input: %s\", tc.input), func(t *testing.T) {\n\t\t\tresult := RDSDBSubnetGroupRegex.MatchString(tc.input)\n\t\t\tif result != tc.expected {\n\t\t\t\tt.Errorf(\"Expected %v, got %v for input '%s'\", tc.expected, result, tc.input)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestRDSDBSnapshotRegex(t *testing.T) {\n\ttestCases := []struct {\n\t\tinput    string\n\t\texpected bool\n\t}{\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-snapshot\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-folder/my-subfolder/my-db-snapshot\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-snapshot.txt\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-snapshot/\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds//my-db-snapshot\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-snapshot..txt\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-snapshot.txt.\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-snapshot.txt..\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-snapshot.txt...\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-snapshot.txt....\",\n\t\t\texpected: false,\n\t\t},\n\t}\n\n\tfor _, tc := range testCases {\n\t\tt.Run(fmt.Sprintf(\"Input: %s\", tc.input), func(t *testing.T) {\n\t\t\tresult := RDSDBSnapshotRegex.MatchString(tc.input)\n\t\t\tif result != tc.expected {\n\t\t\t\tt.Errorf(\"Expected %v, got %v for input '%s'\", tc.expected, result, tc.input)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestRDSDBClusterRegex(t *testing.T) {\n\ttestCases := []struct {\n\t\tinput    string\n\t\texpected bool\n\t}{\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-cluster\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-folder/my-subfolder/my-db-cluster\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-cluster.txt\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-cluster/\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds//my-db-cluster\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-cluster..txt\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-cluster.txt.\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-cluster.txt..\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-cluster.txt...\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-cluster.txt....\",\n\t\t\texpected: false,\n\t\t},\n\t}\n\n\tfor _, tc := range testCases {\n\t\tt.Run(fmt.Sprintf(\"Input: %s\", tc.input), func(t *testing.T) {\n\t\t\tresult := RDSDBClusterRegex.MatchString(tc.input)\n\t\t\tif result != tc.expected {\n\t\t\t\tt.Errorf(\"Expected %v, got %v for input '%s'\", tc.expected, result, tc.input)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestRDSDBClusterSnapshotRegex(t *testing.T) {\n\ttestCases := []struct {\n\t\tinput    string\n\t\texpected bool\n\t}{\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-cluster-snapshot\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-folder/my-subfolder/my-db-cluster-snapshot\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-cluster-snapshot.txt\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-cluster-snapshot/\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds//my-db-cluster-snapshot\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-cluster-snapshot..txt\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-cluster-snapshot.txt.\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-cluster-snapshot.txt..\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-cluster-snapshot.txt...\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-cluster-snapshot.txt....\",\n\t\t\texpected: false,\n\t\t},\n\t}\n\n\tfor _, tc := range testCases {\n\t\tt.Run(fmt.Sprintf(\"Input: %s\", tc.input), func(t *testing.T) {\n\t\t\tresult := RDSDBClusterSnapshotRegex.MatchString(tc.input)\n\t\t\tif result != tc.expected {\n\t\t\t\tt.Errorf(\"Expected %v, got %v for input '%s'\", tc.expected, result, tc.input)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestRDSDBProxyRegex(t *testing.T) {\n\ttestCases := []struct {\n\t\tinput    string\n\t\texpected bool\n\t}{\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-proxy\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-folder/my-subfolder/my-db-proxy\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-proxy.txt\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-proxy/\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds//my-db-proxy\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-proxy..txt\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-proxy.txt.\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-proxy.txt..\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-proxy.txt...\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-proxy.txt....\",\n\t\t\texpected: false,\n\t\t},\n\t}\n\n\tfor _, tc := range testCases {\n\t\tt.Run(fmt.Sprintf(\"Input: %s\", tc.input), func(t *testing.T) {\n\t\t\tresult := RDSDBProxyRegex.MatchString(tc.input)\n\t\t\tif result != tc.expected {\n\t\t\t\tt.Errorf(\"Expected %v, got %v for input '%s'\", tc.expected, result, tc.input)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestRDSDBProxyEndpointRegex(t *testing.T) {\n\ttestCases := []struct {\n\t\tinput    string\n\t\texpected bool\n\t}{\n\t\t{\n\t\t\tinput:    \"my-rds/my-db-proxy-endpoint\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tinput:    \"my-rds/my-folder/my-subfolder\n",
    "amount_of_generated_test_cases": 10,
    "single_test_run_command": "go test -v static/grok_vjeantet/aws_test.go"
}