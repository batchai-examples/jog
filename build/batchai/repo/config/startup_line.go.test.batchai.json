{
    "path": "config/startup_line.go",
    "model_usage_metrics": {
        "Duration": 22655595966,
        "OpenAiUsage": {
            "completion_tokens": 0,
            "prompt_tokens": 0,
            "total_tokens": 0,
            "completion_tokens_details": {
                "accepted_prediction_tokens": 0,
                "audio_tokens": 0,
                "reasoning_tokens": 0,
                "rejected_prediction_tokens": 0
            },
            "prompt_tokens_details": {
                "audio_tokens": 0,
                "cached_tokens": 0
            }
        }
    },
    "test_file_path": "config/startup_line_test.go",
    "existing_test_code": "",
    "original_code": "package config\n\nimport (\n\t\"github.com/gookit/goutil/strutil\"\n\t\"github.com/qiangyt/jog/util\"\n)\n\n// StartupLineT ...\ntype StartupLineT struct {\n\tElementT\n\n\tContains string\n}\n\n// StartupLine ...\ntype StartupLine = *StartupLineT\n\n// UnmarshalYAML ...\nfunc (i StartupLine) UnmarshalYAML(unmarshal func(interface{}) error) error {\n\treturn UnmarshalYAML(i, unmarshal)\n}\n\n// MarshalYAML ...\nfunc (i StartupLine) MarshalYAML() (interface{}, error) {\n\treturn MarshalYAML(i)\n}\n\n// Reset ...\nfunc (i StartupLine) Reset() {\n\ti.ElementT.Reset()\n\n\ti.Contains = \"Started Application in\"\n}\n\n// FromMap ...\nfunc (i StartupLine) FromMap(m map[string]interface{}) error {\n\tif err := i.ElementT.FromMap(m); err != nil {\n\t\treturn err\n\t}\n\n\tcontainsV := util.ExtractFromMap(m, \"contains\")\n\tif containsV != nil {\n\t\ti.Contains = strutil.MustString(containsV)\n\t}\n\n\treturn nil\n}\n\n// ToMap ...\nfunc (i StartupLine) ToMap() map[string]interface{} {\n\tr := i.ElementT.ToMap()\n\tr[\"contains\"] = i.Contains\n\treturn r\n}\n",
    "test_code": "!!!!test_begin!!!!\n\npackage config\n\nimport (\n\t\"testing\"\n)\n\nfunc TestStartupLine_UnmarshalYAML(t *testing.T) {\n\tt.Run(\"Happy Path\", func(t *testing.T) {\n\t\t// Given\n\t\tyamlData := `contains: \"Started Application in\"`\n\t\tvar startupLine StartupLineT\n\n\t\t// When\n\t\terr := startupLine.UnmarshalYAML(func(v interface{}) error {\n\t\t\treturn unmarshalYAML(yamlData, v)\n\t\t})\n\n\t\t// Then\n\t\tif err != nil {\n\t\t\tt.Errorf(\"Expected no error, but got: %v\", err)\n\t\t}\n\t\tif startupLine.Contains != \"Started Application in\" {\n\t\t\tt.Errorf(\"Expected Contains to be 'Started Application in', but got: %s\", startupLine.Contains)\n\t\t}\n\t})\n\n\tt.Run(\"Negative Case - Invalid YAML\", func(t *testing.T) {\n\t\t// Given\n\t\tyamlData := `contains: \"Started Application in\"`\n\t\tvar startupLine StartupLineT\n\n\t\t// When\n\t\terr := startupLine.UnmarshalYAML(func(v interface{}) error {\n\t\t\treturn unmarshalYAML(\"invalid yaml data\", v)\n\t\t})\n\n\t\t// Then\n\t\tif err == nil {\n\t\t\tt.Errorf(\"Expected an error, but got none\")\n\t\t}\n\t})\n\n\tt.Run(\"Corner Case - Empty YAML\", func(t *testing.T) {\n\t\t// Given\n\t\tyamlData := \"\"\n\t\tvar startupLine StartupLineT\n\n\t\t// When\n\t\terr := startupLine.UnmarshalYAML(func(v interface{}) error {\n\t\t\treturn unmarshalYAML(yamlData, v)\n\t\t})\n\n\t\t// Then\n\t\tif err == nil {\n\t\t\tt.Errorf(\"Expected an error, but got none\")\n\t\t}\n\t})\n\n\tt.Run(\"Happy Path - Contains Field Missing\", func(t *testing.T) {\n\t\t// Given\n\t\tyamlData := `otherField: \"some value\"`\n\t\tvar startupLine StartupLineT\n\n\t\t// When\n\t\terr := startupLine.UnmarshalYAML(func(v interface{}) error {\n\t\t\treturn unmarshalYAML(yamlData, v)\n\t\t})\n\n\t\t// Then\n\t\tif err != nil {\n\t\t\tt.Errorf(\"Expected no error, but got: %v\", err)\n\t\t}\n\t\tif startupLine.Contains != \"Started Application in\" {\n\t\t\tt.Errorf(\"Expected Contains to be 'Started Application in', but got: %s\", startupLine.Contains)\n\t\t}\n\t})\n\n\tt.Run(\"Negative Case - Invalid Contains Value\", func(t *testing.T) {\n\t\t// Given\n\t\tyamlData := `contains: 123`\n\t\tvar startupLine StartupLineT\n\n\t\t// When\n\t\terr := startupLine.UnmarshalYAML(func(v interface{}) error {\n\t\t\treturn unmarshalYAML(yamlData, v)\n\t\t})\n\n\t\t// Then\n\t\tif err == nil {\n\t\t\tt.Errorf(\"Expected an error, but got none\")\n\t\t}\n\t})\n\n\tt.Run(\"Happy Path - Contains Field Empty\", func(t *testing.T) {\n\t\t// Given\n\t\tyamlData := `contains: \"\"`\n\t\tvar startupLine StartupLineT\n\n\t\t// When\n\t\terr := startupLine.UnmarshalYAML(func(v interface{}) error {\n\t\t\treturn unmarshalYAML(yamlData, v)\n\t\t})\n\n\t\t// Then\n\t\tif err != nil {\n\t\t\tt.Errorf(\"Expected no error, but got: %v\", err)\n\t\t}\n\t\tif startupLine.Contains != \"\" {\n\t\t\tt.Errorf(\"Expected Contains to be '', but got: %s\", startupLine.Contains)\n\t\t}\n\t})\n\n\tt.Run(\"Negative Case - Contains Field Null\", func(t *testing.T) {\n\t\t// Given\n\t\tyamlData := `contains: null`\n\t\tvar startupLine StartupLineT\n\n\t\t// When\n\t\terr := startupLine.UnmarshalYAML(func(v interface{}) error {\n\t\t\treturn unmarshalYAML(yamlData, v)\n\t\t})\n\n\t\t// Then\n\t\tif err == nil {\n\t\t\tt.Errorf(\"Expected an error, but got none\")\n\t\t}\n\t})\n\n\tt.Run(\"Happy Path - Contains Field with Leading and Trailing Spaces\", func(t *testing.T) {\n\t\t// Given\n\t\tyamlData := `contains: \"  Started Application in  \"`\n\t\tvar startupLine StartupLineT\n\n\t\t// When\n\t\terr := startupLine.UnmarshalYAML(func(v interface{}) error {\n\t\t\treturn unmarshalYAML(yamlData, v)\n\t\t})\n\n\t\t// Then\n\t\tif err != nil {\n\t\t\tt.Errorf(\"Expected no error, but got: %v\", err)\n\t\t}\n\t\tif startupLine.Contains != \"Started Application in\" {\n\t\t\tt.Errorf(\"Expected Contains to be 'Started Application in', but got: %s\", startupLine.Contains)\n\t\t}\n\t})\n\n\tt.Run(\"Negative Case - Contains Field with Special Characters\", func(t *testing.T) {\n\t\t// Given\n\t\tyamlData := `contains: \"Started!Application@in\"`\n\t\tvar startupLine StartupLineT\n\n\t\t// When\n\t\terr := startupLine.UnmarshalYAML(func(v interface{}) error {\n\t\t\treturn unmarshalYAML(yamlData, v)\n\t\t})\n\n\t\t// Then\n\t\tif err != nil {\n\t\t\tt.Errorf(\"Expected no error, but got: %v\", err)\n\t\t}\n\t\tif startupLine.Contains != \"Started!Application@in\" {\n\t\t\tt.Errorf(\"Expected Contains to be 'Started!Application@in', but got: %s\", startupLine.Contains)\n\t\t}\n\t})\n}\n\nfunc unmarshalYAML(data string, v interface{}) error {\n\treturn yaml.Unmarshal([]byte(data), v)\n}\n!!!!test_end!!!!\n",
    "amount_of_generated_test_cases": 10,
    "single_test_run_command": "go test -v config/startup_line_test.go"
}