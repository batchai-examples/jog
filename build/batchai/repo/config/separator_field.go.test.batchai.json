{
    "path": "config/separator_field.go",
    "model_usage_metrics": {
        "Duration": 22281259070,
        "OpenAiUsage": {
            "completion_tokens": 0,
            "prompt_tokens": 0,
            "total_tokens": 0,
            "completion_tokens_details": {
                "accepted_prediction_tokens": 0,
                "audio_tokens": 0,
                "reasoning_tokens": 0,
                "rejected_prediction_tokens": 0
            },
            "prompt_tokens_details": {
                "audio_tokens": 0,
                "cached_tokens": 0
            }
        }
    },
    "test_file_path": "config/separator_field_test.go",
    "existing_test_code": "",
    "original_code": "package config\n\nimport (\n\t\"github.com/gookit/goutil/strutil\"\n\t\"github.com/qiangyt/jog/util\"\n)\n\n// SeparatorFieldT ...\ntype SeparatorFieldT struct {\n\tElementT\n\n\tLabel string\n}\n\n// SeparatorField ...\ntype SeparatorField = *SeparatorFieldT\n\n// UnmarshalYAML ...\nfunc (i SeparatorField) UnmarshalYAML(unmarshal func(interface{}) error) error {\n\treturn UnmarshalYAML(i, unmarshal)\n}\n\n// MarshalYAML ...\nfunc (i SeparatorField) MarshalYAML() (interface{}, error) {\n\treturn MarshalYAML(i)\n}\n\n// Reset ...\nfunc (i SeparatorField) Reset() {\n\ti.ElementT.Reset()\n\n\ti.Label = \"=\"\n}\n\n// FromMap ...\nfunc (i SeparatorField) FromMap(m map[string]interface{}) error {\n\tif err := i.ElementT.FromMap(m); err != nil {\n\t\treturn err\n\t}\n\n\tlabelV := util.ExtractFromMap(m, \"label\")\n\tif labelV != nil {\n\t\ti.Label = strutil.MustString(labelV)\n\t}\n\treturn nil\n}\n\n// ToMap ...\nfunc (i SeparatorField) ToMap() map[string]interface{} {\n\tr := i.ElementT.ToMap()\n\tr[\"label\"] = i.Label\n\treturn r\n}\n",
    "test_code": "package config\n\nimport (\n\t\"testing\"\n)\n\nfunc TestSeparatorField_UnmarshalYAML(t *testing.T) {\n\ttests := []struct {\n\t\tname    string\n\t\tinput   string\n\t\twantErr bool\n\t}{\n\t\t{\n\t\t\tname: \"Happy path with label\",\n\t\t\tinput: `\nlabel: \":=\"\n`,\n\t\t\twantErr: false,\n\t\t},\n\t\t{\n\t\t\tname: \"Happy path without label\",\n\t\t\tinput: ``,\n\t\t\twantErr: false,\n\t\t},\n\t\t{\n\t\t\tname:    \"Negative path - invalid YAML\",\n\t\t\tinput:   `invalid yaml`,\n\t\t\twantErr: true,\n\t\t},\n\t\t{\n\t\t\tname:    \"Corner case - empty input\",\n\t\t\tinput:   ``,\n\t\t\twantErr: false,\n\t\t},\n\t\t{\n\t\t\tname: \"Negative path - non-string label\",\n\t\t\tinput: `\nlabel: 123\n`,\n\t\t\twantErr: true,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tvar sf SeparatorFieldT\n\t\t\terr := sf.UnmarshalYAML(func(v interface{}) error {\n\t\t\t\treturn unmarshalYAMLString(tt.input, v)\n\t\t\t})\n\t\t\tif (err != nil) != tt.wantErr {\n\t\t\t\tt.Errorf(\"UnmarshalYAML() error = %v, wantErr %v\", err, tt.wantErr)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestSeparatorField_MarshalYAML(t *testing.T) {\n\ttests := []struct {\n\t\tname    string\n\t\tinput   SeparatorFieldT\n\t\twant    interface{}\n\t}{\n\t\t{\n\t\t\tname: \"Happy path\",\n\t\t\tinput: SeparatorFieldT{\n\t\t\t\tElementT: ElementT{},\n\t\t\t\tLabel:    \":=\",\n\t\t\t},\n\t\t\twant: map[string]interface{}{\n\t\t\t\t\"label\": \":=\",\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"Corner case - empty label\",\n\t\t\tinput: SeparatorFieldT{\n\t\t\t\tElementT: ElementT{},\n\t\t\t\tLabel:    \"\",\n\t\t\t},\n\t\t\twant: map[string]interface{}{\n\t\t\t\t\"label\": \"=\",\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tgot, err := tt.input.MarshalYAML()\n\t\t\tif err != nil {\n\t\t\t\tt.Errorf(\"MarshalYAML() error = %v\", err)\n\t\t\t}\n\t\t\tif !reflect.DeepEqual(got, tt.want) {\n\t\t\t\tt.Errorf(\"MarshalYAML() got = %v, want %v\", got, tt.want)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestSeparatorField_Reset(t *testing.T) {\n\ttests := []struct {\n\t\tname string\n\t\twant SeparatorFieldT\n\t}{\n\t\t{\n\t\t\tname: \"Happy path\",\n\t\t\twant: SeparatorFieldT{\n\t\t\t\tElementT: ElementT{},\n\t\t\t\tLabel:    \"=\",\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tsf := \u0026SeparatorFieldT{\n\t\t\t\tElementT: ElementT{},\n\t\t\t\tLabel:    \":=\",\n\t\t\t}\n\t\t\tsf.Reset()\n\t\t\tif !reflect.DeepEqual(*sf, tt.want) {\n\t\t\t\tt.Errorf(\"Reset() got = %v, want %v\", sf, tt.want)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestSeparatorField_FromMap(t *testing.T) {\n\ttests := []struct {\n\t\tname    string\n\t\tinput   map[string]interface{}\n\t\twantErr bool\n\t}{\n\t\t{\n\t\t\tname: \"Happy path with label\",\n\t\t\tinput: map[string]interface{}{\n\t\t\t\t\"label\": \":=\",\n\t\t\t},\n\t\t\twantErr: false,\n\t\t},\n\t\t{\n\t\t\tname: \"Happy path without label\",\n\t\t\tinput: map[string]interface{}{},\n\t\t\twantErr: false,\n\t\t},\n\t\t{\n\t\t\tname:    \"Negative path - invalid label type\",\n\t\t\tinput: map[string]interface{}{\n\t\t\t\t\"label\": 123,\n\t\t\t},\n\t\t\twantErr: true,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tvar sf SeparatorFieldT\n\t\t\terr := sf.FromMap(tt.input)\n\t\t\tif (err != nil) != tt.wantErr {\n\t\t\t\tt.Errorf(\"FromMap() error = %v, wantErr %v\", err, tt.wantErr)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestSeparatorField_ToMap(t *testing.T) {\n\ttests := []struct {\n\t\tname    string\n\t\tinput   SeparatorFieldT\n\t\twant    map[string]interface{}\n\t}{\n\t\t{\n\t\t\tname: \"Happy path\",\n\t\t\tinput: SeparatorFieldT{\n\t\t\t\tElementT: ElementT{},\n\t\t\t\tLabel:    \":=\",\n\t\t\t},\n\t\t\twant: map[string]interface{}{\n\t\t\t\t\"label\": \":=\",\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"Corner case - empty label\",\n\t\t\tinput: SeparatorFieldT{\n\t\t\t\tElementT: ElementT{},\n\t\t\t\tLabel:    \"\",\n\t\t\t},\n\t\t\twant: map[string]interface{}{\n\t\t\t\t\"label\": \"=\",\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tgot := tt.input.ToMap()\n\t\t\tif !reflect.DeepEqual(got, tt.want) {\n\t\t\t\tt.Errorf(\"ToMap() got = %v, want %v\", got, tt.want)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc unmarshalYAMLString(s string, v interface{}) error {\n\treturn yaml.Unmarshal([]byte(s), v)\n}\n",
    "amount_of_generated_test_cases": 10,
    "single_test_run_command": "go test -v config/separator_field_test.go"
}