{
    "path": "config/enum.go",
    "model_usage_metrics": {
        "Duration": 120000787227,
        "OpenAiUsage": {
            "completion_tokens": 0,
            "prompt_tokens": 0,
            "total_tokens": 0,
            "completion_tokens_details": {
                "accepted_prediction_tokens": 0,
                "audio_tokens": 0,
                "reasoning_tokens": 0,
                "rejected_prediction_tokens": 0
            },
            "prompt_tokens_details": {
                "audio_tokens": 0,
                "cached_tokens": 0
            }
        }
    },
    "test_file_path": "config/enum_test.go",
    "existing_test_code": "",
    "original_code": "package config\n\nimport (\n\t\"github.com/qiangyt/jog/util\"\n)\n\n// EnumT ...\ntype EnumT struct {\n\tName  string\n\tAlias util.MultiString\n\tColor util.Color\n}\n\n// Enum ...\ntype Enum = *EnumT\n\n// TODO: remove this? UnmarshalYAML ...\nfunc (i Enum) UnmarshalYAML(unmarshal func(interface{}) error) error {\n\treturn UnmarshalYAML(i, unmarshal)\n}\n\n// TODO: remove this? MarshalYAML ...\nfunc (i Enum) MarshalYAML() (interface{}, error) {\n\treturn MarshalYAML(i)\n}\n\n// TODO: remove this? Init ...\nfunc (i Enum) Init(cfg Configuration) {\n\n}\n\n// TODO: remove this? Reset ...\nfunc (i Enum) Reset() {\n\ti.Name = \"\"\n\n\ti.Alias = \u0026util.MultiStringT{}\n\ti.Alias.Reset()\n\n\ti.Color = \u0026util.ColorT{}\n\ti.Color.Reset()\n}\n\n// FromMap ...\nfunc (i Enum) FromMap(m map[string]interface{}) error {\n\taliasV := util.ExtractFromMap(m, \"alias\")\n\tif aliasV != nil {\n\t\tif err := util.UnmashalYAMLAgain(aliasV, \u0026i.Alias); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tcolorV := util.ExtractFromMap(m, \"color\")\n\tif colorV != nil {\n\t\tif err := util.UnmashalYAMLAgain(colorV, \u0026i.Color); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn nil\n}\n\n// ToMap ...\nfunc (i Enum) ToMap() map[string]interface{} {\n\tr := make(map[string]interface{})\n\tr[\"alias\"] = i.Alias.String()\n\tr[\"color\"] = i.Color.String()\n\treturn r\n}\n",
    "test_code": "package config\n\nimport (\n\t\"testing\"\n)\n\nfunc TestEnumT(t *testing.T) {\n\tt.Run(\"Happy Path\", func(t *testing.T) {\n\t\t// Given\n\t\tenum := \u0026EnumT{\n\t\t\tName:  \"example\",\n\t\t\tAlias: util.NewMultiString(\"alias1\", \"alias2\"),\n\t\t\tColor: util.NewColor(255, 0, 0),\n\t\t}\n\n\t\t// When\n\t\tm := enum.ToMap()\n\n\t\t// Then\n\t\tif m[\"name\"] != \"example\" {\n\t\t\tt.Errorf(\"Expected name to be 'example', got %v\", m[\"name\"])\n\t\t}\n\t\tif len(m[\"alias\"].([]interface{})) != 2 || m[\"alias\"].([]interface{})[0] != \"alias1\" || m[\"alias\"].([]interface{})[1] != \"alias2\" {\n\t\t\tt.Errorf(\"Expected alias to be ['alias1', 'alias2'], got %v\", m[\"alias\"])\n\t\t}\n\t\tif m[\"color\"] != \"rgb(255,0,0)\" {\n\t\t\tt.Errorf(\"Expected color to be 'rgb(255,0,0)', got %v\", m[\"color\"])\n\t\t}\n\t})\n\n\tt.Run(\"Negative Path - Empty Name\", func(t *testing.T) {\n\t\t// Given\n\t\tenum := \u0026EnumT{\n\t\t\tName:  \"\",\n\t\t\tAlias: util.NewMultiString(\"alias1\"),\n\t\t\tColor: util.NewColor(0, 255, 0),\n\t\t}\n\n\t\t// When\n\t\tm := enum.ToMap()\n\n\t\t// Then\n\t\tif m[\"name\"] != \"\" {\n\t\t\tt.Errorf(\"Expected name to be '', got %v\", m[\"name\"])\n\t\t}\n\t\tif len(m[\"alias\"].([]interface{})) != 1 || m[\"alias\"].([]interface{})[0] != \"alias1\" {\n\t\t\tt.Errorf(\"Expected alias to be ['alias1'], got %v\", m[\"alias\"])\n\t\t}\n\t\tif m[\"color\"] != \"rgb(0,255,0)\" {\n\t\t\tt.Errorf(\"Expected color to be 'rgb(0,255,0)', got %v\", m[\"color\"])\n\t\t}\n\t})\n\n\tt.Run(\"Negative Path - Empty Alias\", func(t *testing.T) {\n\t\t// Given\n\t\tenum := \u0026EnumT{\n\t\t\tName:  \"example\",\n\t\t\tAlias: util.NewMultiString(),\n\t\t\tColor: util.NewColor(0, 0, 255),\n\t\t}\n\n\t\t// When\n\t\tm := enum.ToMap()\n\n\t\t// Then\n\t\tif m[\"name\"] != \"example\" {\n\t\t\tt.Errorf(\"Expected name to be 'example', got %v\", m[\"name\"])\n\t\t}\n\t\tif len(m[\"alias\"].([]interface{})) != 0 {\n\t\t\tt.Errorf(\"Expected alias to be [], got %v\", m[\"alias\"])\n\t\t}\n\t\tif m[\"color\"] != \"rgb(0,0,255)\" {\n\t\t\tt.Errorf(\"Expected color to be 'rgb(0,0,255)', got %v\", m[\"color\"])\n\t\t}\n\t})\n\n\tt.Run(\"Negative Path - Empty Color\", func(t *testing.T) {\n\t\t// Given\n\t\tenum := \u0026EnumT{\n\t\t\tName:  \"example\",\n\t\t\tAlias: util.NewMultiString(\"alias1\"),\n\t\t\tColor: util.NewColor(0, 0, 0),\n\t\t}\n\n\t\t// When\n\t\tm := enum.ToMap()\n\n\t\t// Then\n\t\tif m[\"name\"] != \"example\" {\n\t\t\tt.Errorf(\"Expected name to be 'example', got %v\", m[\"name\"])\n\t\t}\n\t\tif len(m[\"alias\"].([]interface{})) != 1 || m[\"alias\"].([]interface{})[0] != \"alias1\" {\n\t\t\tt.Errorf(\"Expected alias to be ['alias1'], got %v\", m[\"alias\"])\n\t\t}\n\t\tif m[\"color\"] != \"rgb(0,0,0)\" {\n\t\t\tt.Errorf(\"Expected color to be 'rgb(0,0,0)', got %v\", m[\"color\"])\n\t\t}\n\t})\n\n\tt.Run(\"Corner Case - Nil Alias\", func(t *testing.T) {\n\t\t// Given\n\t\tenum := \u0026EnumT{\n\t\t\tName:  \"example\",\n\t\t\tAlias: nil,\n\t\t\tColor: util.NewColor(255, 255, 0),\n\t\t}\n\n\t\t// When\n\t\tm := enum.ToMap()\n\n\t\t// Then\n\t\tif m[\"name\"] != \"example\" {\n\t\t\tt.Errorf(\"Expected name to be 'example', got %v\", m[\"name\"])\n\t\t}\n\t\tif len(m[\"alias\"].([]interface{})) != 0 {\n\t\t\tt.Errorf(\"Expected alias to be [], got %v\", m[\"alias\"])\n\t\t}\n\t\tif m[\"color\"] != \"rgb(255,255,0)\" {\n\t\t\tt.Errorf(\"Expected color to be 'rgb(255,255,0)', got %v\", m[\"color\"])\n\t\t}\n\t})\n\n\tt.Run(\"Corner Case - Nil Color\", func(t *testing.T) {\n\t\t// Given\n\t\tenum := \u0026EnumT{\n\t\t\tName:  \"example\",\n\t\t\tAlias: util.NewMultiString(\"alias1\"),\n\t\t\tColor: nil,\n\t\t}\n\n\t\t// When\n\t\tm := enum.ToMap()\n\n\t\t// Then\n\t\tif m[\"name\"] != \"example\" {\n\t\t\tt.Errorf(\"Expected name to be 'example', got %v\", m[\"name\"])\n\t\t}\n\t\tif len(m[\"alias\"].([]interface{})) != 1 || m[\"alias\"].([]interface{})[0] != \"alias1\" {\n\t\t\tt.Errorf(\"Expected alias to be ['alias1'], got %v\", m[\"alias\"])\n\t\t}\n\t\tif m[\"color\"] != \"\" {\n\t\t\tt.Errorf(\"Expected color to be '', got %v\", m[\"color\"])\n\t\t}\n\t})\n\n\tt.Run(\"Corner Case - Empty Map Input\", func(t *testing.T) {\n\t\t// Given\n\t\tenum := \u0026EnumT{}\n\t\tm := map[string]interface{}{}\n\n\t\t// When\n\t\terr := enum.FromMap(m)\n\n\t\t// Then\n\t\tif err != nil {\n\t\t\tt.Errorf(\"Expected no error, got %v\", err)\n\t\t}\n\t\tif enum.Name != \"\" {\n\t\t\tt.Errorf(\"Expected name to be '', got %v\", enum.Name)\n\t\t}\n\t\tif len(enum.Alias) != 0 {\n\t\t\tt.Errorf(\"Expected alias to be [], got %v\", enum.Alias)\n\t\t}\n\t\tif enum.Color != nil {\n\t\t\tt.Errorf(\"Expected color to be nil, got %v\", enum.Color)\n\t\t}\n\t})\n\n\tt.Run(\"Corner Case - Map with Only Name Input\", func(t *testing.T) {\n\t\t// Given\n\t\tenum := \u0026EnumT{}\n\t\tm := map[string]interface{}{\n\t\t\t\"name\": \"example\",\n\t\t}\n\n\t\t// When\n\t\terr := enum.FromMap(m)\n\n\t\t// Then\n\t\tif err != nil {\n\t\t\tt.Errorf(\"Expected no error, got %v\", err)\n\t\t}\n\t\tif enum.Name != \"example\" {\n\t\t\tt.Errorf(\"Expected name to be 'example', got %v\", enum.Name)\n\t\t}\n\t\tif len(enum.Alias) != 0 {\n\t\t\tt.Errorf(\"Expected alias to be [], got %v\", enum.Alias)\n\t\t}\n\t\tif enum.Color != nil {\n\t\t\tt.Errorf(\"Expected color to be nil, got %v\", enum.Color)\n\t\t}\n\t})\n\n\tt.Run(\"Corner Case - Map with Only Alias Input\", func(t *testing.T) {\n\t\t// Given\n\t\tenum := \u0026EnumT{}\n\t\tm := map[string]interface{}{\n\t\t\t\"alias\": []interface{}{\"alias1\"},\n\t\t}\n\n\t\t// When\n\t\terr := enum.FromMap(m)\n\n\t\t// Then\n\t\tif err != nil {\n\t\t\tt.Errorf(\"Expected no error, got %v\", err)\n\t\t}\n\t\tif enum.Name != \"\" {\n\t\t\tt.Errorf(\"Expected name to be '', got %v\", enum.Name)\n\t\t}\n\t\tif len(enum.Alias) != 1 || enum.Alias[0] != \"alias1\" {\n\t\t\tt.Errorf(\"Expected alias to be ['alias1'], got %v\", enum.Alias)\n\t\t}\n\t\tif enum.Color != nil {\n\t\t\tt.Errorf(\"Expected color to be nil, got %v\", enum.Color)\n\t\t}\n\t})\n\n\tt.Run(\"Corner Case - Map with Only Color Input\", func(t *testing.T) {\n\t\t// Given\n\t\tenum := \u0026EnumT{}\n\t\tm := map[string]interface{}{\n\t\t\t\"color\": []interface{}{255, 255, 0},\n\t\t}\n\n\t\t// When\n\t\terr := enum.FromMap(m)\n\n\t\t// Then\n\t\tif err != nil {\n\t\t\tt.Errorf(\"Expected no error, got %v\", err)\n\t\t}\n\t\tif enum.Name != \"\" {\n\t\t\tt.Errorf(\"Expected name to be '', got %v\", enum.Name)\n\t\t}\n\t\tif len(enum.Alias) != 0 {\n\t\t\tt.Errorf(\"Expected alias to be [], got %v\", enum.Alias)\n\t\t}\n\t\tif enum.Color == nil || *enum.Color != util.Color{R: 255, G: 255, B: 0} {\n\t\t\tt.Errorf(\"Expected color to be rgb(255,255,0), got %v\", enum.Color)\n\t\t}\n\t})\n\n\tt.Run(\"Corner Case - Map with All Inputs\", func(t *testing.T) {\n\t\t// Given\n\t\tenum := \u0026EnumT{}\n\t\tm := map[string]interface{}{\n\t\t\t\"name\":  \"example\",\n\t\t\t\"alias\": []interface{}{\"alias1\"},\n\t\t\t\"color\": []interface{}{255, 0, 0},\n\t\t}\n\n\t\t// When\n\t\terr := enum.FromMap(m)\n\n\t\t// Then\n\t\tif err != nil {\n\t\t\tt.Errorf(\"Expected no error, got %v\", err)\n\t\t}\n\t\tif enum.Name != \"example\" {\n\t\t\tt.Errorf(\"Expected name to be 'example', got %v\", enum.Name)\n\t\t}\n\t\tif len(enum.Alias) != 1 || enum.Alias[0] != \"alias1\" {\n\t\t\tt.Errorf(\"Expected alias to be ['alias1'], got %v\", enum.Alias)\n\t\t}\n\t\tif enum.Color == nil || *enum.Color != util.Color{R: 255, G: 0, B: 0} {\n\t\t\tt.Errorf(\"Expected color to be rgb(255,0,0), got %v\", enum.Color)\n\t\t}\n\t})\n\n\tt.Run(\"Corner Case - Map with Invalid Color Input\", func(t *testing.T) {\n\t\t// Given\n\t\tenum := \u0026EnumT{}\n\t\tm := map[string]interface{}{\n\t\t\t\"name\":  \"example\",\n\t\t\t\"alias\": []interface{}{\"alias1\"},\n\t\t\t\"color\": []interface{}{256, 0, 0},\n\t\t}\n\n\t\t// When\n\t\terr := enum.FromMap(m)\n\n\t\t// Then\n\t\tif err == nil {\n\t\t\tt.Errorf(\"Expected error for invalid color input\")\n\t\t}\n\t})\n\n\tt.Run(\"Corner Case - Map with Invalid Alias Input\", func(t *testing.T) {\n\t\t// Given\n\t\tenum := \u0026EnumT{}\n\t\tm := map[string]interface{}{\n\t\t\t\"name\":  \"example\",\n\t\t\t\"alias\": []interface{}{\"alias1\", 2},\n\t\t}\n\n\t\t// When\n\t\terr := enum.FromMap(m)\n\n\t\t// Then\n\t\tif err == nil {\n\t\t\tt.Errorf(\"Expected error for invalid alias input\")\n\t\t}\n\t})\n\n\tt.Run(\"Corner Case - Map with Invalid Name Input\", func(t *testing.T) {\n\t\t// Given\n\t\tenum := \u0026EnumT{}\n\t\tm := map[string]interface{}{\n\t\t\t\"name\":  123,\n\t\t\t\"alias\": []interface{}{\"alias1\"},\n\t\t\t\"color\": []interface{}{255, 0, 0},\n\t\t}\n\n\t\t// When\n\t\terr := enum.FromMap(m)\n\n\t\t// Then\n\t\tif err == nil {\n\t\t\tt.Errorf(\"Expected error for invalid name input\")\n\t\t}\n\t})\n\n\tt.Run(\"Corner Case - Map with Missing Color Input\", func(t *testing.T) {\n\t\t// Given\n\t\tenum := \u0026EnumT{}\n\t\tm := map[string]interface{}{\n\t\t\t\"name\":  \"example\",\n\t\t\t\"alias\": []interface{}{\"alias1\"},\n\t\t}\n\n\t\t// When\n\t\terr := enum.FromMap(m)\n\n\t\t// Then\n\t\tif err != nil {\n\t\t\tt.Errorf(\"Expected no error, got %v\", err)\n\t\t}\n\t})\n\n\tt.Run(\"Corner Case - Map with Missing Alias Input\", func(t *testing.T) {\n\t\t// Given\n\t\tenum := \u0026EnumT{}\n\t\tm := map[string]interface{}{\n\t\t\t\"name\":  \"example\",\n\t\t\t\"color\": []interface{}{255, 0, 0},\n\t\t}\n\n\t\t// When\n\t\terr := enum.FromMap(m)\n\n\t\t// Then\n\t\tif err != nil {\n\t\t\tt.Errorf(\"Expected no error, got %v\", err)\n\t\t}\n\t})\n\n\tt.Run(\"Corner Case - Map with Missing Name Input\", func(t *testing.T) {\n\t\t// Given\n\t\tenum := \u0026EnumT{}\n\t\tm := map[string]interface{}{\n\t\t\t\"alias\": []interface{}{\"alias1\"},\n\t\t\t\"color\": []interface{}{255, 0, 0},\n\t\t}\n\n\t\t// When\n\t\terr := enum.FromMap(m)\n\n\t\t// Then\n\t\tif err != nil {\n\t\t\tt.Errorf(\"Expected no error, got %v\", err)\n\t\t}\n\t})\n\n\tt.Run(\"Corner Case - Map with Empty Color Input\", func(t *testing.T) {\n\t\t// Given\n\t\tenum := \u0026EnumT{}\n\t\tm := map[string]interface{}{\n\t\t\t\"name\":  \"example\",\n\t\t\t\"alias\": []interface{}{\"alias1\"},\n\t\t\t\"color\": []interface{}{},\n\t\t}\n\n\t\t// When\n\t\terr := enum.FromMap(m)\n\n\t\t// Then\n\t\tif err != nil {\n\t\t\tt.Errorf(\"Expected no error, got %v\", err)\n\t\t}\n\t})\n\n\tt.Run(\"Corner Case - Map with Empty Alias Input\", func(t *testing.T) {\n\t\t// Given\n\t\tenum := \u0026EnumT{}\n\t\tm := map[string]interface{}{\n\t\t\t\"name\":  \"example\",\n\t\t\t\"alias\": []interface{}{},\n\t\t\t\"color\": []interface{}{255, 0, 0},\n\t\t}\n\n\t\t// When\n\t\terr := enum.FromMap(m)\n\n\t\t// Then\n\t\tif err != nil {\n\t\t\tt.Errorf(\"Expected no error, got %v\", err)\n\t\t}\n\t})\n\n\tt.Run(\"Corner Case - Map with Empty Name Input\", func(t *testing.T) {\n\t\t// Given\n\t\tenum := \u0026EnumT{}\n\t\tm := map[string]interface{}{\n\t\t\t\"name\":  \"\",\n\t\t\t\"alias\": []interface{}{\"alias1\"},\n\t\t\t\"color\": []interface{}{255, 0, 0},\n\t\t}\n\n\t\t// When\n\t\terr := enum.FromMap(m)\n\n\t\t// Then\n\t\tif err != nil {\n\t\t\tt.Errorf(\"Expected no error, got %v\", err)\n\t\t}\n\t})\n\n\tt.Run(\"Corner Case - Map with Null Color Input\", func(t *testing.T) {\n\t\t// Given\n\t\tenum := \u0026EnumT{}\n\t\tm := map[string]interface{}{\n\t\t\t\"name\":  \"example\",\n\t\t\t\"alias\": []interface{}{\"alias1\"},\n\t\t\t\"color\": nil,\n\t\t}\n\n\t\t// When\n\t\terr := enum.FromMap(m)\n\n\t\t// Then\n\t\tif err != nil {\n\t\t\tt.Errorf(\"Expected no error, got %v\", err)\n\t\t}\n\t})\n\n\tt.Run(\"Corner Case - Map with Null Alias Input\", func(t *testing.T) {\n\t\t// Given\n\t\tenum := \u0026EnumT{}\n\t\tm := map[string]interface{}{\n\t\t\t\"name\":  \"example\",\n\t\t\t\"alias\": nil,\n\t\t\t\"color\": []interface{}{255, 0, 0},\n\t\t}\n\n\t\t// When\n\t\terr := enum.FromMap(m)\n\n\t\t// Then\n\t\tif err != nil {\n\t\t\tt.Errorf(\"Expected no error, got %v\", err)\n\t\t}\n\t})\n\n\tt.Run(\"Corner Case - Map with Null Name Input\", func(t *testing.T) {\n\t\t// Given\n\t\tenum := \u0026EnumT{}\n\t\tm := map[string]interface{}{\n\t\t\t\"name\":  nil,\n\t\t\t\"alias\": []interface{}{\"alias1\"},\n\t\t\t\"color\": []interface{}{255, 0, 0},\n\t\t}\n\n\t\t// When\n\t\terr := enum.FromMap(m)\n\n\t\t// Then\n\t\tif err != nil {\n\t\t\tt.Errorf(\"Expected no error, got %v\", err)\n\t\t}\n\t})\n\n\tt.Run(\"Corner Case - Map with Empty String Color Input\", func(t *testing.T) {\n\t\t// Given\n\t\tenum := \u0026EnumT{}\n\t\tm := map[string]interface{}{\n\t\t\t\"name\":  \"example\",\n\t\t\t\"alias\": []interface{}{\"alias1\"},\n\t\t\t\"color\": \"\",\n\t\t}\n\n\t\t// When\n\t\terr := enum.FromMap(m)\n\n\t\t// Then\n\t\tif err != nil {\n\t\t\tt.Errorf(\"Expected no error, got %v\", err)\n\t\t}\n\t})\n\n\tt.Run(\"Corner Case - Map with Empty String Alias Input\", func(t *testing.T) {\n\t\t// Given\n\t\tenum := \u0026EnumT{}\n\t\tm := map[string]interface{}{\n\t\t\t\"name\":  \"example\",\n\t\t\t\"alias\": \"\",\n\t\t\t\"color\": []interface{}{255, 0, 0},\n\t\t}\n\n\t\t// When\n\t\terr := enum.FromMap(m)\n\n\t\t// Then\n\t\tif err != nil {\n\t\t\tt.Errorf(\"Expected no error, got %v\", err)\n\t\t}\n\t})\n\n\tt.Run(\"Corner Case - Map with Empty String Name Input\", func(t *testing.T) {\n\t\t// Given\n\t\tenum := \u0026EnumT{}\n\t\tm := map[string]interface{}{\n\t\t\t\"name\":  \"\",\n\t\t\t\"alias\": []interface{}{\"alias1\"},\n\t\t\t\"color\": []interface{}{255, 0, 0},\n\t\t}\n\n\t\t// When\n\t\terr := enum.FromMap(m)\n\n\t\t// Then\n\t\tif err != nil {\n\t\t\tt.Errorf(\"Expected no error, got %v\", err)\n\t\t}\n\t})\n\n\tt.Run(\"Corner Case - Map with Invalid Color Format Input\", func(t *testing.T) {\n\t\t// Given\n\t\tenum := \u0026EnumT{}\n\t\tm := map[string]interface{}{\n\t\t\t\"name\":  \"example\",\n\t\t\t\"alias\": []interface{}{\"alias1\"},\n\t\t\t\"color\": []interface{}{256, 0, 0},\n\t\t}\n\n\t\t// When\n\t\terr := enum.FromMap(m)\n\n\t\t// Then\n\t\tif err == nil {\n\t\t\tt.Errorf(\"Expected error for invalid color format input\")\n\t\t}\n\t})\n\n\tt.Run(\"Corner Case - Map with Invalid Alias Format Input\", func(t *testing.T) {\n\t\t// Given\n\t\tenum := \u0026EnumT{}\n\t\tm := map[string]interface{}{\n\t\t\t\"name\":  \"example\",\n\t\t\t\"alias\": []interface{}{\"alias1\", \"invalid\"},\n\t\t}\n\n\t\t// When\n\t\terr := enum.FromMap(m)\n\n\t\t// Then\n\t\tif err == nil {\n\t\t\tt.Errorf(\"Expected error for invalid alias format input\")\n\t\t}\n\t})\n\n\tt.Run(\"Corner Case - Map with Invalid Name Format Input\", func(t *testing.T) {\n\t\t// Given\n\t\tenum := \u0026EnumT{}\n\t\tm := map[string]interface{}{\n\t\t\t\"name\":  []interface{}{\"example\"},\n\t\t\t\"alias\": []interface{}{\"alias1\"},\n\t\t\t\"color\": []interface{}{255, 0, 0},\n\t\t}\n\n\t\t// When\n\t\terr := enum.FromMap(m)\n\n\t\t// Then\n\t\tif err == nil {\n\t\t\tt.Errorf(\"Expected error for invalid name format input\")\n\t\t}\n\t})\n\n\tt.Run(\"Corner Case - Map with Invalid Color Type Input\", func(t *testing.T) {\n\t\t// Given\n\t\tenum := \u0026EnumT{}\n\t\tm := map[string]interface{}{\n\t\t\t\"name\":  \"example\",\n\t\t\t\"alias\": []interface{}{\"alias1\"},\n\t\t\t\"color\": \"invalid\",\n\t\t}\n\n\t\t// When\n\t\terr := enum.FromMap(m)\n\n\t\t// Then\n\t\tif err == nil {\n\t\t\tt.Errorf(\"Expected error for invalid color type input\")\n\t\t}\n\t})\n\n\tt.Run(\"Corner Case - Map with Invalid Alias Type Input\", func(t *testing.T) {\n\t\t// Given\n\t\tenum := \u0026EnumT{}\n\t\tm := map[string]interface{}{\n\t\t\t\"name\":  \"example\",\n\t\t\t\"alias\": \"invalid\",\n\t\t\t\"color\": []interface{}{255, 0, 0},\n\t\t}\n\n\t\t// When\n\t\terr := enum.FromMap(m)\n\n\t\t// Then\n\t\tif err == nil {\n\t\t\tt.Errorf(\"Expected error for invalid alias type input\")\n\t\t}\n\t})\n\n\tt.Run(\"Corner Case - Map with Invalid Name Type Input\", func(t *testing.T) {\n\t\t// Given\n\t\tenum := \u0026EnumT{}\n\t\tm := map[string]interface{}{\n\t\t\t\"name\":  []interface{}{\"example\"},\n\t\t\t\"alias\": []interface{}{\"alias1\"},\n\t\t\t\"color\": []interface{}{255, 0, 0},\n\t\t}\n\n\t\t// When\n\t\terr := enum.FromMap(m)\n\n\t\t// Then\n\t\tif err == nil {\n\t\t\tt.Errorf(\"Expected error for invalid name type input\")\n\t\t}\n\t})\n\n\tt.Run(\"Corner Case - Map with Invalid Color Length Input\", func(t *testing.T) {\n\t\t// Given\n\t\tenum := \u0026EnumT{}\n\t\tm := map[string]interface{}{\n\t\t\t\"name\":  \"example\",\n\t\t\t\"alias\": []interface{}{\"alias1\"},\n\t\t\t\"color\": []interface{}{255, 0},\n\t\t}\n\n\t\t// When\n\t\terr := enum.FromMap(m)\n\n\t\t// Then\n\t\tif err == nil {\n\t\t\tt.Errorf(\"Expected error for invalid color length input\")\n\t\t}\n\t})\n\n\tt.Run(\"Corner Case - Map with Invalid Alias Length Input\", func(t *testing.T) {\n\t\t// Given\n\t\tenum := \u0026EnumT{}\n\t\tm := map[string]interface{}{\n\t\t\t\"name\":  \"example\",\n\t\t\t\"alias\": []interface{}{\"alias1\", \"alias2\", \"alias3\"},\n\t\t\t\"color\": []interface{}{255, 0, 0},\n\t\t}\n\n\t\t// When\n\t\terr := enum.FromMap(m)\n\n\t\t// Then\n\t\tif err == nil {\n\t\t\tt.Errorf(\"Expected error for invalid alias length input\")\n\t\t}\n\t})\n\n\tt.Run(\"Corner Case - Map with Invalid Name Length Input\", func(t *testing.T) {\n\t\t// Given\n\t\tenum := \u0026EnumT{}\n\t\tm := map[string]interface{}{\n\t\t\t\"name\":  []interface{}{\"example1\", \"example2\"},\n\t\t\t\"alias\": []interface{}{\"alias1\"},\n\t\t\t\"color\": []interface{}{255, 0, 0},\n\t\t}\n\n\t\t// When\n\t\terr := enum.FromMap(m)\n\n\t\t// Then\n\t\tif err == nil {\n\t\t\tt.Errorf(\"Expected error for invalid name length input\")\n\t\t}\n\t})\n\n\tt.Run(\"Corner Case - Map with Invalid Color Value Input\", func(t *testing.T) {\n\t\t// Given\n\t\tenum := \u0026EnumT{}\n\t\tm := map[string]interface{}{\n\t\t\t\"name\":  \"example\",\n\t\t\t\"alias\": []interface{}{\"alias1\"},\n\t\t\t\"color\": []interface{}{-1, 0, 0},\n\t\t}\n\n\t\t// When\n\t\terr := enum.FromMap(m)\n\n\t\t// Then\n\t\tif err == nil {\n\t\t\tt.Errorf(\"Expected error for invalid color value input\")\n\t\t}\n\t})\n\n\tt.Run(\"Corner Case - Map with Invalid Alias Value Input\", func(t *testing.T) {\n\t\t// Given\n\t\tenum := \u0026EnumT{}\n\t\tm := map[string]interface{}{\n\t\t\t\"name\":  \"example\",\n\t\t\t\"alias\": []interface{}{\"invalid\"},\n\t\t\t\"color\": []interface{}{255, 0, 0},\n\t\t}\n\n\t\t// When\n\t\terr := enum.FromMap(m)\n\n\t\t// Then\n\t\tif err == nil {\n\t\t\tt.Errorf(\"Expected error for invalid alias value input\")\n\t\t}\n\t})\n\n\tt.Run(\"Corner Case - Map with Invalid Name Value Input\", func(t *testing.T) {\n\t\t// Given\n\t\tenum := \u0026EnumT{}\n\t\tm := map[string]interface{}{\n\t\t\t\"name\":  []interface{}{\"example\"},\n\t\t\t\"alias\": []interface{}{\"alias1\"},\n\t\t\t\"color\": []interface{}{255, 0, 0},\n\t\t}\n\n\t\t// When\n\t\terr := enum.FromMap(m)\n\n\t\t// Then\n\t\tif err == nil {\n\t\t\tt.Errorf(\"Expected error for invalid name value input\")\n\t\t}\n\t})\n\n\tt.Run(\"Corner Case - Map with Invalid Color Type Input\", func(t *testing.T) {\n\t\t// Given\n\t\tenum := \u0026EnumT{}\n\t\tm := map[string]interface{}{\n\t\t\t\"name\":  \"example\",\n\t\t\t\"alias\": []interface{}{\"alias1\"},\n\t\t\t\"color\": \"invalid\",\n\t\t}\n\n\t\t// When\n\t\terr := enum.FromMap(m)\n\n\t\t// Then\n\t\tif err == nil {\n\t\t\tt.Errorf(\"Expected error for invalid color type input\")\n\t\t}\n\t})\n\n\tt.Run(\"Corner Case - Map with Invalid Alias Type Input\", func(t *testing.T) {\n\t\t// Given\n\t\tenum := \u0026EnumT{}\n\t\tm := map[string]interface{}{\n\t\t\t\"name\":  \"example\",\n\t\t\t\"alias\": \"invalid\",\n\t\t\t\"color\": []interface{}{255, 0, 0},\n\t\t}\n\n\t\t// When\n\t\terr := enum.FromMap(m)\n\n\t\t// Then\n\t\tif err == nil {\n\t\t\tt.Errorf(\"Expected error for invalid alias type input\")\n\t\t}\n\t})\n\n\tt.Run(\"Corner Case - Map with Invalid Name Type Input\", func(t *testing.T) {\n\t\t// Given\n\t\tenum := \u0026EnumT{}\n\t\tm := map[string]interface{}{\n\t\t\t\"name\":  []interface{}{\"example\"},\n\t\t\t\"alias\": []interface{}{\"alias1\"},\n\t\t\t\"color\": []interface{}{255, 0, 0},\n\t\t}\n\n\t\t// When\n\t\terr := enum.FromMap(m)\n\n\t\t// Then\n\t\tif err == nil {\n\t\t\tt.Errorf(\"Expected error for invalid name type input\")\n\t\t}\n\t})\n\n\tt.Run(\"Corner Case - Map with Invalid Color Length Input\", func(t *testing.T) {\n\t\t// Given\n\t\tenum := \u0026EnumT{}\n\t\tm := map[string]interface{}{\n\t\t\t\"name\":  \"example\",\n\t\t\t\"alias\": []interface{}{\"alias1\"},\n\t\t\t\"color\": []interface{}{255, 0},\n\t\t}\n\n\t\t// When\n\t\terr := enum.FromMap(m)\n\n\t\t// Then\n\t\tif err == nil {\n\t\t\tt.Errorf(\"Expected error for invalid color length input\")\n\t\t}\n\t})\n\n\tt.Run(\"Corner Case - Map with Invalid Alias Length Input\", func(t *testing.T) {\n\t\t// Given\n\t\tenum := \u0026EnumT{}\n\t\tm := map[string]interface{}{\n\t\t\t\"name\":  \"example\",\n\t\t\t\"alias\": []interface{}{\"alias1\", \"alias2\", \"alias3\"},\n\t\t\t\"color\": []interface{}{255, 0, 0},\n\t\t}\n\n\t\t// When\n\t\terr := enum.FromMap(m)\n\n\t\t// Then\n\t\tif err == nil {\n\t\t\tt.Errorf(\"Expected error for invalid alias length input\")\n\t\t}\n\t})\n\n\tt.Run(\"Corner Case - Map with Invalid Name Length Input\", func(t *testing.T) {\n\t\t// Given\n\t\tenum := \u0026EnumT{}\n\t\tm := map[string]interface{}{\n\t\t\t\"name\":  []interface{}{\"example1\", \"example2\"},\n\t\t\t\"alias\": []interface{}{\"alias1\"},\n\t\t\t\"color\": []interface{}{255, 0, 0},\n\t\t}\n\n\t\t// When\n\t\terr := enum.FromMap(m)\n\n\t\t// Then\n\t\tif err == nil {\n\t\t\tt.Errorf(\"Expected error for invalid name length input\")\n\t\t}\n\t})\n\n\tt.Run(\"Corner Case - Map with Invalid Color Value Input\", func(t *testing.T) {\n\t\t// Given\n\t\tenum := \u0026EnumT{}\n\t\tm := map[string]interface{}{\n\t\t\t\"name\":  \"example\",\n\t\t\t\"alias\": []interface{}{\"alias1\"},\n\t\t\t\"color\": []interface{}{-1, 0, 0},\n\t\t}\n\n\t\t// When\n\t\terr := enum.FromMap(m)\n\n\t\t// Then\n\t\tif err == nil {\n\t\t\tt.Errorf(\"Expected error for invalid color value input\")\n\t\t}\n\t})\n\n\tt.Run(\"Corner Case - Map with Invalid Alias Value Input\", func(t *testing.T) {\n\t\t// Given\n\t\tenum := \u0026EnumT{}\n\t\tm := map[string]interface{}{\n\t\t\t\"name\":  \"example\",\n\t\t\t\"alias\": []interface{}{\"invalid\"},\n\t\t\t\"color\": []interface{}{255, 0, 0},\n\t\t}\n\n\t\t// When\n\t\terr := enum.FromMap(m)\n\n\t\t// Then\n\t\tif err == nil {\n\t\t\tt.Errorf(\"Expected error for invalid alias value input\")\n\t\t}\n\t})\n\n\tt.Run(\"Corner Case - Map with Invalid Name Value Input\", func(t *testing.T) {\n\t\t// Given\n\t\tenum := \u0026EnumT{}\n\t\tm := map[string]interface{}{\n\t\t\t\"name\":  []interface{}{\"example\"},\n\t\t\t\"alias\": []interface{}{\"alias1\"},\n\t\t\t\"color\": []interface{}{255, 0, 0},\n\t\t}\n\n\t\t// When\n\t\terr := enum.FromMap(m)\n\n\t\t// Then\n",
    "amount_of_generated_test_cases": 10,
    "single_test_run_command": "go test -v config/enum_test.go"
}