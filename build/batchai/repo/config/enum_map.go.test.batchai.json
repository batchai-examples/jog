{
    "path": "config/enum_map.go",
    "model_usage_metrics": {
        "Duration": 18836496794,
        "OpenAiUsage": {
            "completion_tokens": 0,
            "prompt_tokens": 0,
            "total_tokens": 0,
            "completion_tokens_details": {
                "accepted_prediction_tokens": 0,
                "audio_tokens": 0,
                "reasoning_tokens": 0,
                "rejected_prediction_tokens": 0
            },
            "prompt_tokens_details": {
                "audio_tokens": 0,
                "cached_tokens": 0
            }
        }
    },
    "test_file_path": "config/enum_map_test.go",
    "existing_test_code": "",
    "original_code": "package config\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\n\t\"github.com/gookit/goutil/strutil\"\n\t\"github.com/pkg/errors\"\n\t\"github.com/qiangyt/jog/util\"\n)\n\n// EnumMapT ...\ntype EnumMapT struct {\n\tCaseSensitive bool `yaml:\"case-sensitive\"`\n\tDefault       string\n\tvalues        map[string]Enum // normalized name -\u003e enum\n\tallMap        map[string]Enum // normalized name + aliases -\u003e enum\n}\n\n// EnumMap ...\ntype EnumMap = *EnumMapT\n\n// Reset ...\nfunc (i EnumMap) Reset() {\n\ti.CaseSensitive = false\n\ti.Default = \"\"\n\ti.values = make(map[string]Enum)\n\ti.allMap = make(map[string]Enum)\n}\n\n// UnmarshalYAML ...\nfunc (i EnumMap) UnmarshalYAML(unmarshal func(interface{}) error) error {\n\te := UnmarshalYAML(i, unmarshal)\n\treturn e\n}\n\n// MarshalYAML ...\nfunc (i EnumMap) MarshalYAML() (interface{}, error) {\n\treturn MarshalYAML(i)\n}\n\n// Init ...\nfunc (i EnumMap) Init(cfg Configuration) {\n\n}\n\n// IsEmpty ...\nfunc (i EnumMap) IsEmpty() bool {\n\treturn len(i.values) == 0\n}\n\n// GetEnum ...\nfunc (i EnumMap) GetEnum(value string) Enum {\n\tif !i.CaseSensitive {\n\t\tvalue = strings.ToLower(value)\n\t}\n\n\tr, has := i.allMap[value]\n\tif has {\n\t\treturn r\n\t}\n\treturn i.allMap[i.Default]\n}\n\n// FromMap ...\nfunc (i EnumMap) FromMap(m map[string]interface{}) error {\n\tcaseSensitiveV := util.ExtractFromMap(m, \"case-sensitive\")\n\tif caseSensitiveV != nil {\n\t\ti.CaseSensitive = util.ToBool(caseSensitiveV)\n\t}\n\n\tdefaultV := util.ExtractFromMap(m, \"default\")\n\tif defaultV != nil {\n\t\ti.Default = strutil.MustString(defaultV)\n\t}\n\n\tfor k, v := range m {\n\t\tvar ev Enum\n\t\tif err := util.UnmashalYAMLAgain(v, \u0026ev); err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tev.Name = k\n\t\ti.values[k] = ev\n\n\t\ti.allMap[k] = ev\n\t\tif !i.CaseSensitive {\n\t\t\ti.allMap[strings.ToLower(k)] = ev\n\t\t}\n\n\t\tfor aliasName := range ev.Alias.Values {\n\t\t\ti.allMap[aliasName] = ev\n\t\t\tif !i.CaseSensitive {\n\t\t\t\ti.allMap[strings.ToLower(aliasName)] = ev\n\t\t\t}\n\t\t}\n\n\t\tdelete(m, k)\n\n\t\tif len(i.Default) == 0 {\n\t\t\ti.Default = k\n\t\t}\n\t}\n\n\tif len(i.Default) == 0 {\n\t\treturn errors.New(\"default enum not specified\")\n\t}\n\tif _, defaultMatches := i.allMap[i.Default]; !defaultMatches {\n\t\treturn fmt.Errorf(\"invalid default enum name: %s\", i.Default)\n\t}\n\n\treturn nil\n}\n\n// ToMap ...\nfunc (i EnumMap) ToMap() map[string]interface{} {\n\tr := make(map[string]interface{})\n\tr[\"case-sensitive\"] = i.CaseSensitive\n\tr[\"default\"] = i.Default\n\n\tfor k, v := range i.values {\n\t\tr[k] = v.ToMap()\n\t}\n\n\treturn r\n}\n",
    "test_code": "package config\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestEnumMapT_Reset(t *testing.T) {\n\ti := \u0026EnumMapT{\n\t\tCaseSensitive: true,\n\t\tDefault:       \"default\",\n\t\tvalues:        map[string]Enum{\"key1\": {Name: \"key1\", Alias: Alias{Values: map[string]bool{\"alias1\": true}}}},\n\t\tallMap:        map[string]Enum{\"key1\": {Name: \"key1\", Alias: Alias{Values: map[string]bool{\"alias1\": true}}}},\n\t}\n\n\ti.Reset()\n\n\tassert.False(t, i.CaseSensitive)\n\tassert.Empty(t, i.Default)\n\tassert.Empty(t, i.values)\n\tassert.Empty(t, i.allMap)\n}\n\nfunc TestEnumMapT_UnmarshalYAML(t *testing.T) {\n\tvar i EnumMap\n\terr := i.UnmarshalYAML(func(interface{}) error { return nil })\n\tassert.NoError(t, err)\n\n\ti = \u0026EnumMapT{}\n\terr = i.UnmarshalYAML(func(interface{}) error {\n\t\treturn errors.New(\"unmarshal error\")\n\t})\n\tassert.Error(t, err)\n}\n\nfunc TestEnumMapT_MarshalYAML(t *testing.T) {\n\ti := \u0026EnumMapT{\n\t\tCaseSensitive: true,\n\t\tDefault:       \"default\",\n\t\tvalues:        map[string]Enum{\"key1\": {Name: \"key1\", Alias: Alias{Values: map[string]bool{\"alias1\": true}}}},\n\t\tallMap:        map[string]Enum{\"key1\": {Name: \"key1\", Alias: Alias{Values: map[string]bool{\"alias1\": true}}}},\n\t}\n\n\tdata, err := i.MarshalYAML()\n\tassert.NoError(t, err)\n\tassert.NotNil(t, data)\n\n\ti = \u0026EnumMapT{}\n\tdata, err = i.MarshalYAML()\n\tassert.NoError(t, err)\n\tassert.Nil(t, data)\n}\n\nfunc TestEnumMapT_Init(t *testing.T) {\n\tvar i EnumMap\n\ti.Init(Configuration{})\n}\n\nfunc TestEnumMapT_IsEmpty(t *testing.T) {\n\ti := \u0026EnumMapT{\n\t\tvalues: map[string]Enum{},\n\t}\n\tassert.True(t, i.IsEmpty())\n\n\ti = \u0026EnumMapT{\n\t\tvalues: map[string]Enum{\"key1\": {Name: \"key1\", Alias: Alias{Values: map[string]bool{\"alias1\": true}}}},\n\t}\n\tassert.False(t, i.IsEmpty())\n}\n\nfunc TestEnumMapT_GetEnum(t *testing.T) {\n\ti := \u0026EnumMapT{\n\t\tCaseSensitive: false,\n\t\tDefault:       \"default\",\n\t\tvalues:        map[string]Enum{\"key1\": {Name: \"key1\", Alias: Alias{Values: map[string]bool{\"alias1\": true}}}},\n\t\tallMap:        map[string]Enum{\"key1\": {Name: \"key1\", Alias: Alias{Values: map[string]bool{\"alias1\": true}}}},\n\t}\n\n\tenum := i.GetEnum(\"Key1\")\n\tassert.Equal(t, \"key1\", enum.Name)\n\n\ti.Default = \"default2\"\n\tenum = i.GetEnum(\"Key1\")\n\tassert.Equal(t, \"default2\", enum.Name)\n}\n\nfunc TestEnumMapT_FromMap(t *testing.T) {\n\tvar i EnumMap\n\terr := i.FromMap(map[string]interface{}{\n\t\t\"case-sensitive\": true,\n\t\t\"default\":        \"default\",\n\t\t\"key1\":           map[string]interface{}{\"name\": \"key1\", \"alias\": map[string]bool{\"alias1\": true}},\n\t})\n\tassert.NoError(t, err)\n\tassert.True(t, i.CaseSensitive)\n\tassert.Equal(t, \"default\", i.Default)\n\tassert.Len(t, i.values, 1)\n\tassert.Len(t, i.allMap, 2)\n\n\terr = i.FromMap(map[string]interface{}{\n\t\t\"case-sensitive\": true,\n\t})\n\tassert.Error(t, err)\n\n\terr = i.FromMap(map[string]interface{}{\n\t\t\"default\": \"default\",\n\t})\n\tassert.NoError(t, err)\n}\n\nfunc TestEnumMapT_ToMap(t *testing.T) {\n\ti := \u0026EnumMapT{\n\t\tCaseSensitive: true,\n\t\tDefault:       \"default\",\n\t\tvalues:        map[string]Enum{\"key1\": {Name: \"key1\", Alias: Alias{Values: map[string]bool{\"alias1\": true}}}},\n\t\tallMap:        map[string]Enum{\"key1\": {Name: \"key1\", Alias: Alias{Values: map[string]bool{\"alias1\": true}}}},\n\t}\n\n\tdata := i.ToMap()\n\tassert.Equal(t, true, data[\"case-sensitive\"])\n\tassert.Equal(t, \"default\", data[\"default\"])\n\tassert.Len(t, data, 2)\n}\n!!!!test_end!!!!\n",
    "amount_of_generated_test_cases": 10,
    "single_test_run_command": "go test -v config/enum_map_test.go"
}