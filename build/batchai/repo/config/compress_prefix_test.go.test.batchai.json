{
    "path": "config/compress_prefix_test.go",
    "model_usage_metrics": {
        "Duration": 35660642142,
        "OpenAiUsage": {
            "completion_tokens": 0,
            "prompt_tokens": 0,
            "total_tokens": 0,
            "completion_tokens_details": {
                "accepted_prediction_tokens": 0,
                "audio_tokens": 0,
                "reasoning_tokens": 0,
                "rejected_prediction_tokens": 0
            },
            "prompt_tokens_details": {
                "audio_tokens": 0,
                "cached_tokens": 0
            }
        }
    },
    "test_file_path": "config/compress_prefix_test.go",
    "existing_test_code": "",
    "original_code": "package config\n\nimport (\n\t\"testing\"\n)\n\nfunc TestCompressPrefixActionString(t *testing.T) {\n\ttestCases := []struct {\n\t\tname     string\n\t\tinput    CompressPrefixAction\n\t\texpected string\n\t}{\n\t\t{\"RemoveNonFirstLetter\", CompressPrefixActionRemoveNonFirstLetter, \"remove-non-first-letter\"},\n\t\t{\"Remove\", CompressPrefixActionRemove, \"remove\"},\n\t\t{\"Default\", CompressPrefixActionDefault, \"remove-non-first-letter\"},\n\t}\n\n\tfor _, tc := range testCases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tresult := tc.input.String()\n\t\t\tif result != tc.expected {\n\t\t\t\tt.Errorf(\"Expected %s, got %s\", tc.expected, result)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestParseCompressPrefixAction(t *testing.T) {\n\ttestCases := []struct {\n\t\tname     string\n\t\tinput    string\n\t\texpected CompressPrefixAction\n\t}{\n\t\t{\"RemoveNonFirstLetter\", \"remove-non-first-letter\", CompressPrefixActionRemoveNonFirstLetter},\n\t\t{\"Remove\", \"remove\", CompressPrefixActionRemove},\n\t\t{\"Unknown\", \"unknown\", CompressPrefixActionDefault},\n\t}\n\n\tfor _, tc := range testCases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tresult := ParseCompressPrefixAction(tc.input)\n\t\t\tif result != tc.expected {\n\t\t\t\tt.Errorf(\"Expected %v, got %v\", tc.expected, result)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestCompressPrefixT_Init(t *testing.T) {\n\ttestCases := []struct {\n\t\tname     string\n\t\tinput    CompressPrefixT\n\t\texpected CompressPrefixT\n\t}{\n\t\t{\"Default\", CompressPrefixT{}, CompressPrefixT{Enabled: false, Separators: StringSet{}, WhiteList: StringSet{}, Action: CompressPrefixActionDefault}},\n\t}\n\n\tfor _, tc := range testCases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\ttc.input.Init(Configuration{})\n\t\t\tif tc.input.Enabled != tc.expected.Enabled || !tc.input.Separators.Equal(\u0026tc.expected.Separators) || !tc.input.WhiteList.Equal(\u0026tc.expected.WhiteList) || tc.input.Action != tc.expected.Action {\n\t\t\t\tt.Errorf(\"Expected %+v, got %+v\", tc.expected, tc.input)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestCompressPrefixT_FromMap(t *testing.T) {\n\ttestCases := []struct {\n\t\tname     string\n\t\tinput    CompressPrefixT\n\t\tdata     map[string]interface{}\n\t\texpected CompressPrefixT\n\t}{\n\t\t{\"Default\", CompressPrefixT{}, map[string]interface{}{}, CompressPrefixT{Enabled: false, Separators: StringSet{}, WhiteList: StringSet{}, Action: CompressPrefixActionDefault}},\n\t\t{\"WithValues\", CompressPrefixT{}, map[string]interface{}{\n\t\t\t\"enabled\": true,\n\t\t\t\"separators\": []string{\n\t\t\t\t\"-\",\n\t\t\t\t\"_\",\n\t\t\t},\n\t\t\t\"white_list\": []string{\n\t\t\t\t\"prefix1\",\n\t\t\t\t\"prefix2\",\n\t\t\t},\n\t\t\t\"action\": \"remove\",\n\t\t}, CompressPrefixT{Enabled: true, Separators: StringSet{\"-\": struct{}{}, \"_\": struct{}{}}, WhiteList: StringSet{\"prefix1\": struct{}{}, \"prefix2\": struct{}{}}, Action: CompressPrefixActionRemove}},\n\t}\n\n\tfor _, tc := range testCases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\terr := tc.input.FromMap(tc.data)\n\t\t\tif err != nil {\n\t\t\t\tt.Errorf(\"Expected no error, got %v\", err)\n\t\t\t}\n\t\t\tif tc.input.Enabled != tc.expected.Enabled || !tc.input.Separators.Equal(\u0026tc.expected.Separators) || !tc.input.WhiteList.Equal(\u0026tc.expected.WhiteList) || tc.input.Action != tc.expected.Action {\n\t\t\t\tt.Errorf(\"Expected %+v, got %+v\", tc.expected, tc.input)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestCompressPrefixT_Compress(t *testing.T) {\n\ttestCases := []struct {\n\t\tname     string\n\t\tinput    CompressPrefixT\n\t\ttext     string\n\t\texpected string\n\t}{\n\t\t{\"RemoveNonFirstLetter\", CompressPrefixT{Action: CompressPrefixActionRemoveNonFirstLetter}, \"hello-world\", \"h-w\"},\n\t\t{\"Remove\", CompressPrefixT{Action: CompressPrefixActionRemove}, \"hello-world\", \"world\"},\n\t\t{\"NoAction\", CompressPrefixT{}, \"hello-world\", \"hello-world\"},\n\t}\n\n\tfor _, tc := range testCases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tresult := tc.input.Compress(tc.text)\n\t\t\tif result != tc.expected {\n\t\t\t\tt.Errorf(\"Expected %s, got %s\", tc.expected, result)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "test_code": "package config\n\nimport (\n\t\"testing\"\n)\n\nfunc TestCompressPrefixActionString_HappyPath(t *testing.T) {\n\t// Test the String method for each CompressPrefixAction value\n\ttestCases := []struct {\n\t\tname     string\n\t\tinput    CompressPrefixAction\n\t\texpected string\n\t}{\n\t\t{\"RemoveNonFirstLetter\", CompressPrefixActionRemoveNonFirstLetter, \"remove-non-first-letter\"},\n\t\t{\"Remove\", CompressPrefixActionRemove, \"remove\"},\n\t\t{\"Default\", CompressPrefixActionDefault, \"remove-non-first-letter\"},\n\t}\n\n\tfor _, tc := range testCases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tresult := tc.input.String()\n\t\t\tif result != tc.expected {\n\t\t\t\tt.Errorf(\"Expected %s, got %s\", tc.expected, result)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestCompressPrefixActionString_NegativePath(t *testing.T) {\n\t// Test the String method with an invalid CompressPrefixAction value\n\ttestCases := []struct {\n\t\tname     string\n\t\tinput    CompressPrefixAction\n\t\texpected string\n\t}{\n\t\t{\"InvalidValue\", CompressPrefixAction(100), \"\"},\n\t}\n\n\tfor _, tc := range testCases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tresult := tc.input.String()\n\t\t\tif result != tc.expected {\n\t\t\t\tt.Errorf(\"Expected %s, got %s\", tc.expected, result)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestParseCompressPrefixAction_HappyPath(t *testing.T) {\n\t// Test the ParseCompressPrefixAction function with valid input strings\n\ttestCases := []struct {\n\t\tname     string\n\t\tinput    string\n\t\texpected CompressPrefixAction\n\t}{\n\t\t{\"RemoveNonFirstLetter\", \"remove-non-first-letter\", CompressPrefixActionRemoveNonFirstLetter},\n\t\t{\"Remove\", \"remove\", CompressPrefixActionRemove},\n\t\t{\"Default\", \"default\", CompressPrefixActionDefault},\n\t}\n\n\tfor _, tc := range testCases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tresult := ParseCompressPrefixAction(tc.input)\n\t\t\tif result != tc.expected {\n\t\t\t\tt.Errorf(\"Expected %v, got %v\", tc.expected, result)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestParseCompressPrefixAction_NegativePath(t *testing.T) {\n\t// Test the ParseCompressPrefixAction function with invalid input strings\n\ttestCases := []struct {\n\t\tname     string\n\t\tinput    string\n\t\texpected CompressPrefixAction\n\t}{\n\t\t{\"Unknown\", \"unknown\", CompressPrefixActionDefault},\n\t}\n\n\tfor _, tc := range testCases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tresult := ParseCompressPrefixAction(tc.input)\n\t\t\tif result != tc.expected {\n\t\t\t\tt.Errorf(\"Expected %v, got %v\", tc.expected, result)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestCompressPrefixT_Init_HappyPath(t *testing.T) {\n\t// Test the Init method with default values\n\ttestCases := []struct {\n\t\tname     string\n\t\tinput    CompressPrefixT\n\t\texpected CompressPrefixT\n\t}{\n\t\t{\"Default\", CompressPrefixT{}, CompressPrefixT{Enabled: false, Separators: StringSet{}, WhiteList: StringSet{}, Action: CompressPrefixActionRemoveNonFirstLetter}},\n\t}\n\n\tfor _, tc := range testCases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\ttc.input.Init()\n\t\t\tif tc.input.Enabled != tc.expected.Enabled || !tc.input.Separators.Equal(tc.expected.Separators) || !tc.input.WhiteList.Equal(tc.expected.WhiteList) || tc.input.Action != tc.expected.Action {\n\t\t\t\tt.Errorf(\"Expected %+v, got %+v\", tc.expected, tc.input)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestCompressPrefixT_Init_NegativePath(t *testing.T) {\n\t// Test the Init method with invalid values\n\ttestCases := []struct {\n\t\tname     string\n\t\tinput    CompressPrefixT\n\t\texpected CompressPrefixT\n\t}{\n\t\t{\"InvalidAction\", CompressPrefixT{Action: 100}, CompressPrefixT{Enabled: false, Separators: StringSet{}, WhiteList: StringSet{}, Action: CompressPrefixActionRemoveNonFirstLetter}},\n\t}\n\n\tfor _, tc := range testCases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\ttc.input.Init()\n\t\t\tif tc.input.Enabled != tc.expected.Enabled || !tc.input.Separators.Equal(tc.expected.Separators) || !tc.input.WhiteList.Equal(tc.expected.WhiteList) || tc.input.Action != tc.expected.Action {\n\t\t\t\tt.Errorf(\"Expected %+v, got %+v\", tc.expected, tc.input)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestCompressPrefixT_Compress_HappyPath(t *testing.T) {\n\t// Test the Compress method with different input strings and actions\n\ttestCases := []struct {\n\t\tname     string\n\t\tinput    CompressPrefixT\n\t\ttext     string\n\t\texpected string\n\t}{\n\t\t{\"RemoveNonFirstLetter\", CompressPrefixT{Action: CompressPrefixActionRemoveNonFirstLetter}, \"hello-world\", \"h-w\"},\n\t\t{\"Remove\", CompressPrefixT{Action: CompressPrefixActionRemove}, \"hello-world\", \"world\"},\n\t\t{\"NoAction\", CompressPrefixT{}, \"hello-world\", \"hello-world\"},\n\t}\n\n\tfor _, tc := range testCases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tresult := tc.input.Compress(tc.text)\n\t\t\tif result != tc.expected {\n\t\t\t\tt.Errorf(\"Expected %s, got %s\", tc.expected, result)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestCompressPrefixT_Compress_NegativePath(t *testing.T) {\n\t// Test the Compress method with invalid input strings\n\ttestCases := []struct {\n\t\tname     string\n\t\tinput    CompressPrefixT\n\t\ttext     string\n\t\texpected string\n\t}{\n\t\t{\"EmptyString\", CompressPrefixT{Action: CompressPrefixActionRemoveNonFirstLetter}, \"\", \"\"},\n\t}\n\n\tfor _, tc := range testCases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tresult := tc.input.Compress(tc.text)\n\t\t\tif result != tc.expected {\n\t\t\t\tt.Errorf(\"Expected %s, got %s\", tc.expected, result)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestCompressPrefixT_Compress_WithSeparators(t *testing.T) {\n\t// Test the Compress method with separators\n\ttestCases := []struct {\n\t\tname     string\n\t\tinput    CompressPrefixT\n\t\ttext     string\n\t\texpected string\n\t}{\n\t\t{\"RemoveNonFirstLetterWithSeparator\", CompressPrefixT{Action: CompressPrefixActionRemoveNonFirstLetter, Separators: StringSet{\"-\"}}, \"hello-world\", \"h-w\"},\n\t}\n\n\tfor _, tc := range testCases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tresult := tc.input.Compress(tc.text)\n\t\t\tif result != tc.expected {\n\t\t\t\tt.Errorf(\"Expected %s, got %s\", tc.expected, result)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestCompressPrefixT_Compress_WithWhiteList(t *testing.T) {\n\t// Test the Compress method with white list\n\ttestCases := []struct {\n\t\tname     string\n\t\tinput    CompressPrefixT\n\t\ttext     string\n\t\texpected string\n\t}{\n\t\t{\"RemoveNonFirstLetterWithWhiteList\", CompressPrefixT{Action: CompressPrefixActionRemoveNonFirstLetter, WhiteList: StringSet{\"hello\"}}, \"hello-world\", \"h-w\"},\n\t}\n\n\tfor _, tc := range testCases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tresult := tc.input.Compress(tc.text)\n\t\t\tif result != tc.expected {\n\t\t\t\tt.Errorf(\"Expected %s, got %s\", tc.expected, result)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestCompressPrefixT_Compress_WithBothSeparatorsAndWhiteList(t *testing.T) {\n\t// Test the Compress method with both separators and white list\n\ttestCases := []struct {\n\t\tname     string\n\t\tinput    CompressPrefixT\n\t\ttext     string\n\t\texpected string\n\t}{\n\t\t{\"RemoveNonFirstLetterWithBoth\", CompressPrefixT{Action: CompressPrefixActionRemoveNonFirstLetter, Separators: StringSet{\"-\"}, WhiteList: StringSet{\"hello\"}}, \"hello-world\", \"h-w\"},\n\t}\n\n\tfor _, tc := range testCases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tresult := tc.input.Compress(tc.text)\n\t\t\tif result != tc.expected {\n\t\t\t\tt.Errorf(\"Expected %s, got %s\", tc.expected, result)\n\t\t\t}\n\t\t})\n\t}\n}\n",
    "amount_of_generated_test_cases": 15,
    "single_test_run_command": "go test -v config/compress_prefix_test.go"
}