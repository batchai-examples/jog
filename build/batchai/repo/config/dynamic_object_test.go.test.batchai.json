{
    "path": "config/dynamic_object_test.go",
    "model_usage_metrics": {
        "Duration": 13363895161,
        "OpenAiUsage": {
            "completion_tokens": 0,
            "prompt_tokens": 0,
            "total_tokens": 0,
            "completion_tokens_details": {
                "accepted_prediction_tokens": 0,
                "audio_tokens": 0,
                "reasoning_tokens": 0,
                "rejected_prediction_tokens": 0
            },
            "prompt_tokens_details": {
                "audio_tokens": 0,
                "cached_tokens": 0
            }
        }
    },
    "test_file_path": "config/dynamic_object_test.go",
    "existing_test_code": "",
    "original_code": "package config\n\nimport (\n\t\"errors\"\n\t\"testing\"\n\n\t. \"github.com/golang/mock/gomock\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc Test_UnmarshalYAML_happy(t *testing.T) {\n\tassert := require.New(t)\n\n\tctrl := NewController(t)\n\tdefer ctrl.Finish()\n\n\tmock := NewMockDynamicObject(ctrl)\n\n\tm := map[string]interface{}{\"a\": \"b\"}\n\tInOrder(\n\t\tmock.EXPECT().Reset().Times(1),\n\t\tmock.EXPECT().FromMap(m).Times(1),\n\t)\n\n\terr := UnmarshalYAML(mock, func(output interface{}) error {\n\t\t(*output.(*map[string]interface{}))[\"a\"] = \"b\"\n\t\treturn nil\n\t})\n\n\tassert.NoError(err)\n}\n\nfunc Test_UnmarshalYAML_error_on_unmarshal(t *testing.T) {\n\tassert := require.New(t)\n\n\tctrl := NewController(t)\n\tdefer ctrl.Finish()\n\n\tmock := NewMockDynamicObject(ctrl)\n\n\tmock.EXPECT().Reset().Times(0)\n\tmock.EXPECT().FromMap(Any()).Times(0)\n\n\terr := UnmarshalYAML(mock, func(output interface{}) error {\n\t\treturn errors.New(\"expected\")\n\t})\n\n\tassert.Error(err)\n\tassert.Equal(\"expected\", err.Error())\n}\n\nfunc Test_UnmarshalYAML_error_on_FromMap(t *testing.T) {\n\tassert := require.New(t)\n\n\tctrl := NewController(t)\n\tdefer ctrl.Finish()\n\n\tmock := NewMockDynamicObject(ctrl)\n\n\tInOrder(\n\t\tmock.EXPECT().Reset(),\n\t\tmock.EXPECT().FromMap(Any()).Return(errors.New(\"expected\")),\n\t\tmock.EXPECT().Reset(),\n\t)\n\n\terr := UnmarshalYAML(mock, func(output interface{}) error {\n\t\treturn nil\n\t})\n\n\tassert.Error(err)\n\tassert.Equal(\"expected\", err.Error())\n}\n\nfunc Test_MarshalYAML(t *testing.T) {\n\tassert := require.New(t)\n\n\tctrl := NewController(t)\n\tdefer ctrl.Finish()\n\n\tmock := NewMockDynamicObject(ctrl)\n\n\tmock.EXPECT().ToMap().Times(1).Return(map[string]interface{}{\"a\": \"b\"})\n\n\tactual, err := MarshalYAML(mock)\n\n\tassert.NoError(err)\n\n\tactualMap := actual.(map[string]interface{})\n\tassert.Equal(1, len(actualMap))\n\tassert.Equal(\"b\", actualMap[\"a\"])\n}\n",
    "test_code": "package config\n\nimport (\n\t\"errors\"\n\t\"testing\"\n\n\t. \"github.com/golang/mock/gomock\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc Test_UnmarshalYAML_happy(t *testing.T) {\n\tassert := require.New(t)\n\n\tctrl := NewController(t)\n\tdefer ctrl.Finish()\n\n\tmock := NewMockDynamicObject(ctrl)\n\n\tm := map[string]interface{}{\"a\": \"b\"}\n\tInOrder(\n\t\tmock.EXPECT().Reset().Times(1),\n\t\tmock.EXPECT().FromMap(m).Times(1),\n\t)\n\n\terr := UnmarshalYAML(mock, func(output interface{}) error {\n\t\t(*output.(*map[string]interface{}))[\"a\"] = \"b\"\n\t\treturn nil\n\t})\n\n\tassert.NoError(err)\n}\n\nfunc Test_UnmarshalYAML_error_on_unmarshal(t *testing.T) {\n\tassert := require.New(t)\n\n\tctrl := NewController(t)\n\tdefer ctrl.Finish()\n\n\tmock := NewMockDynamicObject(ctrl)\n\n\tmock.EXPECT().Reset().Times(0)\n\tmock.EXPECT().FromMap(Any()).Times(0)\n\n\terr := UnmarshalYAML(mock, func(output interface{}) error {\n\t\treturn errors.New(\"expected\")\n\t})\n\n\tassert.Error(err)\n\tassert.Equal(\"expected\", err.Error())\n}\n\nfunc Test_UnmarshalYAML_error_on_FromMap(t *testing.T) {\n\tassert := require.New(t)\n\n\tctrl := NewController(t)\n\tdefer ctrl.Finish()\n\n\tmock := NewMockDynamicObject(ctrl)\n\n\tInOrder(\n\t\tmock.EXPECT().Reset(),\n\t\tmock.EXPECT().FromMap(Any()).Return(errors.New(\"expected\")),\n\t\tmock.EXPECT().Reset(),\n\t)\n\n\terr := UnmarshalYAML(mock, func(output interface{}) error {\n\t\treturn nil\n\t})\n\n\tassert.Error(err)\n\tassert.Equal(\"expected\", err.Error())\n}\n\nfunc Test_MarshalYAML(t *testing.T) {\n\tassert := require.New(t)\n\n\tctrl := NewController(t)\n\tdefer ctrl.Finish()\n\n\tmock := NewMockDynamicObject(ctrl)\n\n\tmock.EXPECT().ToMap().Times(1).Return(map[string]interface{}{\"a\": \"b\"})\n\n\tactual, err := MarshalYAML(mock)\n\n\tassert.NoError(err)\n\n\tactualMap := actual.(map[string]interface{})\n\tassert.Equal(1, len(actualMap))\n\tassert.Equal(\"b\", actualMap[\"a\"])\n}\n\nfunc Test_UnmarshalYAML_empty_map(t *testing.T) {\n\tassert := require.New(t)\n\n\tctrl := NewController(t)\n\tdefer ctrl.Finish()\n\n\tmock := NewMockDynamicObject(ctrl)\n\n\tm := map[string]interface{}{}\n\tInOrder(\n\t\tmock.EXPECT().Reset().Times(1),\n\t\tmock.EXPECT().FromMap(m).Times(1),\n\t)\n\n\terr := UnmarshalYAML(mock, func(output interface{}) error {\n\t\t(*output.(*map[string]interface{}))[\"a\"] = \"b\"\n\t\treturn nil\n\t})\n\n\tassert.NoError(err)\n}\n\nfunc Test_MarshalYAML_empty_map(t *testing.T) {\n\tassert := require.New(t)\n\n\tctrl := NewController(t)\n\tdefer ctrl.Finish()\n\n\tmock := NewMockDynamicObject(ctrl)\n\n\tmock.EXPECT().ToMap().Times(1).Return(map[string]interface{}{})\n\n\tactual, err := MarshalYAML(mock)\n\n\tassert.NoError(err)\n\n\tactualMap := actual.(map[string]interface{})\n\tassert.Equal(0, len(actualMap))\n}\n",
    "amount_of_generated_test_cases": 6,
    "single_test_run_command": "go test -v config/dynamic_object_test.go"
}