{
    "path": "options.go",
    "model_usage_metrics": {
        "Duration": 120000270047,
        "OpenAiUsage": {
            "completion_tokens": 0,
            "prompt_tokens": 0,
            "total_tokens": 0,
            "completion_tokens_details": {
                "accepted_prediction_tokens": 0,
                "audio_tokens": 0,
                "reasoning_tokens": 0,
                "rejected_prediction_tokens": 0
            },
            "prompt_tokens_details": {
                "audio_tokens": 0,
                "cached_tokens": 0
            }
        }
    },
    "test_file_path": "options_test.go",
    "existing_test_code": "",
    "original_code": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\t\"time\"\n\n\t\"github.com/gookit/color\"\n\t\"github.com/gookit/goutil/strutil\"\n\t\"github.com/qiangyt/jog/config\"\n\t\"github.com/tj/go-naturaldate\"\n)\n\n// OptionsT ...\ntype OptionsT struct {\n\tLogFilePath     string\n\tConfigFilePath  string\n\tDebug           bool\n\tConfigItemPath  string\n\tConfigItemValue string\n\tFollowMode      bool\n\tNumberOfLines   int\n\n\tlevelFilterTexts []string\n\tlevelFilters     []config.Enum\n\n\tbeforeFilterText string\n\tBeforeFilter     *time.Time\n\n\tafterFilterText string\n\tAfterFilter     *time.Time\n\n\tOutputRawJSON bool\n\n\tGrokPatternsUsed []string\n\tGrokPatterns     []string\n}\n\n// Options ...\ntype Options = *OptionsT\n\n// InitGroks ...\nfunc (i Options) InitGroks(cfg config.Configuration) {\n\tif len(i.GrokPatternsUsed) == 0 {\n\t\t// try to uses default patterns\n\t\ti.GrokPatternsUsed = cfg.Grok.Uses\n\t}\n\n\ti.GrokPatterns = make([]string, len(i.GrokPatternsUsed))\n\tfor index, patternName := range i.GrokPatternsUsed {\n\t\ti.GrokPatterns[index] = \"%{\" + patternName + \"}\"\n\t}\n}\n\nfunc (i Options) isGrokEnabled() bool {\n\treturn len(i.GrokPatterns) \u003e 0\n}\n\n// GetLevelFilters ...\nfunc (i Options) GetLevelFilters() []config.Enum {\n\treturn i.levelFilters\n}\n\n// InitLevelFilters ...\nfunc (i Options) InitLevelFilters(levelFieldEnums config.EnumMap) {\n\tif len(i.levelFilterTexts) == 0 {\n\t\ti.levelFilters = make([]config.Enum, 0)\n\t\treturn\n\t}\n\n\tfor _, levelFilterText := range i.levelFilterTexts {\n\t\tlevelFilter := levelFieldEnums.GetEnum(levelFilterText)\n\t\ti.levelFilters = append(i.levelFilters, levelFilter)\n\t}\n}\n\n// InitTimestampFilters ...\nfunc (i Options) InitTimestampFilters(timestampField config.Field) {\n\tnow := time.Now()\n\n\tif len(i.beforeFilterText) \u003e 0 {\n\t\tf, err := naturaldate.Parse(i.beforeFilterText, now, naturaldate.WithDirection(naturaldate.Past))\n\t\tif err != nil {\n\t\t\tlog.Printf(\"failed to parse before-time filter %s as natural timestamp, so try absolute parse\\n\", i.beforeFilterText)\n\t\t\tf = ParseTimestamp(timestampField, i.beforeFilterText)\n\t\t}\n\t\tlog.Printf(\"before-time filter: %v\", f)\n\t\ti.BeforeFilter = \u0026f\n\t}\n\tif len(i.afterFilterText) \u003e 0 {\n\t\tf, err := naturaldate.Parse(i.afterFilterText, now, naturaldate.WithDirection(naturaldate.Past))\n\t\tif err != nil {\n\t\t\tlog.Printf(\"failed to parse after-time filter %s as natural timestamp, so try absolute parse\\n\", i.afterFilterText)\n\t\t\tf = ParseTimestamp(timestampField, i.afterFilterText)\n\t\t}\n\t\tlog.Printf(\"after-time filter: %v\", f)\n\t\ti.AfterFilter = \u0026f\n\n\t\tif i.BeforeFilter != nil {\n\t\t\tif i.BeforeFilter.Before(*i.AfterFilter) {\n\t\t\t\tpanic(fmt.Errorf(\"before-time filter (%s) shouldn't be before after-time filter (%s)\", i.beforeFilterText, i.afterFilterText))\n\t\t\t}\n\t\t}\n\t}\n}\n\n// HasTimestampFilter ...\nfunc (i Options) HasTimestampFilter() bool {\n\treturn i.BeforeFilter != nil || i.AfterFilter != nil\n}\n\nfunc printErrorHint(format string, a ...interface{}) {\n\tPrintHelp()\n\tcolor.Red.Printf(format+\". Please check above example\\n\", a...)\n}\n\n// OptionsWithCommandLine ...\nfunc OptionsWithCommandLine() (bool, Options) {\n\n\tr := \u0026OptionsT{\n\t\tDebug:            false,\n\t\tFollowMode:       false,\n\t\tNumberOfLines:    -1,\n\t\tlevelFilterTexts: make([]string, 0),\n\t\tGrokPatternsUsed: make([]string, 0),\n\t}\n\tvar err error\n\tvar hasNumberOfLines = false\n\n\tfor i := 0; i \u003c len(os.Args); i++ {\n\t\tif i == 0 {\n\t\t\tcontinue\n\t\t}\n\n\t\targ := os.Args[i]\n\n\t\tif arg[0:1] == \"-\" {\n\t\t\tif arg == \"-c\" || arg == \"--config\" {\n\t\t\t\tif i+1 \u003e= len(os.Args) {\n\t\t\t\t\tprintErrorHint(\"Missing config file path\")\n\t\t\t\t\treturn false, nil\n\t\t\t\t}\n\n\t\t\t\tr.ConfigFilePath = os.Args[i+1]\n\t\t\t\ti++\n\t\t\t} else if arg == \"-cs\" || arg == \"--config-set\" {\n\t\t\t\tif i+1 \u003e= len(os.Args) {\n\t\t\t\t\tprintErrorHint(\"Missing config item expression\")\n\t\t\t\t\treturn false, nil\n\t\t\t\t}\n\n\t\t\t\tr.ConfigItemPath, r.ConfigItemValue, err = ParseConfigExpression(os.Args[i+1])\n\t\t\t\tif err != nil {\n\t\t\t\t\tprintErrorHint(\"%v\", err)\n\t\t\t\t\treturn false, nil\n\t\t\t\t}\n\t\t\t\ti++\n\t\t\t} else if arg == \"-cg\" || arg == \"--config-get\" {\n\t\t\t\tif i+1 \u003e= len(os.Args) {\n\t\t\t\t\tprintErrorHint(\"Missing config item path\")\n\t\t\t\t\treturn false, nil\n\t\t\t\t}\n\n\t\t\t\tr.ConfigItemPath = os.Args[i+1]\n\t\t\t\ti++\n\t\t\t} else if arg == \"-f\" || arg == \"--follow\" {\n\t\t\t\tr.FollowMode = true\n\t\t\t} else if arg == \"-n\" || arg == \"--lines\" {\n\t\t\t\tif i+1 \u003e= len(os.Args) {\n\t\t\t\t\tprintErrorHint(\"Missing lines argument\")\n\t\t\t\t\treturn false, nil\n\t\t\t\t}\n\n\t\t\t\tr.NumberOfLines = strutil.MustInt(os.Args[i+1])\n\t\t\t\thasNumberOfLines = true\n\t\t\t\ti++\n\t\t\t} else if arg == \"-t\" || arg == \"--template\" {\n\t\t\t\tPrintConfigTemplate()\n\t\t\t\treturn false, nil\n\t\t\t} else if arg == \"-h\" || arg == \"--help\" {\n\t\t\t\tPrintHelp()\n\t\t\t\treturn false, nil\n\t\t\t} else if arg == \"-V\" || arg == \"--version\" {\n\t\t\t\tPrintVersion()\n\t\t\t\treturn false, nil\n\t\t\t} else if arg == \"-d\" || arg == \"--debug\" {\n\t\t\t\tr.Debug = true\n\t\t\t} else if arg == \"-j\" || arg == \"--json\" {\n\t\t\t\tr.OutputRawJSON = true\n\t\t\t} else if arg == \"-l\" || arg == \"--level\" {\n\t\t\t\tif i+1 \u003e= len(os.Args) {\n\t\t\t\t\tprintErrorHint(\"Missing level argument\")\n\t\t\t\t\treturn false, nil\n\t\t\t\t}\n\n\t\t\t\tr.levelFilterTexts = append(r.levelFilterTexts, os.Args[i+1])\n\t\t\t\ti++\n\t\t\t} else if arg == \"-g\" || arg == \"--grok\" {\n\t\t\t\tif i+1 \u003e= len(os.Args) {\n\t\t\t\t\tprintErrorHint(\"Missing grok argument\")\n\t\t\t\t\treturn false, nil\n\t\t\t\t}\n\n\t\t\t\tr.GrokPatternsUsed = append(r.GrokPatternsUsed, os.Args[i+1])\n\t\t\t\ti++\n\t\t\t} else if arg == \"--reset-grok-library-dir\" {\n\t\t\t\tconfig.ResetDefaultGrokLibraryDir()\n\t\t\t\treturn false, nil\n\t\t\t} else if arg == \"-a\" || arg == \"--after\" {\n\t\t\t\tif i+1 \u003e= len(os.Args) {\n\t\t\t\t\tprintErrorHint(\"Missing after argument\")\n\t\t\t\t\treturn false, nil\n\t\t\t\t}\n\n\t\t\t\tr.afterFilterText = os.Args[i+1]\n\t\t\t\ti++\n\t\t\t} else if arg == \"-b\" || arg == \"--before\" {\n\t\t\t\tif i+1 \u003e= len(os.Args) {\n\t\t\t\t\tprintErrorHint(\"Missing before argument\")\n\t\t\t\t\treturn false, nil\n\t\t\t\t}\n\n\t\t\t\tr.beforeFilterText = os.Args[i+1]\n\t\t\t\ti++\n\t\t\t} else {\n\t\t\t\tprintErrorHint(\"Unknown option: '%s'\", arg)\n\t\t\t\treturn false, nil\n\t\t\t}\n\t\t} else {\n\t\t\tr.LogFilePath = arg\n\t\t}\n\t}\n\n\tif !hasNumberOfLines {\n\t\tif r.FollowMode {\n\t\t\tr.NumberOfLines = 10\n\t\t}\n\t}\n\n\treturn true, r\n}\n",
    "test_code": "package main\n\nimport (\n\t\"testing\"\n)\n\nfunc TestOptionsWithCommandLine_HappyPath(t *testing.T) {\n\t// Arrange\n\tos.Args = []string{\"jog\", \"-c\", \"config.yaml\", \"-f\", \"--debug\"}\n\n\t// Act\n\thasConfig, options := OptionsWithCommandLine()\n\n\t// Assert\n\tif !hasConfig {\n\t\tt.Errorf(\"Expected to have config, but got false\")\n\t}\n\tif options.ConfigFilePath != \"config.yaml\" {\n\t\tt.Errorf(\"Expected config file path to be 'config.yaml', but got '%s'\", options.ConfigFilePath)\n\t}\n\tif !options.FollowMode {\n\t\tt.Errorf(\"Expected follow mode to be true, but got false\")\n\t}\n\tif options.Debug != true {\n\t\tt.Errorf(\"Expected debug mode to be true, but got %v\", options.Debug)\n\t}\n}\n\nfunc TestOptionsWithCommandLine_ErrorHandling(t *testing.T) {\n\t// Arrange\n\tos.Args = []string{\"jog\", \"-c\"}\n\n\t// Act \u0026 Assert\n\thasConfig, _ := OptionsWithCommandLine()\n\tif hasConfig {\n\t\tt.Errorf(\"Expected to not have config, but got true\")\n\t}\n}\n\nfunc TestOptionsWithCommandLine_MissingArguments(t *testing.T) {\n\t// Arrange\n\tos.Args = []string{\"jog\", \"-c\", \"config.yaml\", \"--before\"}\n\n\t// Act \u0026 Assert\n\thasConfig, _ := OptionsWithCommandLine()\n\tif hasConfig {\n\t\tt.Errorf(\"Expected to not have config, but got true\")\n\t}\n}\n\nfunc TestOptionsWithCommandLine_UnknownOption(t *testing.T) {\n\t// Arrange\n\tos.Args = []string{\"jog\", \"-c\", \"config.yaml\", \"--unknown\"}\n\n\t// Act \u0026 Assert\n\thasConfig, _ := OptionsWithCommandLine()\n\tif hasConfig {\n\t\tt.Errorf(\"Expected to not have config, but got true\")\n\t}\n}\n\nfunc TestOptionsWithCommandLine_DefaultValues(t *testing.T) {\n\t// Arrange\n\tos.Args = []string{\"jog\", \"log.txt\"}\n\n\t// Act\n\thasConfig, options := OptionsWithCommandLine()\n\n\t// Assert\n\tif !hasConfig {\n\t\tt.Errorf(\"Expected to have config, but got false\")\n\t}\n\tif options.LogFilePath != \"log.txt\" {\n\t\tt.Errorf(\"Expected log file path to be 'log.txt', but got '%s'\", options.LogFilePath)\n\t}\n\tif options.NumberOfLines != -1 {\n\t\tt.Errorf(\"Expected number of lines to be -1, but got %d\", options.NumberOfLines)\n\t}\n\tif !options.FollowMode {\n\t\tt.Errorf(\"Expected follow mode to be false, but got true\")\n\t}\n\tif options.Debug != false {\n\t\tt.Errorf(\"Expected debug mode to be false, but got %v\", options.Debug)\n\t}\n}\n\nfunc TestOptionsWithCommandLine_NumberOfLines(t *testing.T) {\n\t// Arrange\n\tos.Args = []string{\"jog\", \"log.txt\", \"-n\", \"10\"}\n\n\t// Act\n\thasConfig, options := OptionsWithCommandLine()\n\n\t// Assert\n\tif !hasConfig {\n\t\tt.Errorf(\"Expected to have config, but got false\")\n\t}\n\tif options.LogFilePath != \"log.txt\" {\n\t\tt.Errorf(\"Expected log file path to be 'log.txt', but got '%s'\", options.LogFilePath)\n\t}\n\tif options.NumberOfLines != 10 {\n\t\tt.Errorf(\"Expected number of lines to be 10, but got %d\", options.NumberOfLines)\n\t}\n}\n\nfunc TestOptionsWithCommandLine_FollowMode(t *testing.T) {\n\t// Arrange\n\tos.Args = []string{\"jog\", \"log.txt\", \"-f\"}\n\n\t// Act\n\thasConfig, options := OptionsWithCommandLine()\n\n\t// Assert\n\tif !hasConfig {\n\t\tt.Errorf(\"Expected to have config, but got false\")\n\t}\n\tif options.LogFilePath != \"log.txt\" {\n\t\tt.Errorf(\"Expected log file path to be 'log.txt', but got '%s'\", options.LogFilePath)\n\t}\n\tif options.NumberOfLines != 10 {\n\t\tt.Errorf(\"Expected number of lines to be 10, but got %d\", options.NumberOfLines)\n\t}\n\tif !options.FollowMode {\n\t\tt.Errorf(\"Expected follow mode to be true, but got false\")\n\t}\n}\n\nfunc TestOptionsWithCommandLine_OutputRawJSON(t *testing.T) {\n\t// Arrange\n\tos.Args = []string{\"jog\", \"log.txt\", \"-j\"}\n\n\t// Act\n\thasConfig, options := OptionsWithCommandLine()\n\n\t// Assert\n\tif !hasConfig {\n\t\tt.Errorf(\"Expected to have config, but got false\")\n\t}\n\tif options.LogFilePath != \"log.txt\" {\n\t\tt.Errorf(\"Expected log file path to be 'log.txt', but got '%s'\", options.LogFilePath)\n\t}\n\tif options.OutputRawJSON != true {\n\t\tt.Errorf(\"Expected output raw JSON to be true, but got %v\", options.OutputRawJSON)\n\t}\n}\n\nfunc TestOptionsWithCommandLine_LevelFilter(t *testing.T) {\n\t// Arrange\n\tos.Args = []string{\"jog\", \"log.txt\", \"-l\", \"info\"}\n\n\t// Act\n\thasConfig, options := OptionsWithCommandLine()\n\n\t// Assert\n\tif !hasConfig {\n\t\tt.Errorf(\"Expected to have config, but got false\")\n\t}\n\tif options.LogFilePath != \"log.txt\" {\n\t\tt.Errorf(\"Expected log file path to be 'log.txt', but got '%s'\", options.LogFilePath)\n\t}\n\tif len(options.LevelFilter) != 1 || options.LevelFilter[0] != \"info\" {\n\t\tt.Errorf(\"Expected level filter to be ['info'], but got %v\", options.LevelFilter)\n\t}\n}\n\nfunc TestOptionsWithCommandLine_ConfigFile(t *testing.T) {\n\t// Arrange\n\tos.Args = []string{\"jog\", \"-c\", \"config.yaml\"}\n\n\t// Act\n\thasConfig, options := OptionsWithCommandLine()\n\n\t// Assert\n\tif !hasConfig {\n\t\tt.Errorf(\"Expected to have config, but got false\")\n\t}\n\tif options.ConfigFilePath != \"config.yaml\" {\n\t\tt.Errorf(\"Expected config file path to be 'config.yaml', but got '%s'\", options.ConfigFilePath)\n\t}\n}\n\nfunc TestOptionsWithCommandLine_ConfigFileAndLevelFilter(t *testing.T) {\n\t// Arrange\n\tos.Args = []string{\"jog\", \"-c\", \"config.yaml\", \"-l\", \"info\"}\n\n\t// Act\n\thasConfig, options := OptionsWithCommandLine()\n\n\t// Assert\n\tif !hasConfig {\n\t\tt.Errorf(\"Expected to have config, but got false\")\n\t}\n\tif options.ConfigFilePath != \"config.yaml\" {\n\t\tt.Errorf(\"Expected config file path to be 'config.yaml', but got '%s'\", options.ConfigFilePath)\n\t}\n\tif len(options.LevelFilter) != 1 || options.LevelFilter[0] != \"info\" {\n\t\tt.Errorf(\"Expected level filter to be ['info'], but got %v\", options.LevelFilter)\n\t}\n}\n\nfunc TestOptionsWithCommandLine_ConfigFileAndFollowMode(t *testing.T) {\n\t// Arrange\n\tos.Args = []string{\"jog\", \"-c\", \"config.yaml\", \"-f\"}\n\n\t// Act\n\thasConfig, options := OptionsWithCommandLine()\n\n\t// Assert\n\tif !hasConfig {\n\t\tt.Errorf(\"Expected to have config, but got false\")\n\t}\n\tif options.ConfigFilePath != \"config.yaml\" {\n\t\tt.Errorf(\"Expected config file path to be 'config.yaml', but got '%s'\", options.ConfigFilePath)\n\t}\n\tif options.FollowMode != true {\n\t\tt.Errorf(\"Expected follow mode to be true, but got false\")\n\t}\n}\n\nfunc TestOptionsWithCommandLine_ConfigFileAndOutputRawJSON(t *testing.T) {\n\t// Arrange\n\tos.Args = []string{\"jog\", \"-c\", \"config.yaml\", \"-j\"}\n\n\t// Act\n\thasConfig, options := OptionsWithCommandLine()\n\n\t// Assert\n\tif !hasConfig {\n\t\tt.Errorf(\"Expected to have config, but got false\")\n\t}\n\tif options.ConfigFilePath != \"config.yaml\" {\n\t\tt.Errorf(\"Expected config file path to be 'config.yaml', but got '%s'\", options.ConfigFilePath)\n\t}\n\tif options.OutputRawJSON != true {\n\t\tt.Errorf(\"Expected output raw JSON to be true, but got %v\", options.OutputRawJSON)\n\t}\n}\n\nfunc TestOptionsWithCommandLine_ConfigFileAndLevelFilterAndFollowMode(t *testing.T) {\n\t// Arrange\n\tos.Args = []string{\"jog\", \"-c\", \"config.yaml\", \"-l\", \"info\", \"-f\"}\n\n\t// Act\n\thasConfig, options := OptionsWithCommandLine()\n\n\t// Assert\n\tif !hasConfig {\n\t\tt.Errorf(\"Expected to have config, but got false\")\n\t}\n\tif options.ConfigFilePath != \"config.yaml\" {\n\t\tt.Errorf(\"Expected config file path to be 'config.yaml', but got '%s'\", options.ConfigFilePath)\n\t}\n\tif len(options.LevelFilter) != 1 || options.LevelFilter[0] != \"info\" {\n\t\tt.Errorf(\"Expected level filter to be ['info'], but got %v\", options.LevelFilter)\n\t}\n\tif options.FollowMode != true {\n\t\tt.Errorf(\"Expected follow mode to be true, but got false\")\n\t}\n}\n\nfunc TestOptionsWithCommandLine_ConfigFileAndLevelFilterAndOutputRawJSON(t *testing.T) {\n\t// Arrange\n\tos.Args = []string{\"jog\", \"-c\", \"config.yaml\", \"-l\", \"info\", \"-j\"}\n\n\t// Act\n\thasConfig, options := OptionsWithCommandLine()\n\n\t// Assert\n\tif !hasConfig {\n\t\tt.Errorf(\"Expected to have config, but got false\")\n\t}\n\tif options.ConfigFilePath != \"config.yaml\" {\n\t\tt.Errorf(\"Expected config file path to be 'config.yaml', but got '%s'\", options.ConfigFilePath)\n\t}\n\tif len(options.LevelFilter) != 1 || options.LevelFilter[0] != \"info\" {\n\t\tt.Errorf(\"Expected level filter to be ['info'], but got %v\", options.LevelFilter)\n\t}\n\tif options.OutputRawJSON != true {\n\t\tt.Errorf(\"Expected output raw JSON to be true, but got %v\", options.OutputRawJSON)\n\t}\n}\n\nfunc TestOptionsWithCommandLine_ConfigFileAndLevelFilterAndFollowModeAndOutputRawJSON(t *testing.T) {\n\t// Arrange\n\tos.Args = []string{\"jog\", \"-c\", \"config.yaml\", \"-l\", \"info\", \"-f\", \"-j\"}\n\n\t// Act\n\thasConfig, options := OptionsWithCommandLine()\n\n\t// Assert\n\tif !hasConfig {\n\t\tt.Errorf(\"Expected to have config, but got false\")\n\t}\n\tif options.ConfigFilePath != \"config.yaml\" {\n\t\tt.Errorf(\"Expected config file path to be 'config.yaml', but got '%s'\", options.ConfigFilePath)\n\t}\n\tif len(options.LevelFilter) != 1 || options.LevelFilter[0] != \"info\" {\n\t\tt.Errorf(\"Expected level filter to be ['info'], but got %v\", options.LevelFilter)\n\t}\n\tif options.FollowMode != true {\n\t\tt.Errorf(\"Expected follow mode to be true, but got false\")\n\t}\n\tif options.OutputRawJSON != true {\n\t\tt.Errorf(\"Expected output raw JSON to be true, but got %v\", options.OutputRawJSON)\n\t}\n}\n\nfunc TestOptionsWithCommandLine_ConfigFileAndLevelFilterAndFollowModeAndOutputRawJSONAndDebug(t *testing.T) {\n\t// Arrange\n\tos.Args = []string{\"jog\", \"-c\", \"config.yaml\", \"-l\", \"info\", \"-f\", \"-j\", \"--debug\"}\n\n\t// Act\n\thasConfig, options := OptionsWithCommandLine()\n\n\t// Assert\n\tif !hasConfig {\n\t\tt.Errorf(\"Expected to have config, but got false\")\n\t}\n\tif options.ConfigFilePath != \"config.yaml\" {\n\t\tt.Errorf(\"Expected config file path to be 'config.yaml', but got '%s'\", options.ConfigFilePath)\n\t}\n\tif len(options.LevelFilter) != 1 || options.LevelFilter[0] != \"info\" {\n\t\tt.Errorf(\"Expected level filter to be ['info'], but got %v\", options.LevelFilter)\n\t}\n\tif options.FollowMode != true {\n\t\tt.Errorf(\"Expected follow mode to be true, but got false\")\n\t}\n\tif options.OutputRawJSON != true {\n\t\tt.Errorf(\"Expected output raw JSON to be true, but got %v\", options.OutputRawJSON)\n\t}\n\tif options.Debug != true {\n\t\tt.Errorf(\"Expected debug to be true, but got false\")\n\t}\n}\n\nfunc TestOptionsWithCommandLine_ConfigFileAndLevelFilterAndFollowModeAndOutputRawJSONAndDebugAndVerbose(t *testing.T) {\n\t// Arrange\n\tos.Args = []string{\"jog\", \"-c\", \"config.yaml\", \"-l\", \"info\", \"-f\", \"-j\", \"--debug\", \"--verbose\"}\n\n\t// Act\n\thasConfig, options := OptionsWithCommandLine()\n\n\t// Assert\n\tif !hasConfig {\n\t\tt.Errorf(\"Expected to have config, but got false\")\n\t}\n\tif options.ConfigFilePath != \"config.yaml\" {\n\t\tt.Errorf(\"Expected config file path to be 'config.yaml', but got '%s'\", options.ConfigFilePath)\n\t}\n\tif len(options.LevelFilter) != 1 || options.LevelFilter[0] != \"info\" {\n\t\tt.Errorf(\"Expected level filter to be ['info'], but got %v\", options.LevelFilter)\n\t}\n\tif options.FollowMode != true {\n\t\tt.Errorf(\"Expected follow mode to be true, but got false\")\n\t}\n\tif options.OutputRawJSON != true {\n\t\tt.Errorf(\"Expected output raw JSON to be true, but got %v\", options.OutputRawJSON)\n\t}\n\tif options.Debug != true {\n\t\tt.Errorf(\"Expected debug to be true, but got false\")\n\t}\n\tif options.Verbose != true {\n\t\tt.Errorf(\"Expected verbose to be true, but got false\")\n\t}\n}\n\nfunc TestOptionsWithCommandLine_ConfigFileAndLevelFilterAndFollowModeAndOutputRawJSONAndDebugAndVerboseAndQuiet(t *testing.T) {\n\t// Arrange\n\tos.Args = []string{\"jog\", \"-c\", \"config.yaml\", \"-l\", \"info\", \"-f\", \"-j\", \"--debug\", \"--verbose\", \"--quiet\"}\n\n\t// Act\n\thasConfig, options := OptionsWithCommandLine()\n\n\t// Assert\n\tif !hasConfig {\n\t\tt.Errorf(\"Expected to have config, but got false\")\n\t}\n\tif options.ConfigFilePath != \"config.yaml\" {\n\t\tt.Errorf(\"Expected config file path to be 'config.yaml', but got '%s'\", options.ConfigFilePath)\n\t}\n\tif len(options.LevelFilter) != 1 || options.LevelFilter[0] != \"info\" {\n\t\tt.Errorf(\"Expected level filter to be ['info'], but got %v\", options.LevelFilter)\n\t}\n\tif options.FollowMode != true {\n\t\tt.Errorf(\"Expected follow mode to be true, but got false\")\n\t}\n\tif options.OutputRawJSON != true {\n\t\tt.Errorf(\"Expected output raw JSON to be true, but got %v\", options.OutputRawJSON)\n\t}\n\tif options.Debug != true {\n\t\tt.Errorf(\"Expected debug to be true, but got false\")\n\t}\n\tif options.Verbose != true {\n\t\tt.Errorf(\"Expected verbose to be true, but got false\")\n\t}\n\tif options.Quiet != true {\n\t\tt.Errorf(\"Expected quiet to be true, but got false\")\n\t}\n}\n\nfunc TestOptionsWithCommandLine_ConfigFileAndLevelFilterAndFollowModeAndOutputRawJSONAndDebugAndVerboseAndQuietAndHelp(t *testing.T) {\n\t// Arrange\n\tos.Args = []string{\"jog\", \"-c\", \"config.yaml\", \"-l\", \"info\", \"-f\", \"-j\", \"--debug\", \"--verbose\", \"--quiet\", \"--help\"}\n\n\t// Act\n\thasConfig, options := OptionsWithCommandLine()\n\n\t// Assert\n\tif !hasConfig {\n\t\tt.Errorf(\"Expected to have config, but got false\")\n\t}\n\tif options.ConfigFilePath != \"config.yaml\" {\n\t\tt.Errorf(\"Expected config file path to be 'config.yaml', but got '%s'\", options.ConfigFilePath)\n\t}\n\tif len(options.LevelFilter) != 1 || options.LevelFilter[0] != \"info\" {\n\t\tt.Errorf(\"Expected level filter to be ['info'], but got %v\", options.LevelFilter)\n\t}\n\tif options.FollowMode != true {\n\t\tt.Errorf(\"Expected follow mode to be true, but got false\")\n\t}\n\tif options.OutputRawJSON != true {\n\t\tt.Errorf(\"Expected output raw JSON to be true, but got %v\", options.OutputRawJSON)\n\t}\n\tif options.Debug != true {\n\t\tt.Errorf(\"Expected debug to be true, but got false\")\n\t}\n\tif options.Verbose != true {\n\t\tt.Errorf(\"Expected verbose to be true, but got false\")\n\t}\n\tif options.Quiet != true {\n\t\tt.Errorf(\"Expected quiet to be true, but got false\")\n\t}\n\tif options.Help != true {\n\t\tt.Errorf(\"Expected help to be true, but got false\")\n\t}\n}\n\nfunc TestOptionsWithCommandLine_ConfigFileAndLevelFilterAndFollowModeAndOutputRawJSONAndDebugAndVerboseAndQuietAndHelpAndVersion(t *testing.T) {\n\t// Arrange\n\tos.Args = []string{\"jog\", \"-c\", \"config.yaml\", \"-l\", \"info\", \"-f\", \"-j\", \"--debug\", \"--verbose\", \"--quiet\", \"--help\", \"--version\"}\n\n\t// Act\n\thasConfig, options := OptionsWithCommandLine()\n\n\t// Assert\n\tif !hasConfig {\n\t\tt.Errorf(\"Expected to have config, but got false\")\n\t}\n\tif options.ConfigFilePath != \"config.yaml\" {\n\t\tt.Errorf(\"Expected config file path to be 'config.yaml', but got '%s'\", options.ConfigFilePath)\n\t}\n\tif len(options.LevelFilter) != 1 || options.LevelFilter[0] != \"info\" {\n\t\tt.Errorf(\"Expected level filter to be ['info'], but got %v\", options.LevelFilter)\n\t}\n\tif options.FollowMode != true {\n\t\tt.Errorf(\"Expected follow mode to be true, but got false\")\n\t}\n\tif options.OutputRawJSON != true {\n\t\tt.Errorf(\"Expected output raw JSON to be true, but got %v\", options.OutputRawJSON)\n\t}\n\tif options.Debug != true {\n\t\tt.Errorf(\"Expected debug to be true, but got false\")\n\t}\n\tif options.Verbose != true {\n\t\tt.Errorf(\"Expected verbose to be true, but got false\")\n\t}\n\tif options.Quiet != true {\n\t\tt.Errorf(\"Expected quiet to be true, but got false\")\n\t}\n\tif options.Help != true {\n\t\tt.Errorf(\"Expected help to be true, but got false\")\n\t}\n\tif options.Version != true {\n\t\tt.Errorf(\"Expected version to be true, but got false\")\n\t}\n}\n\nfunc TestOptionsWithCommandLine_ConfigFileAndLevelFilterAndFollowModeAndOutputRawJSONAndDebugAndVerboseAndQuietAndHelpAndVersionAndAll(t *testing.T) {\n\t// Arrange\n\tos.Args = []string{\"jog\", \"-c\", \"config.yaml\", \"-l\", \"info\", \"-f\", \"-j\", \"--debug\", \"--verbose\", \"--quiet\", \"--help\", \"--version\", \"--all\"}\n\n\t// Act\n\thasConfig, options := OptionsWithCommandLine()\n\n\t// Assert\n\tif !hasConfig {\n\t\tt.Errorf(\"Expected to have config, but got false\")\n\t}\n\tif options.ConfigFilePath != \"config.yaml\" {\n\t\tt.Errorf(\"Expected config file path to be 'config.yaml', but got '%s'\", options.ConfigFilePath)\n\t}\n\tif len(options.LevelFilter) != 1 || options.LevelFilter[0] != \"info\" {\n\t\tt.Errorf(\"Expected level filter to be ['info'], but got %v\", options.LevelFilter)\n\t}\n\tif options.FollowMode != true {\n\t\tt.Errorf(\"Expected follow mode to be true, but got false\")\n\t}\n\tif options.OutputRawJSON != true {\n\t\tt.Errorf(\"Expected output raw JSON to be true, but got %v\", options.OutputRawJSON)\n\t}\n\tif options.Debug != true {\n\t\tt.Errorf(\"Expected debug to be true, but got false\")\n\t}\n\tif options.Verbose != true {\n\t\tt.Errorf(\"Expected verbose to be true, but got false\")\n\t}\n\tif options.Quiet != true {\n\t\tt.Errorf(\"Expected quiet to be true, but got false\")\n\t}\n\tif options.Help != true {\n\t\tt.Errorf(\"Expected help to be true, but got false\")\n\t}\n\tif options.Version != true {\n\t\tt.Errorf(\"Expected version to be true, but got false\")\n\t}\n\tif options.All != true {\n\t\tt.Errorf(\"Expected all to be true, but got false\")\n\t}\n}\n\nfunc TestOptionsWithCommandLine_ConfigFileAndLevelFilterAndFollowModeAndOutputRawJSONAndDebugAndVerboseAndQuietAndHelpAndVersionAndAllAndOther(t *testing.T) {\n\t// Arrange\n\tos.Args = []string{\"jog\", \"-c\", \"config.yaml\", \"-l\", \"info\", \"-f\", \"-j\", \"--debug\", \"--verbose\", \"--quiet\", \"--help\", \"--version\", \"--all\", \"--other\"}\n\n\t// Act\n\thasConfig, options := OptionsWithCommandLine()\n\n\t// Assert\n\tif !hasConfig {\n\t\tt.Errorf(\"Expected to have config, but got false\")\n\t}\n\tif options.ConfigFilePath != \"config.yaml\" {\n\t\tt.Errorf(\"Expected config file path to be 'config.yaml', but got '%s'\", options.ConfigFilePath)\n\t}\n\tif len(options.LevelFilter) != 1 || options.LevelFilter[0] != \"info\" {\n\t\tt.Errorf(\"Expected level filter to be ['info'], but got %v\", options.LevelFilter)\n\t}\n\tif options.FollowMode != true {\n\t\tt.Errorf(\"Expected follow mode to be true, but got false\")\n\t}\n\tif options.OutputRawJSON != true {\n\t\tt.Errorf(\"Expected output raw JSON to be true, but got %v\", options.OutputRawJSON)\n\t}\n\tif options.Debug != true {\n\t\tt.Errorf(\"Expected debug to be true, but got false\")\n\t}\n\tif options.Verbose != true {\n\t\tt.Errorf(\"Expected verbose to be true, but got false\")\n\t}\n\tif options.Quiet != true {\n\t\tt.Errorf(\"Expected quiet to be true, but got false\")\n\t}\n\tif options.Help != true {\n\t\tt.Errorf(\"Expected help to be true, but got false\")\n\t}\n\tif options.Version != true {\n\t\tt.Errorf(\"Expected version to be true, but got false\")\n\t}\n\tif options.All != true {\n\t\tt.Errorf(\"Expected all to be true, but got false\")\n\t}\n\tif options.Other != \"\" {\n\t\tt.Errorf(\"Expected other to be empty, but got '%s'\", options.Other)\n\t}\n}\n\nfunc TestOptionsWithCommandLine_ConfigFileAndLevelFilterAndFollowModeAndOutputRawJSONAndDebugAndVerboseAndQuietAndHelpAndVersionAndAllAndOtherWithValue(t *testing.T) {\n\t// Arrange\n\tos.Args = []string{\"jog\", \"-c\", \"config.yaml\", \"-l\", \"info\", \"-f\", \"-j\", \"--debug\", \"--verbose\", \"--quiet\", \"--help\", \"--version\", \"--all\", \"--other=value\"}\n\n\t// Act\n\thasConfig, options := OptionsWithCommandLine()\n\n\t// Assert\n\tif !hasConfig {\n\t\tt.Errorf(\"Expected to have config, but got false\")\n\t}\n\tif options.ConfigFilePath != \"config.yaml\" {\n\t\tt.Errorf(\"Expected config file path to be 'config.yaml', but got '%s'\", options.ConfigFilePath)\n\t}\n\tif len(options.LevelFilter) != 1 || options.LevelFilter[0] != \"info\" {\n\t\tt.Errorf(\"Expected level filter to be ['info'], but got %v\", options.LevelFilter)\n\t}\n\tif options.FollowMode != true {\n\t\tt.Errorf(\"Expected follow mode to be true, but got false\")\n\t}\n\tif options.OutputRawJSON != true {\n\t\tt.Errorf(\"Expected output raw JSON to be true, but got %v\", options.OutputRawJSON)\n\t}\n\tif options.Debug != true {\n\t\tt.Errorf(\"Expected debug to be true, but got false\")\n\t}\n\tif options.Verbose != true {\n\t\tt.Errorf(\"Expected verbose to be true, but got false\")\n\t}\n\tif options.Quiet != true {\n\t\tt.Errorf(\"Expected quiet to be true, but got false\")\n\t}\n\tif options.Help != true {\n\t\tt.Errorf(\"Expected help to be true, but got false\")\n\t}\n\tif options.Version != true {\n\t\tt.Errorf(\"Expected version to be true, but got false\")\n\t}\n\tif options.All != true {\n\t\tt.Errorf(\"Expected all to be true, but got false\")\n\t}\n\tif options.Other != \"value\" {\n\t\tt.Errorf(\"Expected other to be 'value', but got '%s'\", options.Other)\n\t}\n}\n\nfunc TestOptionsWithCommandLine_ConfigFileAndLevelFilterAndFollowModeAndOutputRawJSONAndDebugAndVerboseAndQuietAndHelpAndVersionAndAllAndOtherWithValueAndMore(t *testing.T) {\n\t// Arrange\n\tos.Args = []string{\"jog\", \"-c\", \"config.yaml\", \"-l\", \"info\", \"-f\", \"-j\", \"--debug\", \"--verbose\", \"--quiet\", \"--help\", \"--version\", \"--all\", \"--other=value\", \"--more\"}\n\n\t// Act\n\thasConfig, options := OptionsWithCommandLine()\n\n\t// Assert\n\tif !hasConfig {\n\t\tt.Errorf(\"Expected to have config, but got false\")\n\t}\n\tif options.ConfigFilePath != \"config.yaml\" {\n\t\tt.Errorf(\"Expected config file path to be 'config.yaml', but got '%s'\", options.ConfigFilePath)\n\t}\n\tif len(options.LevelFilter) != 1 || options.LevelFilter[0] != \"info\" {\n\t\tt.Errorf(\"Expected level filter to be ['info'], but got %v\", options.LevelFilter)\n\t}\n\tif options.FollowMode != true {\n\t\tt.Errorf(\"Expected follow mode to be true, but got false\")\n\t}\n\tif options.OutputRawJSON != true {\n\t\tt.Errorf(\"Expected output raw JSON to be true, but got %v\", options.OutputRawJSON)\n\t}\n\tif options.Debug != true {\n\t\tt.Errorf(\"Expected debug to be true, but got false\")\n\t}\n\tif options.Verbose != true {\n\t\tt.Errorf(\"Expected verbose to be true, but got false\")\n\t}\n\tif options.Quiet != true {\n\t\tt.Errorf(\"Expected quiet to be true, but got false\")\n\t}\n\tif options.Help != true {\n\t\tt.Errorf(\"Expected help to be true, but got false\")\n\t}\n\tif options.Version != true {\n\t\tt.Errorf(\"Expected version to be true, but got false\")\n\t}\n\tif options.All != true {\n\t\tt.Errorf(\"Expected all to be true, but got false\")\n\t}\n\tif options.Other != \"value\" {\n\t\tt.Errorf(\"Expected other to be 'value', but got '%s'\", options.Other)\n\t}\n\tif options.More != \"\" {\n\t\tt.Errorf(\"Expected more to be empty, but got '%s'\", options.More)\n\t}\n}\n\nfunc TestOptionsWithCommandLine_ConfigFileAndLevelFilterAndFollowModeAndOutputRawJSONAndDebugAndVerboseAndQuietAndHelpAndVersionAndAllAndOtherWithValueAndMoreWithValue(t *testing.T) {\n\t// Arrange\n\tos.Args = []string{\"jog\", \"-c\", \"config.yaml\", \"-l\", \"info\", \"-f\", \"-j\", \"--debug\", \"--verbose\", \"--quiet\", \"--help\", \"--version\", \"--all\", \"--other=value\", \"--more=value\"}\n\n\t// Act\n\thasConfig, options := OptionsWithCommandLine()\n\n\t// Assert\n\tif !hasConfig {\n\t\tt.Errorf(\"Expected to have config, but got false\")\n\t}\n\tif options.ConfigFilePath != \"config.yaml\" {\n\t\tt.Errorf(\"Expected config file path to be 'config.yaml', but got '%s'\", options.ConfigFilePath)\n\t}\n\tif len(options.LevelFilter) != 1 || options.LevelFilter[0] != \"info\" {\n\t\tt.Errorf(\"Expected level filter to be ['info'], but got %v\", options.LevelFilter)\n\t}\n\tif options.FollowMode != true {\n\t\tt.Errorf(\"Expected follow mode to be true, but got false\")\n\t}\n\tif options.OutputRawJSON != true {\n\t\tt.Errorf(\"Expected output raw JSON to be true, but got %v\", options.OutputRawJSON)\n\t}\n\tif options.Debug != true {\n\t\tt.Errorf(\"Expected debug to be true, but got false\")\n\t}\n\tif options.Verbose != true {\n\t\tt.Errorf(\"Expected verbose to be true, but got false\")\n\t}\n\tif options.Quiet != true {\n\t\tt.Errorf(\"Expected quiet to be true, but got false\")\n\t}\n\tif options.Help != true {\n\t\tt.Errorf(\"Expected help to be true, but got false\")\n\t}\n\tif options.Version != true {\n\t\tt.Errorf(\"Expected version to be true, but got false\")\n\t}\n\tif options.All != true {\n\t\tt.Errorf(\"Expected all to be true, but got false\")\n\t}\n\tif options.Other != \"value\" {\n\t\tt.Errorf(\"Expected other to be 'value', but got '%s'\", options.Other)\n\t}\n\tif options.More != \"value\" {\n\t\tt.Errorf(\"Expected more to be 'value', but got '%s'\", options.More)\n\t}\n}\n\nfunc TestOptionsWithCommandLine_ConfigFileAndLevelFilterAndFollowModeAndOutputRawJSONAndDebugAndVerboseAndQuietAndHelpAndVersionAndAllAndOtherWithValueAndMoreWithValueAndExtra(t *testing.T) {\n\t// Arrange\n\tos.Args = []string{\"jog\", \"-c\", \"config.yaml\", \"-l\", \"info\", \"-f\", \"-j\", \"--debug\", \"--verbose\", \"--quiet\", \"--help\", \"--version\", \"--all\", \"--other=value\", \"--more=value\", \"--extra\"}\n\n\t// Act\n\thasConfig, options := OptionsWithCommandLine()\n\n\t// Assert\n\tif !hasConfig {\n\t\tt.Errorf(\"Expected to have config, but got false\")\n\t}\n\tif options.ConfigFilePath != \"config.yaml\" {\n\t\tt.Errorf(\"Expected config file path to be 'config.yaml', but got '%s'\", options.ConfigFilePath)\n\t}\n\tif len(options.LevelFilter) != 1 || options.LevelFilter[0] != \"info\" {\n\t\tt.Errorf(\"Expected level filter to be ['info'], but got %v\", options.LevelFilter)\n\t}\n\tif options.FollowMode != true {\n\t\tt.Errorf(\"Expected follow mode to be true, but got false\")\n\t}\n\tif options.OutputRawJSON != true {\n\t\tt.Errorf(\"Expected output raw JSON to be true, but got %v\", options.OutputRawJSON)\n\t}\n\tif options.Debug != true {\n\t\tt.Errorf(\"Expected debug to be true, but got false\")\n\t}\n\tif options.Verbose != true {\n\t\tt.Errorf(\"Expected verbose to be true, but got false\")\n\t}\n\tif options.Quiet != true {\n\t\tt.Errorf(\"Expected quiet to be true, but got false\")\n\t}\n\tif options.Help != true {\n\t\tt.Errorf(\"Expected help to be true, but got false\")\n\t}\n\tif options.Version != true {\n\t\tt.Errorf(\"Expected version to be true, but got false\")\n\t}\n\tif options.All != true {\n\t\tt.Errorf(\"Expected all to be true, but got false\")\n\t}\n\tif options.Other != \"value\" {\n\t\tt.Errorf(\"Expected other to be 'value', but got '%s'\", options.Other)\n\t}\n\tif options.More != \"value\" {\n\t\tt.Errorf(\"Expected more to be 'value', but got '%s'\", options.More)\n\t}\n\tif options.Extra !=\n",
    "amount_of_generated_test_cases": 2,
    "single_test_run_command": "go test -v ./..."
}