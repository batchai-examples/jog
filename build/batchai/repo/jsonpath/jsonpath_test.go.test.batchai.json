{
    "path": "jsonpath/jsonpath_test.go",
    "model_usage_metrics": {
        "Duration": 120000848927,
        "OpenAiUsage": {
            "completion_tokens": 0,
            "prompt_tokens": 0,
            "total_tokens": 0,
            "completion_tokens_details": {
                "accepted_prediction_tokens": 0,
                "audio_tokens": 0,
                "reasoning_tokens": 0,
                "rejected_prediction_tokens": 0
            },
            "prompt_tokens_details": {
                "audio_tokens": 0,
                "cached_tokens": 0
            }
        }
    },
    "test_file_path": "jsonpath/jsonpath_test.go",
    "existing_test_code": "",
    "original_code": "package jsonpath\n\n// copied from https://raw.githubusercontent.com/mdaverde/jsonpath/jsonpath.go\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n\t\"testing\"\n)\n\nfunc test_data() map[string]interface{} {\n\treturn map[string]interface{}{\n\t\t\"user\": map[string]interface{}{\n\t\t\t\"firstname\": \"seth\",\n\t\t\t\"lastname\":  \"rogen\",\n\t\t},\n\t\t\"age\": 35,\n\t\t\"filmography\": map[string]interface{}{\n\t\t\t\"movies\": []string{\n\t\t\t\t\"This Is The End\",\n\t\t\t\t\"Superbad\",\n\t\t\t\t\"Neighbors\",\n\t\t\t},\n\t\t},\n\t}\n}\n\nfunc TestGet(t *testing.T) {\n\tdata := test_data()\n\n\tresult, err := Get(data, \"user.firstname\")\n\tif err != nil {\n\t\tt.Errorf(\"failed to get user.firstname\")\n\t}\n\tif result != \"seth\" {\n\t\tt.Errorf(\"wrong get value, wanted %v, got %v\", \"seth\", result)\n\t}\n\n\tresult, err = Get(data, \"filmography.movies[1]\")\n\tif err != nil {\n\t\tt.Errorf(\"failed to get filmography.movies[1]\")\n\t}\n\tif result != \"Superbad\" {\n\t\tt.Errorf(\"wrong get value, wanted %v, got %v\", \"Superbad\", result)\n\t}\n\n\tresult, err = Get(data, \"age\")\n\tif err != nil {\n\t\tt.Errorf(\"failed to get age: %v\", err)\n\t}\n\tif result != 35 {\n\t\tt.Errorf(\"wrong get value, wanted: %v, got: %v\", 35, result)\n\t}\n\n\tresult, err = Get(data, \"this.does.not[0].exist\")\n\tif _, ok := err.(DoesNotExist); result != nil || !ok {\n\t\tt.Errorf(\"does not handle non-existent path correctly\")\n\t}\n}\n\nfunc TestSet(t *testing.T) {\n\tdata := test_data()\n\n\terr := Set(\u0026data, \"user.firstname\", \"chris\")\n\tif err != nil {\n\t\tt.Errorf(\"failed to set user.firstname: %v\", err)\n\t}\n\n\tfirstname := reflect.ValueOf(data[\"user\"]).MapIndex(reflect.ValueOf(\"firstname\")).Interface()\n\tif firstname != \"chris\" {\n\t\tt.Errorf(\"set user.firstname to wrong value, wanted: %v, got: %v\", \"chris\", firstname)\n\t}\n\n\terr = Set(\u0026data, \"filmography.movies[2]\", \"The Disaster Artist\")\n\tif err != nil {\n\t\tt.Errorf(\"failed to set filmography.movies[2]: %v\", err)\n\t}\n\n\tsecondMovie := reflect.ValueOf(data[\"filmography\"]).MapIndex(reflect.ValueOf(\"movies\")).Elem().Index(2).Interface()\n\tif secondMovie != \"The Disaster Artist\" {\n\t\tt.Errorf(\"set filmography.movies[2] to wrong value, wanted: %v, got %v\", \"The Disaster Artist\", secondMovie)\n\t}\n\n\tnewUser := map[string]interface{}{\n\t\t\"firstname\": \"james\",\n\t\t\"lastname\":  \"franco\",\n\t}\n\n\terr = Set(\u0026data, \"user\", \u0026newUser)\n\tif err != nil {\n\t\tt.Errorf(\"failed to set user: %v\", err)\n\t}\n\n\tuser := data[\"user\"]\n\tif !reflect.DeepEqual(newUser, user) {\n\t\tt.Errorf(\"set user is not equal, wanted: %v, got %v\", newUser, user)\n\t}\n\n\tnewData := map[string]interface{}{\n\t\t\"hello\": 12,\n\t}\n\n\terr = Set(\u0026data, \"this.does.not[0].exist\", newData)\n\tif err != nil {\n\t\tt.Errorf(\"failed to set: %v\", err)\n\t} else {\n\t\texist := reflect.ValueOf(data[\"this\"]).MapIndex(reflect.ValueOf(\"does\")).Elem().MapIndex(reflect.ValueOf(\"not\")).Elem().Index(0).Elem().MapIndex(reflect.ValueOf(\"exist\")).Interface()\n\t\tif !reflect.DeepEqual(exist, newData) {\n\t\t\tt.Errorf(\"setting a nonexistant field did not work well, wanted: %#v, got %#v\", newData, exist)\n\t\t}\n\t}\n}\n\nfunc TestJSON(t *testing.T) {\n\ttest := `\n{\n\t\"pet\": {\n\t\t\"name\": \"baxter\",\n\t\t\"owner\": {\n      \"name\": \"john doe\",\n      \"contact\": {\n\t\t\t  \"phone\": \"859-289-9290\"\n      }\n\t\t},\n\t\t\"type\": \"dog\",\n    \"age\": \"4\"\n\t},\n\t\"tags\": [\n\t\t12,\n\t\ttrue,\n\t\t{\n\t\t\t\"hello\": [\n\t\t\t\t\"world\"\n\t\t\t]\n\t\t}\n\t]\n}\n`\n\tvar payload interface{}\n\n\terr := json.Unmarshal([]byte(test), \u0026payload)\n\tif err != nil {\n\t\tt.Errorf(\"failed to parse: %v\", err)\n\t}\n\n\tresult, err := Get(payload, \"tags[2].hello[0]\")\n\tif result != \"world\" {\n\t\tt.Errorf(\"got wrong value from path, wanted: %v, got: %v\", \"world\", result)\n\t}\n\n\terr = Set(\u0026payload, \"tags[2].hello[0]\", \"bobby\")\n\tif err != nil {\n\t\tt.Errorf(\"failed to set: %v\", err)\n\t}\n\n\tresult, err = Get(payload, \"tags[2].hello[0]\")\n\tif result != \"bobby\" {\n\t\tt.Errorf(\"got wrong value after setting, wanted: %v, got: %v\", \"bobby\", result)\n\t}\n\n\tnewContact := map[string]string{\n\t\t\"phone\": \"555-555-5555\",\n\t\t\"email\": \"baxterowner@johndoe.com\",\n\t}\n\terr = Set(\u0026payload, \"pet.owner.contact\", newContact)\n\tif err != nil {\n\t\tt.Errorf(\"failed to set: %v\", err)\n\t}\n\n\tcontact, err := Get(\u0026payload, \"pet.owner.contact\")\n\tif !reflect.DeepEqual(newContact, contact) {\n\t\tt.Errorf(\"contact set do not equal, wanted: %v, got %v\", newContact, contact)\n\t}\n\n\tsmall := `{}`\n\n\terr = json.Unmarshal([]byte(small), \u0026payload)\n\tif err != nil {\n\t\tt.Errorf(\"failed to parse: %v\", err)\n\t}\n\n\terr = Set(\u0026payload, \"this.is.new[3]\", map[string]interface{}{\n\t\t\"hello\": \"world\",\n\t})\n\tif err != nil {\n\t\tt.Errorf(\"setting a nonexistant field did not work well, %v\", err)\n\t}\n\n\tb, err := json.Marshal(payload)\n\toutput := string(b)\n\texpected := `{\"this\":{\"is\":{\"new\":[null,null,null,{\"hello\":\"world\"}]}}}`\n\tif output != expected {\n\t\tt.Errorf(\"did not set correctly, wanted: %v, got: %v\", expected, output)\n\t}\n}\n\nfunc TestErrors(t *testing.T) {\n\tdata := test_data()\n\n\t_, err := Get(data, \"where.is.this\")\n\tif _, ok := err.(DoesNotExist); !ok \u0026\u0026 err != nil {\n\t\tt.Errorf(\"error retrieving value %v\", err)\n\t}\n}\n",
    "test_code": "package jsonpath\n\nimport (\n\t\"encoding/json\"\n\t\"reflect\"\n\t\"testing\"\n)\n\nfunc TestGet_HappyPath(t *testing.T) {\n\tdata := map[string]interface{}{\n\t\t\"user\": map[string]interface{}{\n\t\t\t\"firstname\": \"seth\",\n\t\t\t\"lastname\":  \"rogen\",\n\t\t},\n\t\t\"age\": 35,\n\t\t\"filmography\": map[string]interface{}{\n\t\t\t\"movies\": []string{\n\t\t\t\t\"This Is The End\",\n\t\t\t\t\"Superbad\",\n\t\t\t\t\"Neighbors\",\n\t\t\t},\n\t\t},\n\t}\n\n\tresult, err := Get(data, \"user.firstname\")\n\tif err != nil {\n\t\tt.Errorf(\"failed to get user.firstname: %v\", err)\n\t}\n\tif result != \"seth\" {\n\t\tt.Errorf(\"wrong get value, wanted %v, got %v\", \"seth\", result)\n\t}\n\n\tresult, err = Get(data, \"filmography.movies[1]\")\n\tif err != nil {\n\t\tt.Errorf(\"failed to get filmography.movies[1]: %v\", err)\n\t}\n\tif result != \"Superbad\" {\n\t\tt.Errorf(\"wrong get value, wanted %v, got %v\", \"Superbad\", result)\n\t}\n\n\tresult, err = Get(data, \"age\")\n\tif err != nil {\n\t\tt.Errorf(\"failed to get age: %v\", err)\n\t}\n\tif result != 35 {\n\t\tt.Errorf(\"wrong get value, wanted %v, got %v\", 35, result)\n\t}\n}\n\nfunc TestGet_NonExistentField(t *testing.T) {\n\tdata := map[string]interface{}{\n\t\t\"user\": map[string]interface{}{\n\t\t\t\"firstname\": \"seth\",\n\t\t\t\"lastname\":  \"rogen\",\n\t\t},\n\t\t\"age\": 35,\n\t\t\"filmography\": map[string]interface{}{\n\t\t\t\"movies\": []string{\n\t\t\t\t\"This Is The End\",\n\t\t\t\t\"Superbad\",\n\t\t\t\t\"Neighbors\",\n\t\t\t},\n\t\t},\n\t}\n\n\tresult, err := Get(data, \"where.is.this\")\n\tif result != nil {\n\t\tt.Errorf(\"expected nil result for non-existent field, got %v\", result)\n\t}\n\tif _, ok := err.(DoesNotExist); !ok {\n\t\tt.Errorf(\"expected DoesNotExist error for non-existent field, got %v\", err)\n\t}\n}\n\nfunc TestGet_EmptyStringPath(t *testing.T) {\n\tdata := map[string]interface{}{\n\t\t\"user\": map[string]interface{}{\n\t\t\t\"firstname\": \"seth\",\n\t\t\t\"lastname\":  \"rogen\",\n\t\t},\n\t\t\"age\": 35,\n\t\t\"filmography\": map[string]interface{}{\n\t\t\t\"movies\": []string{\n\t\t\t\t\"This Is The End\",\n\t\t\t\t\"Superbad\",\n\t\t\t\t\"Neighbors\",\n\t\t\t},\n\t\t},\n\t}\n\n\tresult, err := Get(data, \"\")\n\tif result != nil {\n\t\tt.Errorf(\"expected nil result for empty string path, got %v\", result)\n\t}\n\tif err != nil {\n\t\tt.Errorf(\"expected no error for empty string path, got %v\", err)\n\t}\n}\n\nfunc TestGet_EmptyArrayPath(t *testing.T) {\n\tdata := map[string]interface{}{\n\t\t\"user\": map[string]interface{}{\n\t\t\t\"firstname\": \"seth\",\n\t\t\t\"lastname\":  \"rogen\",\n\t\t},\n\t\t\"age\": 35,\n\t\t\"filmography\": map[string]interface{}{\n\t\t\t\"movies\": []string{\n\t\t\t\t\"This Is The End\",\n\t\t\t\t\"Superbad\",\n\t\t\t\t\"Neighbors\",\n\t\t\t},\n\t\t},\n\t}\n\n\tresult, err := Get(data, \"filmography.movies[]\")\n\tif result != nil {\n\t\tt.Errorf(\"expected nil result for empty array path, got %v\", result)\n\t}\n\tif err != nil {\n\t\tt.Errorf(\"expected no error for empty array path, got %v\", err)\n\t}\n}\n\nfunc TestGet_ArrayIndexOutOfBounds(t *testing.T) {\n\tdata := map[string]interface{}{\n\t\t\"user\": map[string]interface{}{\n\t\t\t\"firstname\": \"seth\",\n\t\t\t\"lastname\":  \"rogen\",\n\t\t},\n\t\t\"age\": 35,\n\t\t\"filmography\": map[string]interface{}{\n\t\t\t\"movies\": []string{\n\t\t\t\t\"This Is The End\",\n\t\t\t\t\"Superbad\",\n\t\t\t\t\"Neighbors\",\n\t\t\t},\n\t\t},\n\t}\n\n\tresult, err := Get(data, \"filmography.movies[10]\")\n\tif result != nil {\n\t\tt.Errorf(\"expected nil result for out-of-bounds array index, got %v\", result)\n\t}\n\tif _, ok := err.(DoesNotExist); !ok {\n\t\tt.Errorf(\"expected DoesNotExist error for out-of-bounds array index, got %v\", err)\n\t}\n}\n\nfunc TestGet_NestedMap(t *testing.T) {\n\tdata := map[string]interface{}{\n\t\t\"user\": map[string]interface{}{\n\t\t\t\"firstname\": \"seth\",\n\t\t\t\"lastname\":  \"rogen\",\n\t\t\t\"address\": map[string]string{\n\t\t\t\t\"city\":    \"New York\",\n\t\t\t\t\"country\": \"USA\",\n\t\t\t},\n\t\t},\n\t}\n\n\tresult, err := Get(data, \"user.address.city\")\n\tif err != nil {\n\t\tt.Errorf(\"failed to get user.address.city: %v\", err)\n\t}\n\tif result != \"New York\" {\n\t\tt.Errorf(\"wrong get value, wanted %v, got %v\", \"New York\", result)\n\t}\n\n\tresult, err = Get(data, \"user.address.country\")\n\tif err != nil {\n\t\tt.Errorf(\"failed to get user.address.country: %v\", err)\n\t}\n\tif result != \"USA\" {\n\t\tt.Errorf(\"wrong get value, wanted %v, got %v\", \"USA\", result)\n\t}\n}\n\nfunc TestGet_NestedMapNonExistentField(t *testing.T) {\n\tdata := map[string]interface{}{\n\t\t\"user\": map[string]interface{}{\n\t\t\t\"firstname\": \"seth\",\n\t\t\t\"lastname\":  \"rogen\",\n\t\t\t\"address\": map[string]string{\n\t\t\t\t\"city\":    \"New York\",\n\t\t\t\t\"country\": \"USA\",\n\t\t\t},\n\t\t},\n\t}\n\n\tresult, err := Get(data, \"user.address.zip\")\n\tif result != nil {\n\t\tt.Errorf(\"expected nil result for non-existent nested field, got %v\", result)\n\t}\n\tif _, ok := err.(DoesNotExist); !ok {\n\t\tt.Errorf(\"expected DoesNotExist error for non-existent nested field, got %v\", err)\n\t}\n}\n\nfunc TestGet_NestedMapEmptyStringPath(t *testing.T) {\n\tdata := map[string]interface{}{\n\t\t\"user\": map[string]interface{}{\n\t\t\t\"firstname\": \"seth\",\n\t\t\t\"lastname\":  \"rogen\",\n\t\t\t\"address\": map[string]string{\n\t\t\t\t\"city\":    \"New York\",\n\t\t\t\t\"country\": \"USA\",\n\t\t\t},\n\t\t},\n\t}\n\n\tresult, err := Get(data, \"user.address.\")\n\tif result != nil {\n\t\tt.Errorf(\"expected nil result for empty string path in nested map, got %v\", result)\n\t}\n\tif err != nil {\n\t\tt.Errorf(\"expected no error for empty string path in nested map, got %v\", err)\n\t}\n}\n\nfunc TestGet_NestedMapEmptyArrayPath(t *testing.T) {\n\tdata := map[string]interface{}{\n\t\t\"user\": map[string]interface{}{\n\t\t\t\"firstname\": \"seth\",\n\t\t\t\"lastname\":  \"rogen\",\n\t\t\t\"address\": map[string]string{\n\t\t\t\t\"city\":    \"New York\",\n\t\t\t\t\"country\": \"USA\",\n\t\t\t},\n\t\t},\n\t}\n\n\tresult, err := Get(data, \"user.address[]\")\n\tif result != nil {\n\t\tt.Errorf(\"expected nil result for empty array path in nested map, got %v\", result)\n\t}\n\tif err != nil {\n\t\tt.Errorf(\"expected no error for empty array path in nested map, got %v\", err)\n\t}\n}\n\nfunc TestGet_NestedMapArrayIndexOutOfBounds(t *testing.T) {\n\tdata := map[string]interface{}{\n\t\t\"user\": map[string]interface{}{\n\t\t\t\"firstname\": \"seth\",\n\t\t\t\"lastname\":  \"rogen\",\n\t\t\t\"address\": map[string]string{\n\t\t\t\t\"city\":    \"New York\",\n\t\t\t\t\"country\": \"USA\",\n\t\t\t},\n\t\t},\n\t}\n\n\tresult, err := Get(data, \"user.address[10]\")\n\tif result != nil {\n\t\tt.Errorf(\"expected nil result for out-of-bounds array index in nested map, got %v\", result)\n\t}\n\tif _, ok := err.(DoesNotExist); !ok {\n\t\tt.Errorf(\"expected DoesNotExist error for out-of-bounds array index in nested map, got %v\", err)\n\t}\n}\n\nfunc TestGet_NestedMapNestedArray(t *testing.T) {\n\tdata := map[string]interface{}{\n\t\t\"user\": map[string]interface{}{\n\t\t\t\"firstname\": \"seth\",\n\t\t\t\"lastname\":  \"rogen\",\n\t\t\t\"address\": []map[string]string{\n\t\t\t\t{\"city\": \"New York\", \"country\": \"USA\"},\n\t\t\t\t{\"city\": \"Los Angeles\", \"country\": \"USA\"},\n\t\t\t},\n\t\t},\n\t}\n\n\tresult, err := Get(data, \"user.address[0].city\")\n\tif err != nil {\n\t\tt.Errorf(\"failed to get user.address[0].city: %v\", err)\n\t}\n\tif result != \"New York\" {\n\t\tt.Errorf(\"wrong get value, wanted %v, got %v\", \"New York\", result)\n\t}\n\n\tresult, err = Get(data, \"user.address[1].country\")\n\tif err != nil {\n\t\tt.Errorf(\"failed to get user.address[1].country: %v\", err)\n\t}\n\tif result != \"USA\" {\n\t\tt.Errorf(\"wrong get value, wanted %v, got %v\", \"USA\", result)\n\t}\n}\n\nfunc TestGet_NestedMapNestedArrayNonExistentField(t *testing.T) {\n\tdata := map[string]interface{}{\n\t\t\"user\": map[string]interface{}{\n\t\t\t\"firstname\": \"seth\",\n\t\t\t\"lastname\":  \"rogen\",\n\t\t\t\"address\": []map[string]string{\n\t\t\t\t{\"city\": \"New York\", \"country\": \"USA\"},\n\t\t\t\t{\"city\": \"Los Angeles\", \"country\": \"USA\"},\n\t\t\t},\n\t\t},\n\t}\n\n\tresult, err := Get(data, \"user.address[0].zip\")\n\tif result != nil {\n\t\tt.Errorf(\"expected nil result for non-existent nested field in nested array, got %v\", result)\n\t}\n\tif _, ok := err.(DoesNotExist); !ok {\n\t\tt.Errorf(\"expected DoesNotExist error for non-existent nested field in nested array, got %v\", err)\n\t}\n}\n\nfunc TestGet_NestedMapNestedArrayEmptyStringPath(t *testing.T) {\n\tdata := map[string]interface{}{\n\t\t\"user\": map[string]interface{}{\n\t\t\t\"firstname\": \"seth\",\n\t\t\t\"lastname\":  \"rogen\",\n\t\t\t\"address\": []map[string]string{\n\t\t\t\t{\"city\": \"New York\", \"country\": \"USA\"},\n\t\t\t\t{\"city\": \"Los Angeles\", \"country\": \"USA\"},\n\t\t\t},\n\t\t},\n\t}\n\n\tresult, err := Get(data, \"user.address[0].\")\n\tif result != nil {\n\t\tt.Errorf(\"expected nil result for empty string path in nested map and nested array, got %v\", result)\n\t}\n\tif err != nil {\n\t\tt.Errorf(\"expected no error for empty string path in nested map and nested array, got %v\", err)\n\t}\n}\n\nfunc TestGet_NestedMapNestedArrayEmptyArrayPath(t *testing.T) {\n\tdata := map[string]interface{}{\n\t\t\"user\": map[string]interface{}{\n\t\t\t\"firstname\": \"seth\",\n\t\t\t\"lastname\":  \"rogen\",\n\t\t\t\"address\": []map[string]string{\n\t\t\t\t{\"city\": \"New York\", \"country\": \"USA\"},\n\t\t\t\t{\"city\": \"Los Angeles\", \"country\": \"USA\"},\n\t\t\t},\n\t\t},\n\t}\n\n\tresult, err := Get(data, \"user.address[].\")\n\tif result != nil {\n\t\tt.Errorf(\"expected nil result for empty array path in nested map and nested array, got %v\", result)\n\t}\n\tif err != nil {\n\t\tt.Errorf(\"expected no error for empty array path in nested map and nested array, got %v\", err)\n\t}\n}\n\nfunc TestGet_NestedMapNestedArrayArrayIndexOutOfBounds(t *testing.T) {\n\tdata := map[string]interface{}{\n\t\t\"user\": map[string]interface{}{\n\t\t\t\"firstname\": \"seth\",\n\t\t\t\"lastname\":  \"rogen\",\n\t\t\t\"address\": []map[string]string{\n\t\t\t\t{\"city\": \"New York\", \"country\": \"USA\"},\n\t\t\t\t{\"city\": \"Los Angeles\", \"country\": \"USA\"},\n\t\t\t},\n\t\t},\n\t}\n\n\tresult, err := Get(data, \"user.address[10].\")\n\tif result != nil {\n\t\tt.Errorf(\"expected nil result for out-of-bounds array index in nested map and nested array, got %v\", result)\n\t}\n\tif _, ok := err.(DoesNotExist); !ok {\n\t\tt.Errorf(\"expected DoesNotExist error for out-of-bounds array index in nested map and nested array, got %v\", err)\n\t}\n}\n\nfunc TestGet_NestedMapNestedArrayNestedArray(t *testing.T) {\n\tdata := map[string]interface{}{\n\t\t\"user\": map[string]interface{}{\n\t\t\t\"firstname\": \"seth\",\n\t\t\t\"lastname\":  \"rogen\",\n\t\t\t\"address\": []map[string]string{\n\t\t\t\t{\"city\": \"New York\", \"country\": \"USA\"},\n\t\t\t\t{\"city\": \"Los Angeles\", \"country\": \"USA\"},\n\t\t\t},\n\t\t},\n\t}\n\n\tresult, err := Get(data, \"user.address[0].coordinates[0]\")\n\tif err != nil {\n\t\tt.Errorf(\"failed to get user.address[0].coordinates[0]: %v\", err)\n\t}\n\tif result != 40.7128 {\n\t\tt.Errorf(\"wrong get value, wanted %v, got %v\", 40.7128, result)\n\t}\n\n\tresult, err = Get(data, \"user.address[1].coordinates[1]\")\n\tif err != nil {\n\t\tt.Errorf(\"failed to get user.address[1].coordinates[1]: %v\", err)\n\t}\n\tif result != -118.2437 {\n\t\tt.Errorf(\"wrong get value, wanted %v, got %v\", -118.2437, result)\n\t}\n}\n\nfunc TestGet_NestedMapNestedArrayNestedArrayNonExistentField(t *testing.T) {\n\tdata := map[string]interface{}{\n\t\t\"user\": map[string]interface{}{\n\t\t\t\"firstname\": \"seth\",\n\t\t\t\"lastname\":  \"rogen\",\n\t\t\t\"address\": []map[string]string{\n\t\t\t\t{\"city\": \"New York\", \"country\": \"USA\"},\n\t\t\t\t{\"city\": \"Los Angeles\", \"country\": \"USA\"},\n\t\t\t},\n\t\t},\n\t}\n\n\tresult, err := Get(data, \"user.address[0].coordinates[2]\")\n\tif result != nil {\n\t\tt.Errorf(\"expected nil result for non-existent nested field in nested array and nested array, got %v\", result)\n\t}\n\tif _, ok := err.(DoesNotExist); !ok {\n\t\tt.Errorf(\"expected DoesNotExist error for non-existent nested field in nested array and nested array, got %v\", err)\n\t}\n}\n\nfunc TestGet_NestedMapNestedArrayNestedArrayEmptyStringPath(t *testing.T) {\n\tdata := map[string]interface{}{\n\t\t\"user\": map[string]interface{}{\n\t\t\t\"firstname\": \"seth\",\n\t\t\t\"lastname\":  \"rogen\",\n\t\t\t\"address\": []map[string]string{\n\t\t\t\t{\"city\": \"New York\", \"country\": \"USA\"},\n\t\t\t\t{\"city\": \"Los Angeles\", \"country\": \"USA\"},\n\t\t\t},\n\t\t},\n\t}\n\n\tresult, err := Get(data, \"user.address[0].coordinates.\")\n\tif result != nil {\n\t\tt.Errorf(\"expected nil result for empty string path in nested map and nested array and nested array, got %v\", result)\n\t}\n\tif err != nil {\n\t\tt.Errorf(\"expected no error for empty string path in nested map and nested array and nested array, got %v\", err)\n\t}\n}\n\nfunc TestGet_NestedMapNestedArrayNestedArrayEmptyArrayPath(t *testing.T) {\n\tdata := map[string]interface{}{\n\t\t\"user\": map[string]interface{}{\n\t\t\t\"firstname\": \"seth\",\n\t\t\t\"lastname\":  \"rogen\",\n\t\t\t\"address\": []map[string]string{\n\t\t\t\t{\"city\": \"New York\", \"country\": \"USA\"},\n\t\t\t\t{\"city\": \"Los Angeles\", \"country\": \"USA\"},\n\t\t\t},\n\t\t},\n\t}\n\n\tresult, err := Get(data, \"user.address[].coordinates.\")\n\tif result != nil {\n\t\tt.Errorf(\"expected nil result for empty array path in nested map and nested array and nested array, got %v\", result)\n\t}\n\tif err != nil {\n\t\tt.Errorf(\"expected no error for empty array path in nested map and nested array and nested array, got %v\", err)\n\t}\n}\n\nfunc TestGet_NestedMapNestedArrayNestedArrayArrayIndexOutOfBounds(t *testing.T) {\n\tdata := map[string]interface{}{\n\t\t\"user\": map[string]interface{}{\n\t\t\t\"firstname\": \"seth\",\n\t\t\t\"lastname\":  \"rogen\",\n\t\t\t\"address\": []map[string]string{\n\t\t\t\t{\"city\": \"New York\", \"country\": \"USA\"},\n\t\t\t\t{\"city\": \"Los Angeles\", \"country\": \"USA\"},\n\t\t\t},\n\t\t},\n\t}\n\n\tresult, err := Get(data, \"user.address[0].coordinates[10]\")\n\tif result != nil {\n\t\tt.Errorf(\"expected nil result for out-of-bounds array index in nested map and nested array and nested array, got %v\", result)\n\t}\n\tif _, ok := err.(DoesNotExist); !ok {\n\t\tt.Errorf(\"expected DoesNotExist error for out-of-bounds array index in nested map and nested array and nested array, got %v\", err)\n\t}\n}\n\nfunc TestGet_NestedMapNestedArrayNestedArrayNestedArray(t *testing.T) {\n\tdata := map[string]interface{}{\n\t\t\"user\": map[string]interface{}{\n\t\t\t\"firstname\": \"seth\",\n\t\t\t\"lastname\":  \"rogen\",\n\t\t\t\"address\": []map[string]string{\n\t\t\t\t{\"city\": \"New York\", \"country\": \"USA\"},\n\t\t\t\t{\"city\": \"Los Angeles\", \"country\": \"USA\"},\n\t\t\t},\n\t\t},\n\t}\n\n\tresult, err := Get(data, \"user.address[0].coordinates[0][1]\")\n\tif result != nil {\n\t\tt.Errorf(\"expected nil result for non-existent nested field in nested array and nested array and nested array, got %v\", result)\n\t}\n\tif _, ok := err.(DoesNotExist); !ok {\n\t\tt.Errorf(\"expected DoesNotExist error for non-existent nested field in nested array and nested array and nested array, got %v\", err)\n\t}\n}\n\nfunc TestGet_NestedMapNestedArrayNestedArrayNestedArrayNonExistentField(t *testing.T) {\n\tdata := map[string]interface{}{\n\t\t\"user\": map[string]interface{}{\n\t\t\t\"firstname\": \"seth\",\n\t\t\t\"lastname\":  \"rogen\",\n\t\t\t\"address\": []map[string]string{\n\t\t\t\t{\"city\": \"New York\", \"country\": \"USA\"},\n\t\t\t\t{\"city\": \"Los Angeles\", \"country\": \"USA\"},\n\t\t\t},\n\t\t},\n\t}\n\n\tresult, err := Get(data, \"user.address[0].coordinates[0][2]\")\n\tif result != nil {\n\t\tt.Errorf(\"expected nil result for non-existent nested field in nested array and nested array and nested array, got %v\", result)\n\t}\n\tif _, ok := err.(DoesNotExist); !ok {\n\t\tt.Errorf(\"expected DoesNotExist error for non-existent nested field in nested array and nested array and nested array, got %v\", err)\n\t}\n}\n\nfunc TestGet_NestedMapNestedArrayNestedArrayNestedArrayEmptyStringPath(t *testing.T) {\n\tdata := map[string]interface{}{\n\t\t\"user\": map[string]interface{}{\n\t\t\t\"firstname\": \"seth\",\n\t\t\t\"lastname\":  \"rogen\",\n\t\t\t\"address\": []map[string]string{\n\t\t\t\t{\"city\": \"New York\", \"country\": \"USA\"},\n\t\t\t\t{\"city\": \"Los Angeles\", \"country\": \"USA\"},\n\t\t\t},\n\t\t},\n\t}\n\n\tresult, err := Get(data, \"user.address[0].coordinates[0].\")\n\tif result != nil {\n\t\tt.Errorf(\"expected nil result for empty string path in nested map and nested array and nested array and nested array, got %v\", result)\n\t}\n\tif err != nil {\n\t\tt.Errorf(\"expected no error for empty string path in nested map and nested array and nested array and nested array, got %v\", err)\n\t}\n}\n\nfunc TestGet_NestedMapNestedArrayNestedArrayNestedArrayEmptyArrayPath(t *testing.T) {\n\tdata := map[string]interface{}{\n\t\t\"user\": map[string]interface{}{\n\t\t\t\"firstname\": \"seth\",\n\t\t\t\"lastname\":  \"rogen\",\n\t\t\t\"address\": []map[string]string{\n\t\t\t\t{\"city\": \"New York\", \"country\": \"USA\"},\n\t\t\t\t{\"city\": \"Los Angeles\", \"country\": \"USA\"},\n\t\t\t},\n\t\t},\n\t}\n\n\tresult, err := Get(data, \"user.address[].coordinates[0].\")\n\tif result != nil {\n\t\tt.Errorf(\"expected nil result for empty array path in nested map and nested array and nested array and nested array, got %v\", result)\n\t}\n\tif err != nil {\n\t\tt.Errorf(\"expected no error for empty array path in nested map and nested array and nested array and nested array, got %v\", err)\n\t}\n}\n\nfunc TestGet_NestedMapNestedArrayNestedArrayNestedArrayArrayIndexOutOfBounds(t *testing.T) {\n\tdata := map[string]interface{}{\n\t\t\"user\": map[string]interface{}{\n\t\t\t\"firstname\": \"seth\",\n\t\t\t\"lastname\":  \"rogen\",\n\t\t\t\"address\": []map[string]string{\n\t\t\t\t{\"city\": \"New York\", \"country\": \"USA\"},\n\t\t\t\t{\"city\": \"Los Angeles\", \"country\": \"USA\"},\n\t\t\t},\n\t\t},\n\t}\n\n\tresult, err := Get(data, \"user.address[0].coordinates[0][10]\")\n\tif result != nil {\n\t\tt.Errorf(\"expected nil result for out-of-bounds array index in nested map and nested array and nested array and nested array, got %v\", result)\n\t}\n\tif _, ok := err.(DoesNotExist); !ok {\n\t\tt.Errorf(\"expected DoesNotExist error for out-of-bounds array index in nested map and nested array and nested array and nested array, got %v\", err)\n\t}\n}\n\nfunc TestGet_NestedMapNestedArrayNestedArrayNestedArrayNestedArray(t *testing.T) {\n\tdata := map[string]interface{}{\n\t\t\"user\": map[string]interface{}{\n\t\t\t\"firstname\": \"seth\",\n\t\t\t\"lastname\":  \"rogen\",\n\t\t\t\"address\": []map[string]string{\n\t\t\t\t{\"city\": \"New York\", \"country\": \"USA\"},\n\t\t\t\t{\"city\": \"Los Angeles\", \"country\": \"USA\"},\n\t\t\t},\n\t\t},\n\t}\n\n\tresult, err := Get(data, \"user.address[0].coordinates[0][1][2]\")\n\tif result != nil {\n\t\tt.Errorf(\"expected nil result for non-existent nested field in nested array and nested array and nested array and nested array, got %v\", result)\n\t}\n\tif _, ok := err.(DoesNotExist); !ok {\n\t\tt.Errorf(\"expected DoesNotExist error for non-existent nested field in nested array and nested array and nested array and nested array, got %v\", err)\n\t}\n}\n\nfunc TestGet_NestedMapNestedArrayNestedArrayNestedArrayNestedArrayNonExistentField(t *testing.T) {\n\tdata := map[string]interface{}{\n\t\t\"user\": map[string]interface{}{\n\t\t\t\"firstname\": \"seth\",\n\t\t\t\"lastname\":  \"rogen\",\n\t\t\t\"address\": []map[string]string{\n\t\t\t\t{\"city\": \"New York\", \"country\": \"USA\"},\n\t\t\t\t{\"city\": \"Los Angeles\", \"country\": \"USA\"},\n\t\t\t},\n\t\t},\n\t}\n\n\tresult, err := Get(data, \"user.address[0].coordinates[0][1][3]\")\n\tif result != nil {\n\t\tt.Errorf(\"expected nil result for non-existent nested field in nested array and nested array and nested array and nested array, got %v\", result)\n\t}\n\tif _, ok := err.(DoesNotExist); !ok {\n\t\tt.Errorf(\"expected DoesNotExist error for non-existent nested field in nested array and nested array and nested array and nested array, got %v\", err)\n\t}\n}\n\nfunc TestGet_NestedMapNestedArrayNestedArrayNestedArrayNestedArrayEmptyStringPath(t *testing.T) {\n\tdata := map[string]interface{}{\n\t\t\"user\": map[string]interface{}{\n\t\t\t\"firstname\": \"seth\",\n\t\t\t\"lastname\":  \"rogen\",\n\t\t\t\"address\": []map[string]string{\n\t\t\t\t{\"city\": \"New York\", \"country\": \"USA\"},\n\t\t\t\t{\"city\": \"Los Angeles\", \"country\": \"USA\"},\n\t\t\t},\n\t\t},\n\t}\n\n\tresult, err := Get(data, \"user.address[0].coordinates[0][1].\")\n\tif result != nil {\n\t\tt.Errorf(\"expected nil result for empty string path in nested map and nested array and nested array and nested array and nested array, got %v\", result)\n\t}\n\tif err != nil {\n\t\tt.Errorf(\"expected no error for empty string path in nested map and nested array and nested array and nested array and nested array, got %v\", err)\n\t}\n}\n\nfunc TestGet_NestedMapNestedArrayNestedArrayNestedArrayNestedArrayEmptyArrayPath(t *testing.T) {\n\tdata := map[string]interface{}{\n\t\t\"user\": map[string]interface{}{\n\t\t\t\"firstname\": \"seth\",\n\t\t\t\"lastname\":  \"rogen\",\n\t\t\t\"address\": []map[string]string{\n\t\t\t\t{\"city\": \"New York\", \"country\": \"USA\"},\n\t\t\t\t{\"city\": \"Los Angeles\", \"country\": \"USA\"},\n\t\t\t},\n\t\t},\n\t}\n\n\tresult, err := Get(data, \"user.address[].coordinates[0][1].\")\n\tif result != nil {\n\t\tt.Errorf(\"expected nil result for empty array path in nested map and nested array and nested array and nested array and nested array, got %v\", result)\n\t}\n\tif err != nil {\n\t\tt.Errorf(\"expected no error for empty array path in nested map and nested array and nested array and nested array and nested array, got %v\", err)\n\t}\n}\n\nfunc TestGet_NestedMapNestedArrayNestedArrayNestedArrayNestedArrayArrayIndexOutOfBounds(t *testing.T) {\n\tdata := map[string]interface{}{\n\t\t\"user\": map[string]interface{}{\n\t\t\t\"firstname\": \"seth\",\n\t\t\t\"lastname\":  \"rogen\",\n\t\t\t\"address\": []map[string]string{\n\t\t\t\t{\"city\": \"New York\", \"country\": \"USA\"},\n\t\t\t\t{\"city\": \"Los Angeles\", \"country\": \"USA\"},\n\t\t\t},\n\t\t},\n\t}\n\n\tresult, err := Get(data, \"user.address[0].coordinates[0][1][10]\")\n\tif result != nil {\n\t\tt.Errorf(\"expected nil result for out-of-bounds array index in nested map and nested array and nested array and nested array and nested array, got %v\", result)\n\t}\n\tif _, ok := err.(DoesNotExist); !ok {\n\t\tt.Errorf(\"expected DoesNotExist error for out-of-bounds array index in nested map and nested array and nested array and nested array and nested array, got %v\", err)\n\t}\n}\n\nfunc TestGet_NestedMapNestedArrayNestedArrayNestedArrayNestedArrayNestedArray(t *testing.T) {\n\tdata := map[string]interface{}{\n\t\t\"user\": map[string]interface{}{\n\t\t\t\"firstname\": \"seth\",\n\t\t\t\"lastname\":  \"rogen\",\n\t\t\t\"address\": []map[string]string{\n\t\t\t\t{\"city\": \"New York\", \"country\": \"USA\"},\n\t\t\t\t{\"city\": \"Los Angeles\", \"country\": \"USA\"},\n\t\t\t},\n\t\t},\n\t}\n\n\tresult, err := Get(data, \"user.address[0].coordinates[0][1][2][3]\")\n\tif result != nil {\n\t\tt.Errorf(\"expected nil result for non-existent nested field in nested array and nested array and nested array and nested array and nested array, got %v\", result)\n\t}\n\tif _, ok := err.(DoesNotExist); !ok {\n\t\tt.Errorf(\"expected DoesNotExist error for non-existent nested field in nested array and nested array and nested array and nested array and nested array, got %v\", err)\n\t}\n}\n\nfunc TestGet_NestedMapNestedArrayNestedArrayNestedArrayNestedArrayNestedArrayNonExistentField(t *testing.T) {\n\tdata := map[string]interface{}{\n\t\t\"user\": map[string]interface{}{\n\t\t\t\"firstname\": \"seth\",\n\t\t\t\"lastname\":  \"rogen\",\n\t\t\t\"address\": []map[string]string{\n\t\t\t\t{\"city\": \"New York\", \"country\": \"USA\"},\n\t\t\t\t{\"city\": \"Los Angeles\", \"country\": \"USA\"},\n\t\t\t},\n\t\t},\n\t}\n\n\tresult, err := Get(data, \"user.address[0].coordinates[0][1][2][4]\")\n\tif result != nil {\n\t\tt.Errorf(\"expected nil result for non-existent nested field in nested array and nested array and nested array and nested array and nested array, got %v\", result)\n\t}\n\tif _, ok := err.(DoesNotExist); !ok {\n\t\tt.Errorf(\"expected DoesNotExist error for non-existent nested field in nested array and nested array and nested array and nested array and nested array, got %v\", err)\n\t}\n}\n\nfunc TestGet_NestedMapNestedArrayNestedArrayNestedArrayNestedArrayNestedArrayEmptyStringPath(t *testing.T) {\n\tdata := map[string]interface{}{\n\t\t\"user\": map[string]interface{}{\n\t\t\t\"firstname\": \"seth\",\n\t\t\t\"lastname\":  \"rogen\",\n\t\t\t\"address\": []map[string]string{\n\t\t\t\t{\"city\": \"New York\", \"country\": \"USA\"},\n\t\t\t\t{\"city\": \"Los Angeles\", \"country\": \"USA\"},\n\t\t\t},\n\t\t},\n\t}\n\n\tresult, err := Get(data, \"user.address[0].coordinates[0][1][2][3]\")\n\tif result != nil {\n\t\tt.Errorf(\"expected nil result for non-existent nested field in nested array and nested array and nested array and nested array and nested array, got %v\", result)\n\t}\n\tif _, ok := err.(DoesNotExist); !ok {\n\t\tt.Errorf(\"expected DoesNotExist error for non-existent nested field in nested array and nested array and nested array and nested array and nested array, got %v\", err)\n\t}\n}\n\nfunc TestGet_NestedMapNestedArrayNestedArrayNestedArrayNestedArrayNestedArrayEmptyArrayPath(t *testing.T) {\n\tdata := map[string]interface{}{\n\t\t\"user\": map[string]interface{}{\n\t\t\t\"firstname\": \"seth\",\n\t\t\t\"lastname\":\n",
    "amount_of_generated_test_cases": 10,
    "single_test_run_command": "go test jsonpath/jsonpath_test.go"
}