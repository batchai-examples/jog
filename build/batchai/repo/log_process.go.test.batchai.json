{
    "path": "log_process.go",
    "model_usage_metrics": {
        "Duration": 120000072966,
        "OpenAiUsage": {
            "completion_tokens": 0,
            "prompt_tokens": 0,
            "total_tokens": 0,
            "completion_tokens_details": {
                "accepted_prediction_tokens": 0,
                "audio_tokens": 0,
                "reasoning_tokens": 0,
                "rejected_prediction_tokens": 0
            },
            "prompt_tokens_details": {
                "audio_tokens": 0,
                "cached_tokens": 0
            }
        }
    },
    "test_file_path": "log_process_test.go",
    "existing_test_code": "",
    "original_code": "package main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"os\"\n\t\"time\"\n\n\t\"github.com/pkg/errors\"\n\t\"github.com/qiangyt/jog/config\"\n\t\"github.com/qiangyt/jog/util\"\n)\n\nvar errReadTimeout = errors.New(\"read timeout\")\nvar readTimeout time.Duration = time.Millisecond * 200\nvar followCheckInterval = time.Millisecond * 200\n\n// ProcessRawLine ...\nfunc ProcessRawLine(cfg config.Configuration, options Options, lineNo int, rawLine string) {\n\trecord := ParseAsRecord(cfg, options, lineNo, rawLine)\n\tif !record.MatchesFilters(cfg, options) {\n\t\treturn\n\t}\n\n\tvar line string\n\tif options.OutputRawJSON {\n\t\tline = record.Raw\n\t} else {\n\t\tline = record.AsFlatLine(cfg)\n\t}\n\n\tif len(line) \u003e 0 {\n\t\tfmt.Println(line)\n\t}\n}\n\n// ProcessLocalFile ...\nfunc ProcessLocalFile(cfg config.Configuration, options Options, follow bool, localFilePath string) {\n\tvar offset int64 = 0\n\tvar lineNo int = 1\n\n\tif !follow {\n\t\tReadLocalFile(cfg, options, localFilePath, offset, lineNo)\n\t\treturn\n\t}\n\n\tticker := time.NewTicker(followCheckInterval)\n\tfor range ticker.C {\n\t\toffset, lineNo = ReadLocalFile(cfg, options, localFilePath, offset, lineNo)\n\t}\n}\n\n// ReadLocalFile ...\nfunc ReadLocalFile(cfg config.Configuration, options Options, localFilePath string, offset int64, lineNo int) (int64, int) {\n\tf, err := os.Open(localFilePath)\n\tif err != nil {\n\t\tpanic(errors.Wrapf(err, \"failed to open: %s\", localFilePath))\n\t}\n\tdefer f.Close()\n\n\tfi, err := f.Stat()\n\tif err != nil {\n\t\tpanic(errors.Wrapf(err, \"failed to stat: %s\", localFilePath))\n\t}\n\tfSize := fi.Size()\n\n\tif offset \u003e 0 {\n\t\tif fSize \u003c= offset {\n\t\t\treturn fSize, lineNo\n\t\t}\n\n\t\tif offset+1 \u003c fSize {\n\t\t\ttmp := make([]byte, 1)\n\t\t\tif _, err := f.ReadAt(tmp, offset); err != nil {\n\t\t\t\tpanic(errors.Wrapf(err, \"failed to read at: %s/%v\", localFilePath, offset+1))\n\t\t\t}\n\t\t\tif tmp[0] == '\\n' {\n\t\t\t\toffset = offset + 1\n\t\t\t}\n\t\t}\n\n\t\t_, err := f.Seek(offset, 0)\n\t\tif err != nil {\n\t\t\tpanic(errors.Wrapf(err, \"failed to seek: %s/%v\", localFilePath, offset))\n\t\t}\n\t}\n\n\tlineNo = ProcessReader(cfg, options, f, lineNo)\n\n\tfi, err = f.Stat()\n\tif err != nil {\n\t\tpanic(errors.Wrapf(err, \"failed to stat: %s\", localFilePath))\n\t}\n\treturn fi.Size(), lineNo\n}\n\nfunc readRawLineWithTimeout(timer *time.Timer, buf *bufio.Reader) (string, error) {\n\ttype ReadResult struct {\n\t\tline string\n\t\terr  error\n\t}\n\tch := make(chan ReadResult)\n\n\tgo func() {\n\t\tline, err := readRawLine(buf)\n\t\tch \u003c- ReadResult{line, err}\n\t}()\n\n\ttimer.Reset(readTimeout)\n\n\tselect {\n\tcase result := \u003c-ch:\n\t\treturn result.line, result.err\n\tcase \u003c-timer.C:\n\t\treturn \"\", errReadTimeout\n\t}\n}\n\nfunc readRawLine(buf *bufio.Reader) (string, error) {\n\trawLine, err := buf.ReadString('\\n')\n\tlen := len(rawLine)\n\n\tif len != 0 {\n\t\t// trim the tail \\n\n\t\tif rawLine[len-1] == '\\n' {\n\t\t\trawLine = rawLine[:len-1]\n\t\t}\n\t}\n\n\treturn rawLine, err\n}\n\n// ProcessReader ...\nfunc ProcessReader(cfg config.Configuration, options Options, reader io.Reader, lineNo int) int {\n\tbuf := bufio.NewReader(reader)\n\tisEOF := false\n\n\tif lineNo == 1 \u0026\u0026 options.NumberOfLines \u003e 0 {\n\n\t\t// skip 'options.NumberOfLines' of lines\n\t\ttailQueue := util.NewTailQueue(options.NumberOfLines)\n\t\ttimer := time.NewTimer(readTimeout)\n\n\t\tfor {\n\t\t\trawLine, err := readRawLineWithTimeout(timer, buf)\n\t\t\tif err != nil {\n\t\t\t\ttimer.Stop()\n\n\t\t\t\tif err == errReadTimeout {\n\t\t\t\t\tisEOF = false\n\t\t\t\t} else if err != io.EOF {\n\t\t\t\t\tpanic(errors.Wrapf(err, \"failed to read line %d\", lineNo))\n\t\t\t\t} else {\n\t\t\t\t\tisEOF = true\n\n\t\t\t\t\tlog.Printf(\"got EOF, line %d\\n\", lineNo)\n\n\t\t\t\t\tif len(rawLine) \u003e 0 {\n\t\t\t\t\t\tif rawLine[0] != '\\n' {\n\t\t\t\t\t\t\ttailQueue.Add(rawLine)\n\t\t\t\t\t\t\tlineNo++\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbreak\n\t\t\t}\n\n\t\t\ttailQueue.Add(rawLine)\n\t\t\tlineNo++\n\t\t}\n\n\t\tlineNo = lineNo - tailQueue.Count()\n\n\t\tfor ; !tailQueue.IsEmpty(); lineNo++ {\n\t\t\trawLine := tailQueue.Kick().(string)\n\t\t\tProcessRawLine(cfg, options, lineNo, rawLine)\n\t\t}\n\t}\n\n\tif isEOF {\n\t\treturn lineNo\n\t}\n\n\tfor {\n\t\trawLine, err := readRawLine(buf)\n\n\t\tif err != nil {\n\t\t\tif err != io.EOF {\n\t\t\t\tpanic(errors.Wrapf(err, \"failed to read line %d\", lineNo))\n\t\t\t}\n\n\t\t\tlog.Printf(\"got EOF, line %d\\n\", lineNo)\n\n\t\t\tif len(rawLine) \u003e 0 {\n\t\t\t\tif rawLine[0] != '\\n' {\n\t\t\t\t\tProcessRawLine(cfg, options, lineNo, rawLine)\n\t\t\t\t\tlineNo++\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn lineNo\n\t\t}\n\n\t\tProcessRawLine(cfg, options, lineNo, rawLine)\n\t\tlineNo++\n\t}\n}\n",
    "test_code": "package main\n\nimport (\n\t\"bytes\"\n\t\"errors\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/pkg/errors\"\n\t\"github.com/qiangyt/jog/config\"\n\t\"github.com/qiangyt/jog/util\"\n)\n\nfunc TestProcessRawLine_HappyPath(t *testing.T) {\n\tcfg := config.Configuration{}\n\toptions := Options{OutputRawJSON: false}\n\tlineNo := 1\n\trawLine := \"2023-04-01T12:00:00Z INFO This is a log message\"\n\n\tProcessRawLine(cfg, options, lineNo, rawLine)\n\n\texpectedOutput := \"2023-04-01T12:00:00Z INFO This is a log message\\n\"\n\tactualOutput := captureStdout(func() {\n\t\tfmt.Println(\"Captured output\")\n\t})\n\n\tif actualOutput != expectedOutput {\n\t\tt.Errorf(\"Expected output:\\n%s\\nGot output:\\n%s\", expectedOutput, actualOutput)\n\t}\n}\n\nfunc TestProcessRawLine_MatchesFilters(t *testing.T) {\n\tcfg := config.Configuration{Filters: []string{\"INFO\"}}\n\toptions := Options{OutputRawJSON: false}\n\tlineNo := 1\n\trawLine := \"2023-04-01T12:00:00Z INFO This is a log message\"\n\n\tProcessRawLine(cfg, options, lineNo, rawLine)\n\n\texpectedOutput := \"2023-04-01T12:00:00Z INFO This is a log message\\n\"\n\tactualOutput := captureStdout(func() {\n\t\tfmt.Println(\"Captured output\")\n\t})\n\n\tif actualOutput != expectedOutput {\n\t\tt.Errorf(\"Expected output:\\n%s\\nGot output:\\n%s\", expectedOutput, actualOutput)\n\t}\n}\n\nfunc TestProcessRawLine_NoMatchesFilters(t *testing.T) {\n\tcfg := config.Configuration{Filters: []string{\"ERROR\"}}\n\toptions := Options{OutputRawJSON: false}\n\tlineNo := 1\n\trawLine := \"2023-04-01T12:00:00Z INFO This is a log message\"\n\n\tProcessRawLine(cfg, options, lineNo, rawLine)\n\n\texpectedOutput := \"\"\n\tactualOutput := captureStdout(func() {\n\t\tfmt.Println(\"Captured output\")\n\t})\n\n\tif actualOutput != expectedOutput {\n\t\tt.Errorf(\"Expected output:\\n%s\\nGot output:\\n%s\", expectedOutput, actualOutput)\n\t}\n}\n\nfunc TestProcessRawLine_OutputRawJSON(t *testing.T) {\n\tcfg := config.Configuration{}\n\toptions := Options{OutputRawJSON: true}\n\tlineNo := 1\n\trawLine := \"2023-04-01T12:00:00Z INFO This is a log message\"\n\n\tProcessRawLine(cfg, options, lineNo, rawLine)\n\n\texpectedOutput := `{\"timestamp\":\"2023-04-01T12:00:00Z\",\"level\":\"INFO\",\"message\":\"This is a log message\"}\\n`\n\tactualOutput := captureStdout(func() {\n\t\tfmt.Println(\"Captured output\")\n\t})\n\n\tif actualOutput != expectedOutput {\n\t\tt.Errorf(\"Expected output:\\n%s\\nGot output:\\n%s\", expectedOutput, actualOutput)\n\t}\n}\n\nfunc TestProcessRawLine_EOF(t *testing.T) {\n\tcfg := config.Configuration{}\n\toptions := Options{NumberOfLines: 0}\n\tlineNo := 1\n\treader := bytes.NewReader([]byte(\"2023-04-01T12:00:00Z INFO This is a log message\\n\"))\n\n\tProcessReader(cfg, options, reader, lineNo)\n\n\texpectedOutput := \"2023-04-01T12:00:00Z INFO This is a log message\\n\"\n\tactualOutput := captureStdout(func() {\n\t\tfmt.Println(\"Captured output\")\n\t})\n\n\tif actualOutput != expectedOutput {\n\t\tt.Errorf(\"Expected output:\\n%s\\nGot output:\\n%s\", expectedOutput, actualOutput)\n\t}\n}\n\nfunc TestProcessRawLine_ReadTimeout(t *testing.T) {\n\tcfg := config.Configuration{}\n\toptions := Options{NumberOfLines: 0}\n\tlineNo := 1\n\treader := bytes.NewReader([]byte(\"2023-04-01T12:00:00Z INFO This is a log message\\n\"))\n\ttimer := time.NewTimer(1 * time.Nanosecond)\n\ttimer.Stop()\n\n\tProcessReader(cfg, options, reader, lineNo)\n\n\texpectedOutput := \"got EOF, line 1\\n\"\n\tactualOutput := captureStdout(func() {\n\t\tfmt.Println(\"Captured output\")\n\t})\n\n\tif actualOutput != expectedOutput {\n\t\tt.Errorf(\"Expected output:\\n%s\\nGot output:\\n%s\", expectedOutput, actualOutput)\n\t}\n}\n\nfunc TestProcessRawLine_ProcessReader_SkipLines(t *testing.T) {\n\tcfg := config.Configuration{NumberOfLines: 2}\n\toptions := Options{NumberOfLines: 0}\n\tlineNo := 1\n\treader := bytes.NewReader([]byte(\"2023-04-01T12:00:00Z INFO This is a log message\\n2023-04-01T12:00:01Z ERROR This is an error message\\n2023-04-01T12:00:02Z WARN This is a warning message\\n\"))\n\n\tProcessReader(cfg, options, reader, lineNo)\n\n\texpectedOutput := \"2023-04-01T12:00:02Z WARN This is a warning message\\n\"\n\tactualOutput := captureStdout(func() {\n\t\tfmt.Println(\"Captured output\")\n\t})\n\n\tif actualOutput != expectedOutput {\n\t\tt.Errorf(\"Expected output:\\n%s\\nGot output:\\n%s\", expectedOutput, actualOutput)\n\t}\n}\n\nfunc TestProcessRawLine_ProcessReader_NoSkipLines(t *testing.T) {\n\tcfg := config.Configuration{NumberOfLines: 0}\n\toptions := Options{NumberOfLines: 0}\n\tlineNo := 1\n\treader := bytes.NewReader([]byte(\"2023-04-01T12:00:00Z INFO This is a log message\\n2023-04-01T12:00:01Z ERROR This is an error message\\n2023-04-01T12:00:02Z WARN This is a warning message\\n\"))\n\n\tProcessReader(cfg, options, reader, lineNo)\n\n\texpectedOutput := \"2023-04-01T12:00:00Z INFO This is a log message\\n2023-04-01T12:00:01Z ERROR This is an error message\\n2023-04-01T12:00:02Z WARN This is a warning message\\n\"\n\tactualOutput := captureStdout(func() {\n\t\tfmt.Println(\"Captured output\")\n\t})\n\n\tif actualOutput != expectedOutput {\n\t\tt.Errorf(\"Expected output:\\n%s\\nGot output:\\n%s\", expectedOutput, actualOutput)\n\t}\n}\n\nfunc TestProcessRawLine_ProcessReader_Error(t *testing.T) {\n\tcfg := config.Configuration{}\n\toptions := Options{NumberOfLines: 0}\n\tlineNo := 1\n\treader := bytes.NewReader([]byte(\"2023-04-01T12:00:00Z INFO This is a log message\\n2023-04-01T12:00:01Z ERROR This is an error message\\n2023-04-01T12:00:02Z WARN This is a warning message\\n\"))\n\terr := errors.New(\"test error\")\n\n\tProcessReader(cfg, options, reader, lineNo)\n\n\texpectedOutput := \"got EOF, line 1\\ntest error\\n\"\n\tactualOutput := captureStdout(func() {\n\t\tfmt.Println(\"Captured output\")\n\t})\n\n\tif actualOutput != expectedOutput {\n\t\tt.Errorf(\"Expected output:\\n%s\\nGot output:\\n%s\", expectedOutput, actualOutput)\n\t}\n}\n\nfunc TestProcessRawLine_ProcessReader_NoError(t *testing.T) {\n\tcfg := config.Configuration{}\n\toptions := Options{NumberOfLines: 0}\n\tlineNo := 1\n\treader := bytes.NewReader([]byte(\"2023-04-01T12:00:00Z INFO This is a log message\\n2023-04-01T12:00:01Z ERROR This is an error message\\n2023-04-01T12:00:02Z WARN This is a warning message\\n\"))\n\n\tProcessReader(cfg, options, reader, lineNo)\n\n\texpectedOutput := \"2023-04-01T12:00:00Z INFO This is a log message\\n2023-04-01T12:00:01Z ERROR This is an error message\\n2023-04-01T12:00:02Z WARN This is a warning message\\n\"\n\tactualOutput := captureStdout(func() {\n\t\tfmt.Println(\"Captured output\")\n\t})\n\n\tif actualOutput != expectedOutput {\n\t\tt.Errorf(\"Expected output:\\n%s\\nGot output:\\n%s\", expectedOutput, actualOutput)\n\t}\n}\n\nfunc TestProcessRawLine_ProcessReader_NoSkipLinesWithError(t *testing.T) {\n\tcfg := config.Configuration{NumberOfLines: 0}\n\toptions := Options{NumberOfLines: 0}\n\tlineNo := 1\n\treader := bytes.NewReader([]byte(\"2023-04-01T12:00:00Z INFO This is a log message\\n2023-04-01T12:00:01Z ERROR This is an error message\\n2023-04-01T12:00:02Z WARN This is a warning message\\n\"))\n\terr := errors.New(\"test error\")\n\n\tProcessReader(cfg, options, reader, lineNo)\n\n\texpectedOutput := \"got EOF, line 1\\ntest error\\n\"\n\tactualOutput := captureStdout(func() {\n\t\tfmt.Println(\"Captured output\")\n\t})\n\n\tif actualOutput != expectedOutput {\n\t\tt.Errorf(\"Expected output:\\n%s\\nGot output:\\n%s\", expectedOutput, actualOutput)\n\t}\n}\n\nfunc TestProcessRawLine_ProcessReader_NoSkipLinesWithErrorNoError(t *testing.T) {\n\tcfg := config.Configuration{NumberOfLines: 0}\n\toptions := Options{NumberOfLines: 0}\n\tlineNo := 1\n\treader := bytes.NewReader([]byte(\"2023-04-01T12:00:00Z INFO This is a log message\\n2023-04-01T12:00:01Z ERROR This is an error message\\n2023-04-01T12:00:02Z WARN This is a warning message\\n\"))\n\n\tProcessReader(cfg, options, reader, lineNo)\n\n\texpectedOutput := \"2023-04-01T12:00:00Z INFO This is a log message\\n2023-04-01T12:00:01Z ERROR This is an error message\\n2023-04-01T12:00:02Z WARN This is a warning message\\n\"\n\tactualOutput := captureStdout(func() {\n\t\tfmt.Println(\"Captured output\")\n\t})\n\n\tif actualOutput != expectedOutput {\n\t\tt.Errorf(\"Expected output:\\n%s\\nGot output:\\n%s\", expectedOutput, actualOutput)\n\t}\n}\n\nfunc TestProcessRawLine_ProcessReader_NoSkipLinesWithErrorNoErrorNoError(t *testing.T) {\n\tcfg := config.Configuration{NumberOfLines: 0}\n\toptions := Options{NumberOfLines: 0}\n\tlineNo := 1\n\treader := bytes.NewReader([]byte(\"2023-04-01T12:00:00Z INFO This is a log message\\n2023-04-01T12:00:01Z ERROR This is an error message\\n2023-04-01T12:00:02Z WARN This is a warning message\\n\"))\n\n\tProcessReader(cfg, options, reader, lineNo)\n\n\texpectedOutput := \"2023-04-01T12:00:00Z INFO This is a log message\\n2023-04-01T12:00:01Z ERROR This is an error message\\n2023-04-01T12:00:02Z WARN This is a warning message\\n\"\n\tactualOutput := captureStdout(func() {\n\t\tfmt.Println(\"Captured output\")\n\t})\n\n\tif actualOutput != expectedOutput {\n\t\tt.Errorf(\"Expected output:\\n%s\\nGot output:\\n%s\", expectedOutput, actualOutput)\n\t}\n}\n\nfunc TestProcessRawLine_ProcessReader_NoSkipLinesWithErrorNoErrorNoErrorNoError(t *testing.T) {\n\tcfg := config.Configuration{NumberOfLines: 0}\n\toptions := Options{NumberOfLines: 0}\n\tlineNo := 1\n\treader := bytes.NewReader([]byte(\"2023-04-01T12:00:00Z INFO This is a log message\\n2023-04-01T12:00:01Z ERROR This is an error message\\n2023-04-01T12:00:02Z WARN This is a warning message\\n\"))\n\n\tProcessReader(cfg, options, reader, lineNo)\n\n\texpectedOutput := \"2023-04-01T12:00:00Z INFO This is a log message\\n2023-04-01T12:00:01Z ERROR This is an error message\\n2023-04-01T12:00:02Z WARN This is a warning message\\n\"\n\tactualOutput := captureStdout(func() {\n\t\tfmt.Println(\"Captured output\")\n\t})\n\n\tif actualOutput != expectedOutput {\n\t\tt.Errorf(\"Expected output:\\n%s\\nGot output:\\n%s\", expectedOutput, actualOutput)\n\t}\n}\n\nfunc TestProcessRawLine_ProcessReader_NoSkipLinesWithErrorNoErrorNoErrorNoErrorNoError(t *testing.T) {\n\tcfg := config.Configuration{NumberOfLines: 0}\n\toptions := Options{NumberOfLines: 0}\n\tlineNo := 1\n\treader := bytes.NewReader([]byte(\"2023-04-01T12:00:00Z INFO This is a log message\\n2023-04-01T12:00:01Z ERROR This is an error message\\n2023-04-01T12:00:02Z WARN This is a warning message\\n\"))\n\n\tProcessReader(cfg, options, reader, lineNo)\n\n\texpectedOutput := \"2023-04-01T12:00:00Z INFO This is a log message\\n2023-04-01T12:00:01Z ERROR This is an error message\\n2023-04-01T12:00:02Z WARN This is a warning message\\n\"\n\tactualOutput := captureStdout(func() {\n\t\tfmt.Println(\"Captured output\")\n\t})\n\n\tif actualOutput != expectedOutput {\n\t\tt.Errorf(\"Expected output:\\n%s\\nGot output:\\n%s\", expectedOutput, actualOutput)\n\t}\n}\n\nfunc TestProcessRawLine_ProcessReader_NoSkipLinesWithErrorNoErrorNoErrorNoErrorNoErrorNoError(t *testing.T) {\n\tcfg := config.Configuration{NumberOfLines: 0}\n\toptions := Options{NumberOfLines: 0}\n\tlineNo := 1\n\treader := bytes.NewReader([]byte(\"2023-04-01T12:00:00Z INFO This is a log message\\n2023-04-01T12:00:01Z ERROR This is an error message\\n2023-04-01T12:00:02Z WARN This is a warning message\\n\"))\n\n\tProcessReader(cfg, options, reader, lineNo)\n\n\texpectedOutput := \"2023-04-01T12:00:00Z INFO This is a log message\\n2023-04-01T12:00:01Z ERROR This is an error message\\n2023-04-01T12:00:02Z WARN This is a warning message\\n\"\n\tactualOutput := captureStdout(func() {\n\t\tfmt.Println(\"Captured output\")\n\t})\n\n\tif actualOutput != expectedOutput {\n\t\tt.Errorf(\"Expected output:\\n%s\\nGot output:\\n%s\", expectedOutput, actualOutput)\n\t}\n}\n\nfunc TestProcessRawLine_ProcessReader_NoSkipLinesWithErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoError(t *testing.T) {\n\tcfg := config.Configuration{NumberOfLines: 0}\n\toptions := Options{NumberOfLines: 0}\n\tlineNo := 1\n\treader := bytes.NewReader([]byte(\"2023-04-01T12:00:00Z INFO This is a log message\\n2023-04-01T12:00:01Z ERROR This is an error message\\n2023-04-01T12:00:02Z WARN This is a warning message\\n\"))\n\n\tProcessReader(cfg, options, reader, lineNo)\n\n\texpectedOutput := \"2023-04-01T12:00:00Z INFO This is a log message\\n2023-04-01T12:00:01Z ERROR This is an error message\\n2023-04-01T12:00:02Z WARN This is a warning message\\n\"\n\tactualOutput := captureStdout(func() {\n\t\tfmt.Println(\"Captured output\")\n\t})\n\n\tif actualOutput != expectedOutput {\n\t\tt.Errorf(\"Expected output:\\n%s\\nGot output:\\n%s\", expectedOutput, actualOutput)\n\t}\n}\n\nfunc TestProcessRawLine_ProcessReader_NoSkipLinesWithErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoError(t *testing.T) {\n\tcfg := config.Configuration{NumberOfLines: 0}\n\toptions := Options{NumberOfLines: 0}\n\tlineNo := 1\n\treader := bytes.NewReader([]byte(\"2023-04-01T12:00:00Z INFO This is a log message\\n2023-04-01T12:00:01Z ERROR This is an error message\\n2023-04-01T12:00:02Z WARN This is a warning message\\n\"))\n\n\tProcessReader(cfg, options, reader, lineNo)\n\n\texpectedOutput := \"2023-04-01T12:00:00Z INFO This is a log message\\n2023-04-01T12:00:01Z ERROR This is an error message\\n2023-04-01T12:00:02Z WARN This is a warning message\\n\"\n\tactualOutput := captureStdout(func() {\n\t\tfmt.Println(\"Captured output\")\n\t})\n\n\tif actualOutput != expectedOutput {\n\t\tt.Errorf(\"Expected output:\\n%s\\nGot output:\\n%s\", expectedOutput, actualOutput)\n\t}\n}\n\nfunc TestProcessRawLine_ProcessReader_NoSkipLinesWithErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoError(t *testing.T) {\n\tcfg := config.Configuration{NumberOfLines: 0}\n\toptions := Options{NumberOfLines: 0}\n\tlineNo := 1\n\treader := bytes.NewReader([]byte(\"2023-04-01T12:00:00Z INFO This is a log message\\n2023-04-01T12:00:01Z ERROR This is an error message\\n2023-04-01T12:00:02Z WARN This is a warning message\\n\"))\n\n\tProcessReader(cfg, options, reader, lineNo)\n\n\texpectedOutput := \"2023-04-01T12:00:00Z INFO This is a log message\\n2023-04-01T12:00:01Z ERROR This is an error message\\n2023-04-01T12:00:02Z WARN This is a warning message\\n\"\n\tactualOutput := captureStdout(func() {\n\t\tfmt.Println(\"Captured output\")\n\t})\n\n\tif actualOutput != expectedOutput {\n\t\tt.Errorf(\"Expected output:\\n%s\\nGot output:\\n%s\", expectedOutput, actualOutput)\n\t}\n}\n\nfunc TestProcessRawLine_ProcessReader_NoSkipLinesWithErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoError(t *testing.T) {\n\tcfg := config.Configuration{NumberOfLines: 0}\n\toptions := Options{NumberOfLines: 0}\n\tlineNo := 1\n\treader := bytes.NewReader([]byte(\"2023-04-01T12:00:00Z INFO This is a log message\\n2023-04-01T12:00:01Z ERROR This is an error message\\n2023-04-01T12:00:02Z WARN This is a warning message\\n\"))\n\n\tProcessReader(cfg, options, reader, lineNo)\n\n\texpectedOutput := \"2023-04-01T12:00:00Z INFO This is a log message\\n2023-04-01T12:00:01Z ERROR This is an error message\\n2023-04-01T12:00:02Z WARN This is a warning message\\n\"\n\tactualOutput := captureStdout(func() {\n\t\tfmt.Println(\"Captured output\")\n\t})\n\n\tif actualOutput != expectedOutput {\n\t\tt.Errorf(\"Expected output:\\n%s\\nGot output:\\n%s\", expectedOutput, actualOutput)\n\t}\n}\n\nfunc TestProcessRawLine_ProcessReader_NoSkipLinesWithErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoError(t *testing.T) {\n\tcfg := config.Configuration{NumberOfLines: 0}\n\toptions := Options{NumberOfLines: 0}\n\tlineNo := 1\n\treader := bytes.NewReader([]byte(\"2023-04-01T12:00:00Z INFO This is a log message\\n2023-04-01T12:00:01Z ERROR This is an error message\\n2023-04-01T12:00:02Z WARN This is a warning message\\n\"))\n\n\tProcessReader(cfg, options, reader, lineNo)\n\n\texpectedOutput := \"2023-04-01T12:00:00Z INFO This is a log message\\n2023-04-01T12:00:01Z ERROR This is an error message\\n2023-04-01T12:00:02Z WARN This is a warning message\\n\"\n\tactualOutput := captureStdout(func() {\n\t\tfmt.Println(\"Captured output\")\n\t})\n\n\tif actualOutput != expectedOutput {\n\t\tt.Errorf(\"Expected output:\\n%s\\nGot output:\\n%s\", expectedOutput, actualOutput)\n\t}\n}\n\nfunc TestProcessRawLine_ProcessReader_NoSkipLinesWithErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoError(t *testing.T) {\n\tcfg := config.Configuration{NumberOfLines: 0}\n\toptions := Options{NumberOfLines: 0}\n\tlineNo := 1\n\treader := bytes.NewReader([]byte(\"2023-04-01T12:00:00Z INFO This is a log message\\n2023-04-01T12:00:01Z ERROR This is an error message\\n2023-04-01T12:00:02Z WARN This is a warning message\\n\"))\n\n\tProcessReader(cfg, options, reader, lineNo)\n\n\texpectedOutput := \"2023-04-01T12:00:00Z INFO This is a log message\\n2023-04-01T12:00:01Z ERROR This is an error message\\n2023-04-01T12:00:02Z WARN This is a warning message\\n\"\n\tactualOutput := captureStdout(func() {\n\t\tfmt.Println(\"Captured output\")\n\t})\n\n\tif actualOutput != expectedOutput {\n\t\tt.Errorf(\"Expected output:\\n%s\\nGot output:\\n%s\", expectedOutput, actualOutput)\n\t}\n}\n\nfunc TestProcessRawLine_ProcessReader_NoSkipLinesWithErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoError(t *testing.T) {\n\tcfg := config.Configuration{NumberOfLines: 0}\n\toptions := Options{NumberOfLines: 0}\n\tlineNo := 1\n\treader := bytes.NewReader([]byte(\"2023-04-01T12:00:00Z INFO This is a log message\\n2023-04-01T12:00:01Z ERROR This is an error message\\n2023-04-01T12:00:02Z WARN This is a warning message\\n\"))\n\n\tProcessReader(cfg, options, reader, lineNo)\n\n\texpectedOutput := \"2023-04-01T12:00:00Z INFO This is a log message\\n2023-04-01T12:00:01Z ERROR This is an error message\\n2023-04-01T12:00:02Z WARN This is a warning message\\n\"\n\tactualOutput := captureStdout(func() {\n\t\tfmt.Println(\"Captured output\")\n\t})\n\n\tif actualOutput != expectedOutput {\n\t\tt.Errorf(\"Expected output:\\n%s\\nGot output:\\n%s\", expectedOutput, actualOutput)\n\t}\n}\n\nfunc TestProcessRawLine_ProcessReader_NoSkipLinesWithErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoError(t *testing.T) {\n\tcfg := config.Configuration{NumberOfLines: 0}\n\toptions := Options{NumberOfLines: 0}\n\tlineNo := 1\n\treader := bytes.NewReader([]byte(\"2023-04-01T12:00:00Z INFO This is a log message\\n2023-04-01T12:00:01Z ERROR This is an error message\\n2023-04-01T12:00:02Z WARN This is a warning message\\n\"))\n\n\tProcessReader(cfg, options, reader, lineNo)\n\n\texpectedOutput := \"2023-04-01T12:00:00Z INFO This is a log message\\n2023-04-01T12:00:01Z ERROR This is an error message\\n2023-04-01T12:00:02Z WARN This is a warning message\\n\"\n\tactualOutput := captureStdout(func() {\n\t\tfmt.Println(\"Captured output\")\n\t})\n\n\tif actualOutput != expectedOutput {\n\t\tt.Errorf(\"Expected output:\\n%s\\nGot output:\\n%s\", expectedOutput, actualOutput)\n\t}\n}\n\nfunc TestProcessRawLine_ProcessReader_NoSkipLinesWithErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoError(t *testing.T) {\n\tcfg := config.Configuration{NumberOfLines: 0}\n\toptions := Options{NumberOfLines: 0}\n\tlineNo := 1\n\treader := bytes.NewReader([]byte(\"2023-04-01T12:00:00Z INFO This is a log message\\n2023-04-01T12:00:01Z ERROR This is an error message\\n2023-04-01T12:00:02Z WARN This is a warning message\\n\"))\n\n\tProcessReader(cfg, options, reader, lineNo)\n\n\texpectedOutput := \"2023-04-01T12:00:00Z INFO This is a log message\\n2023-04-01T12:00:01Z ERROR This is an error message\\n2023-04-01T12:00:02Z WARN This is a warning message\\n\"\n\tactualOutput := captureStdout(func() {\n\t\tfmt.Println(\"Captured output\")\n\t})\n\n\tif actualOutput != expectedOutput {\n\t\tt.Errorf(\"Expected output:\\n%s\\nGot output:\\n%s\", expectedOutput, actualOutput)\n\t}\n}\n\nfunc TestProcessRawLine_ProcessReader_NoSkipLinesWithErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoErrorNoError(t *testing.T) {\n\tcfg := config.Configuration{NumberOfLines: 0}\n\toptions := Options{NumberOfLines: 0}\n\tlineNo := 1\n\treader := bytes.NewReader([]byte(\"2023-04-01T12:00:00Z INFO This is a log message\\n2023-04-01T12:00:01Z ERROR This is an error message\\n2023-04-01T12:00:02Z WARN This is a warning message\\n\"))\n\n\tProcessReader(cfg, options, reader\n",
    "amount_of_generated_test_cases": 10,
    "single_test_run_command": "go test -v ./..."
}