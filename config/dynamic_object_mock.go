// Code generated by MockGen. DO NOT EDIT.
// Source: ./dynamic_object.go

// Package config is a generated GoMock package.
package config

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDynamicObject is a mock of DynamicObject interface.
type MockDynamicObject struct {
	ctrl     *gomock.Controller
	recorder *MockDynamicObjectMockRecorder
}

// MockDynamicObjectMockRecorder is the mock recorder for MockDynamicObject.
type MockDynamicObjectMockRecorder struct {
	mock *MockDynamicObject
}

// NewMockDynamicObject creates a new mock instance.
func NewMockDynamicObject(ctrl *gomock.Controller) *MockDynamicObject {
	mock := &MockDynamicObject{ctrl: ctrl}
	mock.recorder = &MockDynamicObjectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDynamicObject) EXPECT() *MockDynamicObjectMockRecorder {
	return m.recorder
}

// FromMap mocks base method.
func (m_2 *MockDynamicObject) FromMap(m map[string]interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "FromMap", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// FromMap indicates an expected call of FromMap.
func (mr *MockDynamicObjectMockRecorder) FromMap(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromMap", reflect.TypeOf((*MockDynamicObject)(nil).FromMap), m)
}

// Init mocks base method.
func (m *MockDynamicObject) Init(cfg Configuration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init", cfg)
}

// Init indicates an expected call of Init.
func (mr *MockDynamicObjectMockRecorder) Init(cfg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockDynamicObject)(nil).Init), cfg)
}

// Reset mocks base method.
func (m *MockDynamicObject) Reset() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset")
}

// Reset indicates an expected call of Reset.
func (mr *MockDynamicObjectMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockDynamicObject)(nil).Reset))
}

// ToMap mocks base method.
func (m *MockDynamicObject) ToMap() map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToMap")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// ToMap indicates an expected call of ToMap.
func (mr *MockDynamicObjectMockRecorder) ToMap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToMap", reflect.TypeOf((*MockDynamicObject)(nil).ToMap))
}
